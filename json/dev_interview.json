{
  "category": [
    {
      "category_name": "Web & Mobile dev",
      "sub_category":[
        {
          "sub_category_name":"ADO.NET",
          "junior_level": [
              {
                "q":"What is ADO.NET?",
                "a":"ADO stands for Active Data Object and ADO.NET is a set of .NET libraries for ADO.NET is a collection of managed libraries used by .NET applications for data source communication using a driver or provider:"
              },
              {
                "q":"What is the basic difference between ADO.NET and Entity Framework?",
                "a":"ADO.NET Entity Framework is an ORM (object-relational mapping) which creates a higher abstract object model over ADO.NET components. ADO.NET is a layer closer to the database (datatables, datasets and etc...). The main and the only benefit of EF is it auto-generates code for the Model (middle layer), Data Access Layer, and mapping code, thus reducing a lot of development time."
              },
              {
                "q":"What is the SqlCommandBuilder?",
                "a":"CommandBuilder helps you to generate update, delete, and insert commands on a single database table for a data adapter. Similar to other objects, each data provider has a command builder class. The OleDbCommandBuilder, SqlCommonBuilder, and OdbcCommandBuilder classes represent the CommonBuilder object in the OleDb, Sql, and ODBC data providers."
              },
              {
                "q":"What is exactly meaning of disconnected and connected approach in ADO.NET?",
                "a":"In short:\nDisconnected = Make Connection , Fetch Data , Close Connection\nConnected = Make Connection , Keep Connection alive , Close Connection when close is called."
              },
              {
                "q":"What is the DataAdapter Object in ADO.NET?",
                "a":"A DataAdapter is used to retrieve data from a data source and populate tables within a DataSet. Data Adapters form the bridge between a data source and a dataset. The DataAdapter also resolves changes made to the DataSet back to the data source. The DataAdapter uses the Connection object of the .NET Framework data provider to connect to a data source, and it uses Command objects to retrieve data from and resolve changes to the data source."
              },
              {
                "q":"How can you define the DataSet structure?",
                "a":"A DataSet object falls in disconnected components series. The DataSet consists of a collection of tables, rows, columns and relationships.\nDataSet contains a collection of DataTables and the DataTable contains a collection of DataRows, DataRelations, and DataColumns. A DataTable maps to a table in the database."
              },
              {
                "q":"What do you understand by DataRelation class?",
                "a":"The DataRelation is a class of disconnected architecture in the .NET framework. It is found in the System.Data namespace. It represents a relationship between database tables and correlates tables on the basis of matching column."
              },
              {
                "q":"What are the ADO.NET components?",
                "a":"ADO.NET components categorized in three modes:\ndisconnected,\ncommon or shared and\nthe .NET data providers."
              },
              {
                "q":"What is SqlCommand Object?",
                "a":"The SqlCommand carries the SQL statement that needs to be executed on the database. SqlCommand carries the command in the CommandText property and this property will be used when the SqlCommand calls any of its execute methods."
              },
              {
                "q":"What is Connection Pooling in ADO.NET?",
                "a":"ADO.NET uses a technique called connection pooling, which minimizes the cost of repeatedly opening and closing connections. Connection pooling reuses existing active connections with the same connection string instead of creating new connections when a request is made to the database. It involves the use of a connection manager that is responsible for maintaining a list, or pool, of available connections for a given connection string. Several pools exist if different connection strings ask for connection pooling."
              },
              {
                "q":"Describe when you would use the DataView in ADO.NET?",
                "a":"A DataView enables you to create different views of the data stored in a DataTable, a capability that is often used in data binding applications. Using a DataView, you can expose the data in a table with different sort orders, and you can filter the data by row state or based on a filter expression. A DataView provides a dynamic view of data whose content, ordering, and membership reflect changes to the underlying DataTable as they occur. This is different from the Select method of the DataTable, which returns a DataRow array from a table per particular filter and/or sort order and whose content reflects changes to the underlying table, but whose membership and ordering remain static. The dynamic capabilities of the DataView make it ideal for data-binding applications."
              }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "ADO.NET is a data access technology from the Microsoft .NET Framework that provides communication between relational and non-relational systems through a common set of components. ADO.NET is a set of computer software components that programmers can use to access data and data services from a database.",
          "icon": "assets/icons/web_mobile/ado_net.png"
        },
        {
          "sub_category_name":"Android",
          "junior_level":[
            {
              "q":"Mention the difference between RelativeLayout and LinearLayout?",
              "a":"Linear Layout — Arranges elements either vertically or horizontally. i.e. in a row or column.\nRelative Layout — Arranges elements relative to parent or other elements."
            },
            {
              "q":"What is the difference between Bitmap and Drawable in Android?",
              "a":"A Bitmap is a representation of a bitmap image (something like java.awt.Image).\nA Drawable is an abstraction of \"something that can be drawn\". It could be a Bitmap (wrapped up as a BitmapDrawable), but it could also be a solid color, a collection of other Drawable objects, or any number of other structures."
            },
            {
              "q":"What is a difference between Spannable and String?",
              "a":"A Spannable allows to attach formatting information like bold, italic, ... to sub-sequences (\"spans\", thus the name) of the characters. It can be used whenever you want to represent \"rich text\"."
            },
            {
              "q":"What is an Activity?",
              "a":"An activity provides the window in which the app draws its UI. This window typically fills the screen, but may be smaller than the screen and float on top of other windows. Generally, one activity implements one screen in an app. For instance, one of an app’s activities may implement a Preferences screen, while another activity implements a Select Photo screen."
            },
            {
              "q":"Why is it recommended to use only the default constructor to create a Fragment?",
              "a":"In short, Fragments need to have a no-args constructor for the Android system to instantiate them. Your Fragment subclasses need a public empty constructor as this is what's being called by the framework.\nIt is used in the case when device has to restore the state of a fragment. No data will be passed and a default fragment will be created and then the state will be restored. Since the system has no way to know what you passed in your constructor or your newInstance, default constructor will be used and saved bundle should be passed via onCreate after the fragment is actually instantiated with the default constructor."
            },
            {
              "q":"How to persist data in an Android app?",
              "a":"There are basically four different ways to store data in an Android app:\nShared Preferences - to save primitive data in key-value pairs\nInternal Storage - you need to store data to the device filesystem, but you do not want any other app (even the user) to read this data\nExternal Storage - you might want the user to view the files and data saved by your app\nSQLite database"
            },
            {
              "q":"Explain briefly all the Android application components",
              "a":"App components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app.\nThere are four different types of app components:\nActivities - An activity is the entry point for interacting with the user. It represents a single screen with a user interface.\nServices - A service is a general-purpose entry point for keeping an app running in the background for all kinds of reasons. It is a component that runs in the background to perform long-running operations or to perform work for remote processes.\nBroadcast receivers - A broadcast receiver is a component that enables the system to deliver events to the app outside of a regular user flow, allowing the app to respond to system-wide broadcast announcements.\nContent providers - A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access."
            },
            {
              "q":"How do I pass data between Activities in Android application?",
              "a":"I have a scenario where, after logging in through a login page, there will be a sign-out button on each activity. Can you guide me on how to keep session id available to all activities?\nThe easiest way to do this would be to pass the session id to the signout activity in the Intent you're using to start the activity:\nIntent intent = new Intent(getBaseContext(), SignoutActivity.class);intent.putExtra(\"EXTRA_SESSION_ID\", sessionId);startActivity(intent);\nString sessionId = getIntent().getStringExtra(\"EXTRA_SESSION_ID\");"
            },
            {
              "q":"What is Dalvik?",
              "a":"Dalvik is a Just In Time (JIT) compiler. By the term JIT, we mean to say that whenever you run your app in your mobile device then that part of your code that is needed for execution of your app will only be compiled at that moment and rest of the code will be compiled in the future when needed. The JIT or Just In Time compiles only a part of your code and it has a smaller memory footprint and due to this, it uses very less physical space on your device."
            },
            {
              "q":"Explain activity lifecycle",
              "a":"As a user navigates through, out of, and back to your app, the Activity instances in your app transition through different states in their lifecycle.\nTo navigate transitions between stages of the activity lifecycle, the Activity class provides a core set of six callbacks: onCreate(), onStart(), onResume(), onPause(), onStop(), and onDestroy(). The system invokes each of these callbacks as an activity enters a new state."
            },
            {
              "q":"What is an AsyncTask?",
              "a":"AsyncTask is one of the easiest ways to implement parallelism in Android without having to deal with more complex methods like Threads. Though it offers a basic level of parallelism with the UI thread, it should not be used for longer operations (of, say, not more than 2 seconds).\nAsyncTask has four methods\nonPreExecute()\ndoInBackground()\nonProgressUpdate()\nonPostExecute()\n\nwhere doInBackground() is the most important as it is where background computations are performed."
            },
            {
              "q":"Explain the build process in Android",
              "a":"First step involves compiling the resources folder (/res) using the aapt (android asset packaging tool) tool. These are compiled to a single class file called R.java. This is a class that just contains constants.\nSecond step involves the java source code being compiled to .class files by javac, and then the class files are converted to Dalvik bytecode by the “dx” tool, which is included in the sdk ‘tools’. The output is classes.dex.\nThe final step involves the android apkbuilder which takes all the input and builds the apk (android packaging key) file."
            },
            {
              "q":"What is ADB and what is it used for?",
              "a":"ADB is the acronym for Android Debug Bridge, which is part of the Android SDK (Software Development Kit). It uses a client-server-model (i.e. adbd, the ADB daemon, is running on the device and can be connected to), and in most cases is used via an USB connection. It is also possible to use it via WiFi (wireless adb).\nThere's nothing you need to install on your Android device, as the ADB daemon (adbd) is already integrated into the Android OS. It is usually accessed via a command line interface from the PC, where either the full Android SDK is installed (several 30 MB download archive currently), or a massively stripped-down version for \"non-developers\", sometimes referred to as \"Mini ADB\" or \"ADB essentials\" (for Linux, this is only the adb executable; for Windows it's adb.exe plus two or three .dll files)."
            },
            {
              "q":"What’s the difference between onCreate() and onStart()?",
              "a":"The onCreate() method is called once during the Activity lifecycle, either when the application starts, or when the Activity has been destroyed and then recreated, for example during a configuration change.\nThe onStart() method is called whenever the Activity becomes visible to the user, typically after onCreate() or onRestart()."
            },
            {
              "q":"In what situation should one use RecyclerView over ListView?",
              "a":"RecyclerView was created as a ListView improvement, so yes, you can create an attached list with ListView control, but using RecyclerView is easier as it:\n\nReuses cells while scrolling up/down - this is possible with implementing View Holder in the ListView adapter, but it was an optional thing, while in the RecycleView it's the default way of writing adapter.\nDecouples list from its container - so you can put list items easily at run time in the different containers (linearLayout, gridLayout) with setting LayoutManager.\n\nTo conclude, RecyclerView is a more flexible control for handling \"list data\" that follows patterns of delegation of concerns and leaves for itself only one task - recycling items."
            },
            {
              "q":"What is View Group? How are they different from Views?",
              "a":"View: View objects are the basic building blocks of User Interface(UI) elements in Android. View is a simple rectangle box which responds to the user’s actions. Examples are EditText, Button, CheckBox etc. View refers to the android.view.View class, which is the base class of all UI classes.\nViewGroup: ViewGroup is the invisible container. It holds View and ViewGroup. For example, LinearLayout is the ViewGroup that contains Button(View), and other Layouts also. ViewGroup is the base class for Layouts."
            },
            {
              "q":"How can I get the context in a fragment?",
              "a":"You can use getActivity(), which returns the activity associated with a fragment. The activity is a context (since Activity extends Context)."
            },
            {
              "q":"What is Armv7?",
              "a":"There are 3 CPU architectures in Android:\nARMv7 is the most common as it is optimised for battery consumption.\nARM64 is an evolved version of that that supports 64-bit processing for more powerful computing.\nARMx86, is the least used for these three, since it is not battery friendly. It is more powerful than the other two."
            },
            {
              "q":"What is the Dalvik Virtual Machine?",
              "a":"The Dalvik Virtual Machine (DVM) is an android virtual machine optimized for mobile devices. It optimizes the virtual machine for memory, battery life and performance.\nThe Dex compiler converts the class files into the .dex file that run on the Dalvik VM. Multiple class files are converted into one dex file."
            },
            {
              "q":"How does the OutOfMemory happens?",
              "a":"Out of memory error is very common error when you are developing for a application that deals with multiple images sets or large bitmaps or some Animation stuff. In Android, every application runs in a Linux Process. Each Linux Process has a Virtual Machine (Dalvik Virtual Machine) running inside it. There is a limit on the memory a process can demand and it is different for different devices and also differs for phones and tablets. When some process demands a higher memory than its limit it causes a error i.e Out of memory error."
            },
            {
              "q":"What is an Intent in Android?",
              "a":"An Intent is basically a message that is passed between components (such as Activities, Services, Broadcast Receivers, and Content Providers).So, it is almost equivalent to parameters passed to API calls. The fundamental differences between API calls and invoking components via intents are:\nAPI calls are synchronous while intent-based invocations are asynchronous.\nAPI calls are compile-time binding while intent-based calls are run-time binding."
            },
            {
              "q":"Tell about Constraint Layout",
              "a":"ConstraintLayout allows you to create large and complex layouts with a flat view hierarchy (no nested view groups). It's similar to RelativeLayout in that all views are laid out according to relationships between sibling views and the parent layout, but it's more flexible than RelativeLayout and easier to use with Android Studio's Layout Editor."
            },
            {
              "q":"What is a ContentProvider and what is it typically used for?",
              "a":"A content provider manages access to a central repository of data. A provider is part of an Android application, which often provides its own UI for working with the data. However, content providers are primarily intended to be used by other applications, which access the provider using a provider client object."
            },
            {
              "q":"What types of Context do you know?",
              "a":"The are mainly two types of context:\nApplication Context: It is an instance that is the singleton and can be accessed in activity via getApplicationContext(). This context is tied to the lifecycle of an application. The application context can be used where you need a context whose lifecycle is separate from the current context or when you are passing a context beyond the scope of activity.\nActivity Context: This context is tied to the lifecycle of an activity. The activity context should be used when you are passing the context in the scope of an activity or you need the context whose lifecycle is attached to the current context."
            },
            {
              "q":"Explain Android notification system",
              "a":"A notification is a message that Android displays outside your app's UI to provide the user with reminders, communication from other people, or other timely information from your app. Users can tap the notification to open your app or take an action directly from the notification."
            },
            {
              "q":"What is the most appropriate way to store user settings in Android application?",
              "a":"The only area of concern here is what you're saving. Passwords are always a tricky thing to store, and I'd be particularly wary of storing them as clear text. The Android architecture is such that your application's SharedPreferences are sandboxed to prevent other applications from being able to access the values so there's some security there, but physical access to a phone could potentially allow access to the values."
            },
            {
              "q":"What is 'Context' on Android?",
              "a":"We may assume a Context is a handle to the system; it provides services like resolving resources, obtaining access to databases and preferences, and so on. An Android app has activities. Context is like a handle to the environment your application is currently running in. The activity object inherits the Context object."
            },
            {
              "q":"Is it possible to implement the model–view–controller pattern in Java for Android?",
              "a":"In Android you don't have MVC, but you have the following:\nYou define your user interface in various XML files by resolution, hardware, etc.\nYou define your resources in various XML files by locale, etc.\nYou extend clases like ListActivity, TabActivity and make use of the XML file by inflaters.\nYou can create as many classes as you wish for your business logic.\nA lot of Utils have been already written for you - DatabaseUtils, Html."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Android software development is the process by which applications are created for devices running the Android operating system. Google states that \"Android apps can be written using Kotlin, Java, and C++ languages\" using the Android software development kit, while using other languages is also possible.",
          "icon": "assets/icons/web_mobile/android.png"
        },
        {
          "sub_category_name":"Angular",
          "junior_level":[
            {
              "q":"What is a module, and what does it contain?",
              "a":"An Angular module is set of Angular basic building blocks like component, directives, services etc. An app can have more than one module."
            },
            {
              "q":"What are pipes? Give me an example.",
              "a":"A pipe takes in data as input and transforms it to a desired output. You can chain pipes together in potentially useful combinations. You can write your own custom pipes. Angular comes with a stock of pipes such as DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe."
            },
            {
              "q":"What is Routing Guard in Angular?",
              "a":"Angular’s route guards are interfaces which can tell the router whether or not it should allow navigation to a requested route. They make this decision by looking for a true or false return value from a class which implements the given guard interface."
            },
            {
              "q":"How would you run unit test?",
              "a":"The Angular CLI downloads and install everything you need to test an Angular application with the Jasmine test framework."
            },
            {
              "q":"What is the equivalent of \"ngShow\" and \"ngHide\" in Angular?",
              "a":"Just bind to the hidden property:"
            },
            {
              "q":"What is the difference between \"@Component\" and \"@Directive\" in Angular?",
              "a":"Directives add behaviour to an existing DOM element or an existing component instance.\nA component, rather than adding/modifying behaviour, actually creates its own view (hierarchy of DOM elements) with attached behaviour.\nWrite a component when you want to create a reusable set of DOM elements of UI with custom behaviour. Write a directive when you want to write reusable behaviour to supplement existing DOM elements."
            },
            {
              "q":"What is a bootstrapping module?",
              "a":"Every application has at least one Angular module, the root module that you bootstrap to launch the application is called as bootstrapping module. It is commonly known as AppModule. The default structure of AppModule generated by AngularCLI would be as follows,"
            },
            {
              "q":"What is the minimum definition of a component?",
              "a":"The absolute minimal configuration for a @Component in Angular is a template. Both template properties are set to optional because you have to define either template or templateUrl."
            },
            {
              "q":"What is a component? Why would you use it?",
              "a":"Components are the most basic building block of an UI in an Angular application. An Angular application is a tree of Angular components. Angular components are a subset of directives. Unlike directives, components always have a template and only one component can be instantiated per an element in a template."
            },
            {
              "q":"What are the differences between AngularJS (angular 1.x) and Angular (Angular 2.x and beyond)?",
              "a":"Angular and AngularJS is basically a different framework with the same name.\nAngular is more ready for the current state of web standards and the future state of the web (ES6\\7 ,immutiablity components, shadow DOM, service workers, mobile compatibilty, modules, typescript and so on and so on... )\nAngular killed many main features in AngularJS like - controllers, $scope, directives (replaced with @component annotations), the module definition, and much more, even simple things like ng-repeat has not left the same as it was.\nAlso: 1. They added an angular cli. 2. Your angular code is written in ES6 Typescript and it compiles at runtime to Javascript in the browser. 3. You bind to your HTML similarly like how you would if in an Angular 1 directive. So variable like $scope and $rootScope have been deprecated."
            },
            {
              "q":"What is interpolation?",
              "a":"Interpolation is a special syntax that Angular converts into property binding. It’s a convenient alternative to property binding. It is represented by double curly braces({{}}). The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property. Let's take an example,"
            },
            {
              "q":"What is the equivalent of ngShow and ngHide in Angular?",
              "a":"Just bind to the hidden property"
            },
            {
              "q":"What is the difference between *ngIf vs hidden?",
              "a":"*ngIf effectively removes its content from the DOM while [hidden] modifies the display property and only instructs the browser to not show the content but the DOM still contains it."
            },
            {
              "q":"What are observables?",
              "a":"Observables are declarative which provide support for passing messages between publishers and subscribers in your application. They are mainly used for event handling, asynchronous programming, and handling multiple values. In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe."
            },
            {
              "q":"What is the difference between Structural and Attribute directives in Angular?",
              "a":"Structural directives are used to alter the DOM layout by removing and adding DOM elements. It is far better in changing the structure of the view. Examples of Structural directives are NgFor and Nglf.\nAttribute Directives These are being used as characteristics of elements. For example, a directive such as built-in NgStyle in the template Syntax guide is an attribute directive."
            },
            {
              "q":"What is a service, and when will you use it?",
              "a":"Angular services are singleton objects which get instantiated only once during the lifetime of an application. They contain methods that maintain data throughout the life of an application, i.e. data does not get refreshed and is available all the time. The main objective of a service is to organize and share business logic, models, or data and functions with different components of an Angular application."
            },
            {
              "q":"What are some differences between Angular 2 and 4?",
              "a":"Just to name a few:Improvements in AOT,\nallowing the \"else\" clause in ngIf,\nsupport for TypeScript 2.1\nbreaking out the animations package"
            },
            {
              "q":"What's the difference between an Angular component and module?",
              "a":"Components control views (html). They also communicate with other components and services to bring functionality to your app.\nModules consist of one or more components. They do not control any html. Your modules declare which components can be used by components belonging to other modules, which classes will be injected by the dependency injector and which component gets bootstrapped. Modules allow you to manage your components to bring modularity to your app."
            },
            {
              "q":"How would you protect a component being activated through the router?",
              "a":"The Angular router ships with a feature called guards. These provide us with ways to control the flow of our application. We can stop a user from visitng certain routes, stop a user from leaving routes, and more. The overall process for protecting Angular routes:"
            },
            {
              "q":"What is an observer?",
              "a":"Observer is an interface for a consumer of push-based notifications delivered by an Observable. It has below structure,"
            },
            {
              "q":"What is an observable?",
              "a":"An Observable is a unique Object similar to a Promise that can help manage async code. Observables are not part of the JavaScript language so we need to rely on a popular Observable library called RxJS. The observables are created using new keyword. Let see the simple example of observable,"
            },
            {
              "q":"What is the purpose of base href tag?",
              "a":"The routing application should add element to the index.html as the first child in the tag inorder to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below"
            },
            {
              "q":"How can I select an element in a component template?",
              "a":"You can get a handle to the DOM element via ElementRef by injecting it into your component's constructor:"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Angular is a TypeScript-based free and open-source web application framework led by the Angular Team at Google and by a community of individuals and corporations. Angular is a complete rewrite from the same team that built AngularJS.",
          "icon": "assets/icons/web_mobile/angular.png"
        },
        {
          "sub_category_name":"AngularJS",
          "junior_level":[
            {
              "q":"What is the difference between \"ng-show\"/\"ng-hide\" and \"ng-if\" directives?",
              "a":"ng-show/ng-hide will always insert the DOM element, but will display/hide it based on the condition. ng-if will not insert the DOM element until the condition is not fulfilled.\nng-if is better when we needed the DOM to be loaded conditionally, as it will help load page bit faster compared to ng-show/ng-hide."
            },
            {
              "q":"What is Angular’s prefixes $ and $$?",
              "a":"To prevent accidental name collisions with your code, Angular prefixes names of public objects with $ and names of private objects with $$. So, do not use the $ or $$ prefix in your code."
            },
            {
              "q":"When dependent modules of a module are loaded?",
              "a":"A module might have dependencies on other modules. The dependent modules are loaded by angular before the requiring module is loaded."
            },
            {
              "q":"How would you specify that a scope variable should have one-time binding only?",
              "a":"By using “::” in front of it."
            },
            {
              "q":"What are Directives?",
              "a":"Directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS’s HTML compiler ($compile) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children."
            },
            {
              "q":"Explain what is services in AngularJS",
              "a":"In AngularJS services are the singleton objects or functions that are used for carrying out specific tasks. It holds some business logic and these function can be called as controllers, directive, filters and so on."
            },
            {
              "q":"What is the difference between one-way binding and two-way binding?",
              "a":"One way binding implies that the scope variable in the html will be set to the first value its model is bound to (i.e. assigned to)\nTwo way binding implies that the scope variable will change it’s value everytime its model is assigned to a different value"
            },
            {
              "q":"Does AngularJS has dependency on jQuery?",
              "a":"AngularJS has no dependency on jQuery library. But it can be used with jQuery library."
            },
            {
              "q":"Explain what is directive and mention what are the different types of Directive?",
              "a":"During compilation process when specific HTML constructs are encountered a behaviour or function is triggered, this function is referred as directive. It is executed when the compiler encounters it in the DOM.\n\nDifferent types of directives are:\nElement directives\nAttribute directives\nCSS class directives\nComment directives"
            },
            {
              "q":"What is auto bootstrap process in AngularJS?",
              "a":"Angular initializes automatically upon DOMContentLoaded event or when the angular.js script is downloaded to the browser and the document.readyState is set to complete. At this point AngularJS looks for the ng-app directive which is the root of angular app compilation and tells about AngularJS part within DOM. When the ng-app directive is found then Angular will:"
            },
            {
              "q":"What are the advantage of AngularJS?",
              "a":"There are following advantages of AngularJS:\nData Binding\nCustomize & Extensible\nCode Reusability \nSupport \nCompatibility \nTesting "
            },
            {
              "q":"What is scope in AngularJS?",
              "a":"Scope is a JavaScript object that refers to the application model. It acts as a context for evaluating angular expressions. Basically, it acts as glue between controller and view."
            },
            {
              "q":"What is scope hierarchy?",
              "a":"The $scope object used by views in AngularJS are organized into a hierarchy. There is a root scope, and the $rootScope can has one or more child scopes. Each controller has its own $scope (which is a child of the $rootScope), so whatever variables you create on $scope within controller, these variables are accessible by the view based on this controller."
            },
            {
              "q":"What are Filters in AngularJS?",
              "a":"Filters are used to format data before displaying it to the user. They can be used in view templates, controllers, services and directives. There are some built-in filters provided by AngularJS like as Currency, Date, Number, OrderBy, Lowercase, Uppercase etc. You can also create your own filters."
            },
            {
              "q":"What is a singleton pattern and where we can find it in AngularJS?",
              "a":"Is a great pattern that restricts the use of a class more than once. We can find singleton pattern in angular in dependency injection and in the services."
            },
            {
              "q":"What are Directives in AngularJS?",
              "a":"AngularJS directives are a combination of AngularJS template markups (HTML attributes or elements, or CSS classes) and supporting JavaScript code. The JavaScript directive code defines the template data and behaviors of the HTML elements."
            },
            {
              "q":"What are the AngularJS features?",
              "a":"The features of AngularJS are listed below:\nModules\nDirectives\nTemplates\\nScope\nExpressions\nData Binding\nMVC (Model, View & Controller)\nValidations\nFilters\nServices\nRouting\nDependency Injection\nTesting"
            },
            {
              "q":"What are the basic steps to unit test an AngularJS filter?",
              "a":"Inject the module that contains the filter.\nProvide any mocks that the filter relies on.\nGet an instance of the filter using $filter('yourFilterName').\nAssert your expectations."
            },
            {
              "q":"How do you share data between controllers?",
              "a":"Create an AngularJS service that will hold the data and inject it inside of the controllers."
            },
            {
              "q":"Explain what is a \"$scope\" in AngularJS",
              "a":"Scope is an object that refers to the application model. It is an execution context for expressions. Scopes are arranged in hierarchical structure which mimic the DOM structure of the application. Scopes can watch expressions and propagate events. Scopes are objects that refer to the model. They act as glue between controller and view."
            },
            {
              "q":"What directive would you use to hide elements from the HTML DOM by removing them from that DOM not changing their styling?",
              "a":"The ngIf Directive, when applied to an element, will remove that element from the DOM if it’s condition is false."
            },
            {
              "q":"How do you hide an HTML element via a button click in AngularJS?",
              "a":"This can be done by using the ng-hide directive in conjunction with a controller to hide an HTML element on button click."
            },
            {
              "q":"How do you disable a button depending on a checkbox’s state?",
              "a":"We can use the ng-disabled directive and bind its condition to the checkbox’s state."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "AngularJS was a JavaScript-based open-source front-end web framework for developing single-page applications. It was maintained mainly by Google and a community of individuals and corporations.",
          "icon": "assets/icons/web_mobile/angularjs.png"
        },
        {
          "sub_category_name":"ASP.NET",
          "junior_level":[
            {
              "q":"What is ViewData?",
              "a":"Viewdata contains the key, value pairs as dictionary and this is derived from class — “ViewDataDictionary“. In action method we are setting the value for viewdata and in view the value will be fetched by typecasting."
            },
            {
              "q":"What is ASP.Net?",
              "a":"It is a framework developed by Microsoft on which we can develop new generation web sites using web forms(aspx), MVC, HTML, Javascript, CSS etc. Its successor of Microsoft Active Server Pages(ASP). Currently there is ASP.NET 4.0, which is used to develop web sites. There are various page extensions provided by Microsoft that are being used for web site development. Eg: aspx, asmx, ascx, ashx, cs, vb, html, XML etc."
            },
            {
              "q":"What is the difference between ASP.NET and ASP.NET MVC?",
              "a":"ASP.NET, at its most basic level, provides a means for you to provide general HTML markup combined with server side \"controls\" within the event-driven programming model that can be leveraged with VB, C#, and so on. You define the page(s) of a site, drop in the controls, and provide the programmatic plumbing to make it all work.\nASP.NET MVC is an application framework based on the Model-View-Controller architectural pattern. This is what might be considered a \"canned\" framework for a specific way of implementing a web site, with a page acting as the \"controller\" and dispatching requests to the appropriate pages in the application. The idea is to \"partition\" the various elements of the application, eg business rules, presentation rules, and so on.Think of the former as the \"blank slate\" for implementing a site architecture you've designed more or less from the ground up. MVC provides a mechanism for designing a site around a pre-determined \"pattern\" of application access, if that makes sense. There's more technical detail to it than that, to be sure, but that's the nickel tour for the purposes of the question."
            },
            {
              "q":"What is a postback?",
              "a":"A postback originates from the client browser. Usually one of the controls on the page will be manipulated by the user (a button clicked or dropdown changed, etc), and this control will initiate a postback. The state of this control, plus all other controls on the page (known as the View State) is Posted Back to the web server."
            },
            {
              "q":"What exactly is an application pool? What is its purpose?",
              "a":"Application pools allow you to isolate your applications from one another, even if they are running on the same server. This way, if there is an error in one app, it won't take down other applications.\nAdditionally, applications pools allow you to separate different apps which require different levels of security."
            },
            {
              "q":"Explain startup process in ASP.NET Core?",
              "a":"After the CreateDefaultBuilder finishes, then Startup class is executed. First, the constructor code is executed. After that, services are added to DI container via AddServices method that lives in Startup class. After that, an order of middleware that will handle every incoming request is set up."
            },
            {
              "q":"What is ViewState?",
              "a":"View State is the method to preserve the Value of the Page and Controls between round trips. It is a Page-Level State Management technique. View State is turned on by default and normally serializes the data in every control on the page regardless of whether it is actually used during a post-back."
            },
            {
              "q":"Can ASP.NET Core work with the .NET framework?",
              "a":"Yes. This might surprise many, but ASP.NET Core works with .NET framework and this is officially supported by Microsoft."
            },
            {
              "q":"What is ASP.NET Core?",
              "a":"ASP.NET Core is a brand new cross-platform web framework built with .NET Core framework. It is not an update to existing ASP.NET framework. It is a complete rewrite of the ASP.NET framework. It works with both .NET Core and .NET Framework."
            },
            {
              "q":"Talk about Logging in ASP.NET Core?",
              "a":"Logging is built-in and you get access to structured logs from the ASP.NET Core host itself to your application. With tools like Serilog, you can extend your logging easily and save your logs to file, Azure, Amazon or any other output provider. You can configure verbosity and log levels via configuration (appsettings.json by default), and you can configure log levels by different categories."
            },
            {
              "q":"How to configure your ASP.NET Core app?",
              "a":"Another crucial part of ASP.NET Core Framework is Configuration. Also, it is part of Dependency Injection. Use it anywhere in your code with an option to reload on changes of configuration values from sources (appsettings.json, environment variables, command line arguments, etc.). It is also easy to override, extend and customize the Configuration. No more extensive configurations in web.config, the preferred way now is appsettings.json in combination with a mix of Environment variables and cmd-line args."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "ASP.NET is an open-source, server-side web-application framework designed for web development to produce dynamic web pages. It was developed by Microsoft to allow programmers to build dynamic web sites, applications and services. The name stands for Active Server Pages Network Enabled Technologies.",
          "icon": "assets/icons/web_mobile/asp_net.png"
        },
        {
          "sub_category_name":"ASP.NET MVC",
          "junior_level":[
            {
              "q":"What is Layout in MVC?",
              "a":"Layout pages are similar to master pages in traditional web forms. This is used to set the common look across multiple pages. In each child page we can find —"
            },
            {
              "q":"What is ASP.NET MVC?",
              "a":"ASP.NET MVC is a web application Framework. It is light weight and highly testable Framework. MVC separates application into three components — Model, View and Controller."
            },
            {
              "q":"What is Razor Pages?",
              "a":"Razor Pages is a new feature of ASP.NET Core that makes coding page-focused scenarios easier and more productive."
            },
            {
              "q":"What are Actions in MVC?",
              "a":"Actions are the methods in Controller class which is responsible for returning the view or json data. Action will mainly have return type — “ActionResult” and it will be invoked from method — “InvokeAction()” called by controller."
            },
            {
              "q":"Can you explain Model, Controller and View in MVC?",
              "a":"Model—It’s a business entity and it is used to represent the application data.\nController—Request sent by the user always scatters through controller and it’s responsibility is to redirect to the specific view using View() method.\nView—It’s the presentation layer of MVC."
            },
            {
              "q":"Explain Bundle.Config in MVC4?",
              "a":"“BundleConfig.cs” in MVC4 is used to register the bundles by the bundling and minification system. Many bundles are added by default including jQuery libraries like — jquery.validate, Modernizr, and default CSS references."
            },
            {
              "q":"What you mean by Routing in MVC?",
              "a":"Routing is a pattern matching mechanism of incoming requests to the URL patterns which are registered in route table. Class — “UrlRoutingModule” is used for the same process."
            },
            {
              "q":"Explain Sections is MVC?",
              "a":"Section are the part of HTML which is to be rendered in layout page. In Layout page we will use the below syntax for rendering the HTML –"
            },
            {
              "q":"What is the use of ViewModel in MVC?",
              "a":"ViewModel is a plain class with properties, which is used to bind it to strongly typed view. ViewModel can have the validation rules defined for its properties using data annotations."
            },
            {
              "q":"What are Non Action methods in MVC?",
              "a":"In MVC all public methods have been treated as Actions. So if you are creating a method and if you do not want to use it as an action method then the method has to be decorated with \"NonAction\" attribute as shown below:"
            },
            {
              "q":"What are Scaffold templates in MVC?",
              "a":"Scaffolding in ASP.NET MVC is used to generate the Controllers, Model and Views for create, read, update, and delete (CRUD) functionality in an application. The scaffolding will be knowing the naming conventions used for models and controllers and views."
            },
            {
              "q":"What is Razor View Engine?",
              "a":"Razor is the first major update to render HTML in MVC 3. Razor was designed specifically for view engine syntax. Main focus of this would be to simplify and code-focused templating for HTML generation. Below is the sample of using Razor:"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "ASP.NET MVC is a web application framework developed by Microsoft that implements the model–view–controller pattern. It is no longer in active development. It is open-source software, apart from the ASP.NET Web Forms component, which is proprietary. ",
          "icon": "assets/icons/web_mobile/asp_net.png"
        },
        {
          "sub_category_name":"ASP.NET Web API",
          "junior_level":[
            {
              "q":"What is ASP.NET Web API?",
              "a":"ASP.NET Web API is a framework that simplifies building HTTP services for broader range of clients (including browsers as well as mobile devices) on top of .NET Framework."
            },
            {
              "q":"Which status code used for all uncaught exceptions by default?",
              "a":"500 – Internal Server Error"
            },
            {
              "q":"Explain the usage of HttpResponseMessage?",
              "a":"HttpResponseMessage works with HTTP protocol to return the data with status/error."
            },
            {
              "q":"What New Features are Introduced in ASP.NET Web API 2.0?",
              "a":"More new features introduced in ASP.NET Web API framework v2.0 are as follows:\nAttribute Routing\nExternal Authentication\nCORS (Cross-Origin Resource Sharing)\nOWIN (Open Web Interface for .NET) Self Hosting\nIHttpActionResult\nWeb API OData"
            },
            {
              "q":"What are the Advantages of Using ASP.NET Web API?",
              "a":"Using ASP.NET Web API has a number of advantages, but core of the advantages are:\nIt works the HTTP way using standard HTTP verbs like GET, POST, PUT, DELETE, etc. for all CRUD operations\nComplete support for routing\nResponse generated in JSON or XML format using MediaTypeFormatter\nIt has the ability to be hosted in IIS as well as self-host outside of IIS\nSupports Model binding and Validation\nSupport for OData"
            },
            {
              "q":"What are main return types supported in Web API?",
              "a":"A Web API controller action can return following values:\nVoid – It will return empty content\nHttpResponseMessage – It will convert the response to an HTTP message.\nIHttpActionResult – internally calls ExecuteAsync to create an HttpResponseMessage\nOther types – You can write the serialized return value into the response body"
            },
            {
              "q":"What exactly is OAuth (Open Authorization)?",
              "a":"OAuth (Open Authorization) is an open standard for access granting/deligation protocol. It used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. It does not deal with authentication."
            },
            {
              "q":"What is the difference between ApiController and Controller?",
              "a":"Use Controller to render your normal views.\nApiController action only return data that is serialized and sent to the client."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the . NET Framework.",
          "icon": "assets/icons/web_mobile/asp_net.png"
        },
        {
          "sub_category_name":"C#",
          "junior_level":[
            {
              "q":"What is an Object?",
              "a":"According to MSDN, \"a class or struct definition is like a blueprint that specifies what the type can do. An object is basically a block of memory that has been allocated and configured according to the blueprint. A program may create many objects of the same class. Objects are also called instances, and they can be stored in either a named variable or in an array or collection. Client code is the code that uses these variables to call the methods and access the public properties of the object. In an object-oriented language such as C#, a typical program consists of multiple objects interacting dynamically\"."
            },
            {
              "q":"What is the difference between \"continue\" and \"break\" statements in C#?",
              "a":"using break statement, you can jump out of a loop\nusing continue statement, you can jump over one iteration and then resume your loop execution"
            },
            {
              "q":"What is C#?",
              "a":"C# is the programming language for writing Microsoft .NET applications. C# provides the rapid application development found in Visual Basic with the power of C++. Its syntax is similar to C++ syntax and meets 100% of the requirements of OOPs like the following:"
            },
            {
              "q":"What are property Accessors?",
              "a":"The get and set portions or blocks of a property are called accessors. These are useful to restrict the accessibility of a property, the set accessor specifies that we can assign a value to a private field in a property and without the set accessor property it is like a read-only field. By the get accessor we can access the value of the private field, in other words it returns a single value. A Get accessor specifies that we can access the value of a field publically."
            },
            {
              "q":"What are nullable types in C#?",
              "a":"C# provides a special data types, the nullable types, to which you can assign normal range of values as well as null values."
            },
            {
              "q":"Why can't you specify the accessibility modifier for methods inside the interface?",
              "a":"In an interface, we have virtual methods that do not have method definition. All the methods are there to be overridden in the derived class. That's why they all are public."
            },
            {
              "q":"What are reference types in C#?",
              "a":"The reference types do not contain the actual data stored in a variable, but they contain a reference to the variables."
            },
            {
              "q":"What are generics in C#?",
              "a":"Generics allow you to delay the specification of the data type of programming elements in a class or a method, until it is actually used in the program. In other words, generics allow you to write a class or method that can work with any data type."
            },
            {
              "q":"What is an Abstract Class?",
              "a":"An Abstract class is a class which is denoted by abstract keyword and can be used only as a Base class. An Abstract class should always be inherited. An instance of the class itself cannot be created. If we do not want any program to create an object of a class, then such classes can be made abstract."
            },
            {
              "q":"What are Custom Exceptions?",
              "a":"Sometimes there are some errors that need to be handeled as per user requirements. Custom exceptions are used for them and are used defined exceptions."
            },
            {
              "q":"What is namespace in C#?",
              "a":"A namespace is designed for providing a way to keep one set of names separate from another. The class names declared in one namespace does not conflict with the same class names declared in another."
            },
            {
              "q":"What is Serialization?",
              "a":"Serialization means saving the state of your object to secondary memory, such as a file.\nBinary serialization (Save your object data into binary format).\nSoap Serialization (Save your object data into binary format; mainly used in network related communication).\nXmlSerialization (Save your object data into an XML file)."
            },
            {
              "q":"What are dynamic type variables in C#?",
              "a":"You can store any type of value in the dynamic data type variable. Type checking for these types of variables takes place at run-time."
            },
            {
              "q":"Can \"this\" be used within a static method?",
              "a":"We can't use this in static method because keyword this returns a reference to the current instance of the class containing it. Static methods (or any static member) do not belong to a particular instance. They exist without creating an instance of the class and call with the name of a class not by instance so we can't use this keyword in the body of static Methods, but in case of Extension Methods we can use it as the functions parameters."
            },
            {
              "q":"In how many ways you can pass parameters to a method?",
              "a":"There are three ways that parameters can be passed to a method:\nValue parameters\nReference parameters \nOutput parameters"
            },
            {
              "q":"What are the different types of classes in C#?",
              "a":"The different types of class in C# are:\nPartial class \nSealed class\nAbstract class\nStatic class"
            },
            {
              "q":"Can you return multiple values from a function in C#?",
              "a":"Yes! Using output parameters. A return statement can be used for returning only one value from a function. However, using output parameters, you can return two values from a function."
            },
            {
              "q":"Define Property in C#?",
              "a":"Properties are members that provide a flexible mechanism to read, write or compute the values of private fields, in other words by the property we can access private fields. In other words we can say that a property is a return type function/method with one parameter or without a parameter. These are always public data members. It uses methods to access and assign values to private fields called accessors."
            },
            {
              "q":"What is Boxing and Unboxing?",
              "a":"Boxing - Boxing is the process of converting a value type data type to the object or to any interface data type which is implemented by this value type. When the CLR boxes a value means when CLR is converting a value type to Object Type, it wraps the value inside a System.Object and stores it on the heap area in application domain.\nUnboxing - Unboxing is also a process which is used to extract the value type from the object or any implemented interface type. Boxing may be done implicitly, but unboxing have to be explicit by code."
            },
            {
              "q":"How is Exception Handling implemented in C#?",
              "a":"Exception handling is done using four keywords in C#:\ntry – Contains a block of code for which an exception will be checked.\ncatch – It is a program that catches an exception with the help of exception handler.\nfinally – It is a block of code written to execute regardless whether an exception is caught or not.\nThrow – Throws an exception when a problem occurs."
            },
            {
              "q":"What is LINQ in C#?",
              "a":"LINQ stands for Language Integrated Query. LINQ has a great power of querying on any source of data. The data source could be collections of objects, database or XML files. We can easily retrieve data from any object that implements the IEnumerable<T> interface."
            },
            {
              "q":"Can multiple catch blocks be executed?",
              "a":"No, Multiple catch blocks can't be executed. Once the proper catch code executed, the control is transferred to the finally block and then the code that follows the finally block gets executed."
            },
            {
              "q":"What is enum in C#?",
              "a":"An enum is a value type with a set of related named constants often referred to as an enumerator list. The enum keyword is used to declare an enumeration. It is a primitive data type, which is user defined. An enum is used to create numeric constants in .NET framework. All the members of enum are of enum type. Their must be a numeric value for each enum type."
            },
            {
              "q":"What are partial classes?",
              "a":"A partial class is only use to splits the definition of a class in two or more classes in a same source code file or more than one source files. You can create a class definition in multiple files but it will be compiled as one class at run time and also when you'll create an instance of this class so you can access all the methods from all source file with a same object. Partial classes can be create in the same namespace it's doesn't allowed to create a partial class in different namespace."
            },
            {
              "q":"Why to use “finally” block in C#?",
              "a":"Finally block will be executed irrespective of exception. So while executing the code in try block when exception is occurred, control is returned to catch block and at last finally block will be executed. So closing connection to database / releasing the file handlers can be kept in finally block."
            },
            {
              "q":"What you understand by Value types and Reference types in C#.Net?",
              "a":"In C# data types can be of two types: Value Types and Reference Types. Value type variables contain their object (or data) directly. If we copy one value type variable to another then we are actually making a copy of the object for the second variable. Value Type member will located into Stack and reference member will located in Heap always."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "C# is a general-purpose, multi-paradigm programming language. C# encompasses static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented, and component-oriented programming disciplines.",
          "icon": "assets/icons/web_mobile/csharp.png"
        },
        {
          "sub_category_name":"CSS",
          "junior_level":[
            {
              "q":"Explain the three main ways to apply CSS styles to a web page",
              "a":"Using the inline style attribute on an elemen\nUsing a <style> block in the <head> section of your HTML\nLoading an external CSS file using the <link> tagt"
            },
            {
              "q":"What is CSS?",
              "a":"CSS stands for Cascading Style Sheets. CSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes."
            },
            {
              "q":"How to use variables in Sass?",
              "a":"Think of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you'll want to reuse. Sass uses the $ symbol to make something a variable."
            },
            {
              "q":"Explain CSS sprites, and how you would implement them on a page or site.",
              "a":"CSS sprites combine multiple images into one single larger image. It is commonly used technique for icons (Gmail uses it)."
            },
            {
              "q":"Explain the CSS “box model” and the layout components that it consists of",
              "a":"The CSS box model is a rectangular layout paradigm for HTML elements that consists of the following:\nContent \nPadding \nBorder \nMargin "
            },
            {
              "q":"What is a CSS rule?",
              "a":"Web browsers apply CSS rules to a document to affect how they are displayed. A CSS rule is formed from:\nA set of properties, which have values set to update how the HTML content is displayed,\nA selector, which selects the element(s) you want to apply the updated property values to."
            },
            {
              "q":"Explain what is a @extend directive used for in Sass?",
              "a":"Using @extend lets you share a set of CSS properties from one selector to another. It helps keep your Sass very dry."
            },
            {
              "q":"Have you played around with the new CSS Flexbox or Grid specs?",
              "a":"Yes. Flexbox is mainly meant for 1-dimensional layouts while Grid is meant for 2-dimensional layouts."
            },
            {
              "q":"What is DOM (Document Object Model) and how is it linked to CSS?",
              "a":"The Document Object Model (DOM) is a cross-platform and language-independent application programming interface that treats an HTML, XHTML, or XML document as a tree structure wherein each node is an object representing a part of the document."
            },
            {
              "q":"What is Sass?",
              "a":"Sass or Syntactically Awesome StyleSheets is a CSS preprocessor that adds power and elegance to the basic language. It allows you to use variables, nested rules, mixins, inline imports, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly."
            },
            {
              "q":"Describe floats and how they work",
              "a":"Float is a CSS positioning property. Floated elements remain a part of the flow of the web page. This is distinctly different than page elements that use absolute positioning. Absolutely positioned page elements are removed from the flow of the webpage."
            },
            {
              "q":"What Selector Nesting in Sass is used for?",
              "a":"Sass let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. CSS, on the other hand, doesn't have any visual hierarchy."
            },
            {
              "q":"List out the key features for Sass?",
              "a":"Key features for Sass include\nFull CSS3-compatible\nLanguage extensions such as nesting, variables, and mixins\nMany useful functions for manipulating colors and other values\nAdvanced features like control directives for libraries\nWell-formatted, customizable output"
            },
            {
              "q":"What is the difference between classes and IDs in CSS?",
              "a":"IDs — Meant to be unique within the document. Can be used to identify an element when linking using a fragment identifier. Elements can only have one id attribute.\nClasses — Can be reused on multiple elements within the document. Mainly for styling and targeting elements."
            },
            {
              "q":"What is variable interpolation in Sass?",
              "a":"If you want to use variables inside a string, you will have to use a process called variable interpolation. To use it you will have to wrap your variables in #{}."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.",
          "icon": "assets/icons/web_mobile/css.png"
        },
        {
          "sub_category_name":"DevOps",
          "junior_level":[
            {
              "q":"What is meant by Continuous Integration?",
              "a":"Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early."
            },
            {
              "q":"What is the need for DevOps?",
              "a":"DevOps fulfills all these requirements and helps in achieving seamless software delivery.\nIncrease deployment frequency\nLower failure rate of new releases\nShortened lead time between fixes\nFaster mean time to recovery in the event of new release crashing"
            },
            {
              "q":"What is the most important thing DevOps helps us achieve?",
              "a":"The most important thing that DevOps helps us achieve is to get the changes into production as quickly as possible while minimising risks in software quality assurance and compliance. This is the primary objective of DevOps."
            },
            {
              "q":"Are you more Dev or Ops?",
              "a":"What the interview means is do you do more sysadmin work, or do you spend a lot of time working with developers on coding?"
            },
            {
              "q":"Explain what is DevOps ?",
              "a":"DevOps is a newly emerging term in IT field, which is nothing but a practice that emphasizes the collaboration and communication of both software developers and other information-technology (IT) professionals. It focuses on delivering software product faster and lowering the failure rate of releases."
            },
            {
              "q":"Which are the top DevOps tools? Which tools have you worked on?",
              "a":"The most popular DevOps tools are:\nGit: Version Control System tool\nJenkins: Continuous Integration tool\nSelenium: Continuous Testing tool\nPuppet, Chef, Ansible: Configuration Management and Deployment tools\nNagios: Continuous Monitoring tool\nDocker: Containerization tool"
            },
            {
              "q":"What does Containerization mean?",
              "a":"Containerisation is a type of virtualization strategy that emerged as an alternative to traditional hypervisor-based virtualization."
            },
            {
              "q":"What is DevOps engineer's duty with regards to Agile development?",
              "a":"DevOps engineer work very closely with Agile development teams to ensure they have an environment necessary to support functions such as automated testing, continuous Integration and continuous Delivery. DevOps engineer must be in constant contact with the developers and make all required parts of environment work seamlessly."
            },
            {
              "q":"Why is Continuous monitoring necessary?",
              "a":"Continuous Monitoring allows timely identification of problems or weaknesses and quick corrective action that helps reduce expenses of an organization. Continuous monitoring provides solution that addresses three operational disciplines known as:"
            },
            {
              "q":"What is post mortem meetings?",
              "a":"Post mortem meeting is a meeting where we discuss what went wrong and what steps should be taken so that failure doesn't happen again. Post mortem meetings are not about finding the one to be blamed, they are for preventing outages from reoccurring and planing redesign of the infrastructure so that downtime can be minimised. It is about learning from mistakes."
            },
            {
              "q":"What's the next thing you would automate in your current workflow?",
              "a":"This is open-ended question. Reference to your experience to provide a relevant answer."
            },
            {
              "q":"Can we consider DevOps as an Agile methodology?",
              "a":"DevOps is a movement to reconcile and synchronize development and production start through a set of good practices . Its emergence is motivated by a deep changing demands of business, who want to speed up the changes to stick closer to the requirements of business and the customer."
            },
            {
              "q":"How have you handled failed deployments?",
              "a":"This is open-ended question. Reference to your experience to provide a relevant answer."
            },
            {
              "q":"What is the function of CI (Continuous Integration) server?",
              "a":"CI server function is to continuously integrate all changes being made and committed to repository by different developers and check for compile errors. It needs to build code several times a day, preferably after every commit so it can detect which commit made the breakage if the breakage happens."
            },
            {
              "q":"What is the role of a configuration management tool in DevOps?",
              "a":"Configuration Management tools' purpose is to automatize deployment and configuration of software on big number of servers. Most CM tools usually use agent architecture which means that every machine being manged needs to have agent installed."
            },
            {
              "q":"Mention what are the key aspects or principle behind DevOps?",
              "a":"The key aspects or principle behind DevOps are:\nInfrastructure as code\nContinuous deployment\nAutomation\nMonitoring\nSecurity"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "DevOps is a set of practices that combines software development and IT operations. It aims to shorten the systems development life cycle and provide continuous delivery with high software quality. DevOps is complementary with Agile software development; several DevOps aspects came from the Agile methodology. ",
          "icon": "assets/icons/web_mobile/devops.png"
        },
        {
          "sub_category_name":"Entity Framework",
          "junior_level":[
            {
              "q":"Explain what is ADO.NET entity framework?",
              "a":"ADO.NET Entity Framework is an ORM (Object Relational Mapping) framework developed by Microsoft. It is an extension of ADO.NET that provides an automated mechanism to access and store data in the database. With the help of ADO.NET, database can be accessed without much required programming or code"
            },
            {
              "q":"What are the benefits of using EF?",
              "a":"he main and the only benefit of EF is it auto-generates code for the Model (middle layer), Data Access Layer, and mapping code, thus reducing a lot of development time."
            },
            {
              "q":"What is Entity Framework?",
              "a":"ADO.NET EF is an ORM (object-relational mapping) which creates a higher abstract object model over ADO.NET components. So rather than getting into dataset, datatables, command, and connection objects as shown in the below code, you work on higher level domain objects like customers, suppliers, etc."
            },
            {
              "q":"What is Storage Model?",
              "a":"Storage Models are our database design models, which contains database tables, views, stored procs and keys with relationships."
            },
            {
              "q":"What are scalar and navigation properties in Entity Framework?",
              "a":"Scalar properties are those where actual values are contained in the entities. Normally a scalar property will map to a database field.\nNavigation properties help to navigate from one entity to another entity directly in the code."
            },
            {
              "q":"What is Conceptual Model?",
              "a":"Conceptual Models are the model classes which contain the relationships. These are independent of the database design."
            },
            {
              "q":"What is the purpose of a DBContext class?",
              "a":"You can think of DbContext as the database connection and a set of tables, and DbSet as a representation of the tables themselves. The DbContext allows you to link your model properties (presumably using the Entity Framework) to your database with a connection string."
            },
            {
              "q":"How can we read records using Entity Framework classes?",
              "a":"In order to browse through records you can create the object of the context class and inside the context class you will get the records."
            },
            {
              "q":"What is Mapping?",
              "a":"The Mapping will have the information on how the Conceptual Models are mapped to Storage Models."
            },
            {
              "q":"What is migration in Entity Framework?",
              "a":"There are two kinds of Migration:\nAutomated Migration\nCode-based Migration"
            },
            {
              "q":"What is Code First approach in Entity Framework?",
              "a":"In Code First approach we avoid working with the Visual Designer of Entity Framework. In other words the EDMX file is excluded from the solution. So you now have complete control over the context class as well as the entity classes."
            },
            {
              "q":"Mention what is Code First approach and Model First Approach in Entity Framework?",
              "a":"In Entity Framework:\nModel First Approach: In this approach we create entities, relationships directly on the design surface of EDMX.\nCode Approach: For code approach we avoid working with the visual designer or entity framework."
            },
            {
              "q":"What are the different ways of creating these domain / entity objects?",
              "a":"Entity objects can be created in two ways: from a database structure, or by starting from scratch by creating a model."
            },
            {
              "q":"What is pluralize and singularize in the Entity Framework?",
              "a":"“Pluralize” and “Singularize” give meaningful naming conventions to objects. In simple words it says do you want to represent your objects with the below naming convention:"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Entity Framework is an open source object–relational mapping framework for ADO.NET. It was originally shipped as an integral part of .NET Framework. Starting with Entity Framework version 6, it has been delivered separately from the .NET Framework.",
          "icon": "assets/icons/web_mobile/entityf.png"
        },
        {
          "sub_category_name":"Flutter",
          "junior_level":[
            {
              "q":"When to use main Axis Alignment and cross Axis Alignment?",
              "a":"For Row:\nmainAxisAlignment = Horizontal Axis\ncrossAxisAlignment = Vertical Axis\nFor Column:\nmainAxisAlignment = Vertical Axis\ncrossAxisAlignment = Horizontal Axis"
            },
            {
              "q":"What is Flutter?",
              "a":"Flutter is an open-source UI toolkit from Google for crafting beautiful, natively compiled applications for desktop, web, and mobile from a single codebase. Flutter apps are built using the Dart programming language."
            },
            {
              "q":"What is the pubspec.yaml file and what does it do?",
              "a":"The pubspec.yaml file allows you to define the packages your app relies on, declare your assets like images, audio, video, etc.\nIt allows you to set constraints for your app.\nFor Android developers, this is roughly similar to a build.gradle file."
            },
            {
              "q":"Does Flutter work like a browser? How is it different from a WebView based application?",
              "a":"To answer this question simply: Code you write for a WebView or an app that runs similarly has to go through multiple layers to finally get executed. In essence, Flutter leapfrogs that by compiling down to native ARM code to execute on both platforms. “Hybrid” apps are slow, sluggish and look different from the platform they run on. Flutter apps run much, much faster than their hybrid counterparts. Also, it’s much easier to access native components and sensors using plugins rather than using WebViews which can’t take full use of their platform."
            },
            {
              "q":"When should you use WidgetsBindingObserver?",
              "a":"WidgetsBindingObserver should be used when we want to listen to the AppLifecycleState and call stop/start on our services."
            },
            {
              "q":"What is the difference between \"main()\" and \"runApp()\" functions in Flutter?",
              "a":"main () function came from Java-like languages so it's where all program started, without it, you can't write any program on Flutter even without UI.\nrunApp() function should return Widget that would be attached to the screen as a root of the Widget Tree that will be rendered."
            },
            {
              "q":"What is an App state?",
              "a":"State that is not ephemeral, that you want to share across many parts of your app, and that you want to keep between user sessions, is what we call application state (sometimes also called shared state)."
            },
            {
              "q":"What is the pubspec.yaml file and what does it do?",
              "a":"The Pubspec.yaml allows you to define the packages your app relies on, declare your assets like images, audio, video, etc. It also allows you to set constraints for your app. For Android developers, this is roughly similar to a build.gradle file, but the differences between the two are also evident."
            },
            {
              "q":"What are the different build modes in Flutter?",
              "a":"The Flutter tooling supports three modes when compiling your app, and a headless mode for testing.\nYou choose a compilation mode depending on where you are in the development cycle.\nThe modes are: - Debug - Profile - Release"
            },
            {
              "q":"What is Dart ?",
              "a":"Dart is an object-oriented, garbage-collected programming language that you use to develop Flutter apps. It was also created by Google, but is open-source, and has community inside and outside Google. Dart was chosen as the language of Flutter for Develpoment"
            },
            {
              "q":"How many types of widgets are there in Flutter?",
              "a":"There are two types of widgets: 1. StatelessWidget : A widget that does not require mutable state. 2. StatefulWidget: A widget that has mutable state."
            },
            {
              "q":"What is a \"widget\" and mention its importance in Flutter?",
              "a":"Widgets are basically the UI components in Flutter.\nIt is a way to describe the configuration of an Element.\nThey are inspired from components in React.\n\nWidgets are important in Flutter because everything within a Flutter application is a Widget , from a simple “Text” to “Buttons” to “Screen Layouts”."
            },
            {
              "q":"What is Fat Arrow Notation in Dart and when do you use it?",
              "a":"The fat arrow syntax is simply a short hand for returning an expression and is similar to (){ return expression; }."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Flutter is an open-source UI software development kit created by Google. It is used to develop cross platform applications for Android, iOS, Linux, macOS, Windows, Google Fuchsia, and the web from a single codebase. First described in 2015, Flutter was released in May 2017.",
          "icon": "assets/icons/web_mobile/flutter.png"
        },
        {
          "sub_category_name":"Git",
          "junior_level":[
            {
              "q":"What is difference between Git vs SVN?",
              "a":"The main point in Git vs SVN debate boils down to this: Git is a distributed version control system (DVCS), whereas SVN is a centralized version control system."
            },
            {
              "q":"What is Git?",
              "a":"Git is a Distributed Version Control system (DVCS). It can track changes to a file and allows you to revert back to any particular change."
            },
            {
              "q":"What is the difference between git pull and git fetch?",
              "a":"When you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in. pull automatically merges the commits without letting you review them first. If you don’t closely manage your branches, you may run into frequent conflicts.\nWhen you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge."
            },
            {
              "q":"What's the difference between a pull request and a branch?",
              "a":"A branch is just a separate version of the code.\nA pull request is when someone take the repository, makes their own branch, does some changes, then tries to merge that branch in (put their changes in the other person's code repository)."
            },
            {
              "q":"What is Git fork? What is difference between fork, branch and clone?",
              "a":"A fork is a remote, server-side copy of a repository, distinct from the original. A fork isn't a Git concept really, it's more a political/social idea.\nA clone is not a fork; a clone is a local copy of some remote repository. When you clone, you are actually copying the entire source repository, including all the history and branches.\nA branch is a mechanism to handle the changes within a single repository in order to eventually merge them with the rest of code. A branch is something that is within a repository. Conceptually, it represents a thread of development."
            },
            {
              "q":"How does the Centralized Workflow work?",
              "a":"The Centralized Workflow uses a central repository to serve as the single point-of-entry for all changes to the project. The default development branch is called master and all changes are committed into this branch."
            },
            {
              "q":"How to undo the most recent commits in Git?",
              "a":"You accidentally committed wrong files to Git, but haven't pushed the commit to the server yet. How can you undo those commits from the local repository?"
            },
            {
              "q":"You need to update your local repos. What git commands will you use?",
              "a":"It’s a two steps process. First you fetch the changes from a remote named origin:"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows.",
          "icon": "assets/icons/web_mobile/git.png"
        },
        {
          "sub_category_name":"Golang",
          "junior_level":[
            {
              "q":"Is Go a new language, framework or library?",
              "a":"Go isn't a library and not a framework, it's a new language."
            },
            {
              "q":"What is Go?",
              "a":"Go is a general-purpose language designed with systems programming in mind. It was initially developed at Google in year 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. It is strongly and statically typed, provides inbuilt support for garbage collection and supports concurrent programming. Programs are constructed using packages, for efficient management of dependencies. Go programming implementations use a traditional compile and link model to generate executable binaries."
            },
            {
              "q":"What is static type declaration of a variable in Go?",
              "a":"Static type variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable declaration at the time of linking of the program."
            },
            {
              "q":"What are some advantages of using Go?",
              "a":"Go is an attempt to introduce a new, concurrent, garbage-collected language with fast compilation and the following benefits:"
            },
            {
              "q":"What kind of type conversion is supported by Go?",
              "a":"Go is very strict about explicit typing. There is no automatic type promotion or conversion. Explicit type conversion is required to assign a variable of one type to another."
            },
            {
              "q":"Can you declared multiple types of variables in single declaration in Go?",
              "a":"Yes. Variables of different types can be declared in one go using type inference."
            },
            {
              "q":"Why the Go language was created?",
              "a":"Go was born out of frustration with existing languages and environments for systems programming."
            },
            {
              "q":"What are Goroutines?",
              "a":"Goroutines are functions or methods that run concurrently with other functions or methods. Goroutines can be thought of as light weight threads. The cost of creating a Goroutine is tiny when compared to a thread. Its common for Go applications to have thousands of Goroutines running concurrently."
            },
            {
              "q":"Does Go have exceptions?",
              "a":"No, Go takes a different approach. For plain error handling, Go's multi-value returns make it easy to report an error without overloading the return value. Go code uses error values to indicate an abnormal state."
            },
            {
              "q":"What is a pointer?",
              "a":"A pointer variable can hold the address of a variable."
            },
            {
              "q":"Can you return multiple values from a function?",
              "a":"A Go function can return multiple values."
            },
            {
              "q":"What is dynamic type declaration of a variable in Go?",
              "a":"A dynamic type variable declaration requires compiler to interpret the type of variable based on value passed to it. Compiler don't need a variable to have type statically as a necessary requirement."
            },
            {
              "q":"How to efficiently concatenate strings in Go?",
              "a":"In Go, a string is a primitive type, which means it is read-only, and every manipulation of it will create a new string."
            },
            {
              "q":"Let's talk variable declaration in Go. Could you explain what is a variable \"zero value\"?",
              "a":"Variable is the name given to a memory location to store a value of a specific type. There are various syntaxes to declare variables in go."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency.",
          "icon": "assets/icons/web_mobile/golang.png"
        },
        {
          "sub_category_name":"GraphQL",
          "junior_level":[
            {
              "q":"What is GraphQL?",
              "a":"GraphQL is a query language created by Facebook in 2012 which provides a common interface between the client and the server for data fetching and manipulations.\nThe client asks for various data from the GraphQL server via queries. The response format is described in the query and defined by the client instead of the server: they are called client‐specified queries.\nThe structure of the data is not hardcoded as in traditional REST APIs - this makes retrieving data from the server more efficient for the client."
            },
            {
              "q":"Is GraphQL a Database Technology?",
              "a":"No. GraphQL is often confused with being a database technology. This is a misconception, GraphQL is a query language for APIs - not databases. In that sense it’s database agnostic and can be used with any kind of database or even no database at all."
            },
            {
              "q":"What is an exclamation point in GraphQL?",
              "a":"That means that the field is non-nullable. By default, all types in GraphQL are nullable. When non-null is applied to the type of a field, it means that if the server resolves that field to null, the response will fail validation."
            },
            {
              "q":"Is GraphQL only for React / Javascript Developers?",
              "a":"No. GraphQL is an API technology so it can be used in any context where an API is required.\nOn the backend, a GraphQL server can be implemented in any programming language that can be used to build a web server. Next to Javascript, there are popular reference implementations for Ruby, Python, Scala, Java, Clojure, Go and .NET.\nSince a GraphQL API is usually operated over HTTP, any client that can speak HTTP is able to query data from a GraphQL server.\nNote: GraphQL is actually transport layer agnostic, so you could choose other protocols than HTTP to implement your server."
            },
            {
              "q":"What is difference between Mutation and Query?",
              "a":"Technically any GraphQL query could be implemented to cause a data write. But there is a convention that any operations that cause writes should be sent explicitly via a mutation.\nBesides the difference in the semantic, there is one important technical difference:\nQuery fields can be executed in parallel by the GraphQL engine while Mutation top-level fields MUST execute serially according to the spec."
            },
            {
              "q":"What is GraphQL schema?",
              "a":"Every GraphQL server has two core parts that determine how it works: a schema and resolve functions.\nThe schema is a model of the data that can be fetched through the GraphQL server. It defines what queries clients are allowed to make, what types of data can be fetched from the server."
            },
            {
              "q":"Where is GraphQL useful?",
              "a":"GraphQL helps where your client needs a flexible response format to avoid extra queries and/or massive data transformation with the overhead of keeping them in sync.\nUsing a GraphQL server makes it very easy for a client side developer to change the response format without any change on the backend.\nWith GraphQL, you can describe the required data in a more natural way. It can speed up development, because in application structures like top-down rendering in React, the required data is more similar to your component structure."
            },
            {
              "q":"How to do Error Handling?",
              "a":"A successful GraphQL query is supposed to return a JSON object with a root field called \"data\". If the request fails or partially fails (e.g. because the user requesting the data doesn’t have the right access permissions), a second root field called \"errors\" is added to the response"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. GraphQL was developed internally by Facebook in 2012 before being publicly released in 2015.",
          "icon": "assets/icons/web_mobile/graphql.png"
        },
        {
          "sub_category_name":"HTML5",
          "junior_level":[
            {
              "q":"What is an iframe and how it works?",
              "a":"An iframe is an HTML document which can be embedded inside another HTML page."
            },
            {
              "q":"Explain meta tags in HTML",
              "a":"Meta tags always go inside head tag of the HTML page\nMeta tags is always passed as name/value pairs\nMeta tags are not displayed on the page but intended for the browser\nMeta tags can contain information about character encoding, description, title of the document etc,"
            },
            {
              "q":"What is the purpose of the alt attribute on images?",
              "a":"The alt attribute provides alternative information for an image if a user cannot view it. The alt attribute should be used to describe any images except those which only serve a decorative purposes, in which case it should be left empty."
            },
            {
              "q":"What is the difference between span and div?",
              "a":"div is a block element\nspan is inline element"
            },
            {
              "q":"How can you highlight text in HTML?",
              "a":"If you are working with an HTML5 page, the <mark> tag can be a quick and easy way of highlighting or marking text on a page:"
            },
            {
              "q":"What were some of the key goals and motivations for the HTML5 specification?",
              "a":"HTML5 was designed to replace HTML 4, XHTML, and the HTML DOM Level 2. The key goals and motivations behind the HTML5 specification were to:"
            },
            {
              "q":"What is Character Encoding?",
              "a":"To display an HTML page correctly, a web browser must know which character set (character encoding) to use. This is specified in the tag:"
            },
            {
              "q":"What is a self closing tag?",
              "a":"In HTML5 it is not strictly necessary to close certain HTML tags. The tags that aren’t required to have specific closing tags are called “self closing” tags."
            },
            {
              "q":"How Can I Get Indexed Better by Search Engines?",
              "a":"It is possible to get indexed better by placing the following two statements in the <HEAD> part of your documents:"
            },
            {
              "q":"Briefly describe the correct usage of the following HTML5 semantic elements: header, article, section, footer",
              "a":"<header> is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author’s name, time and date of publication, table of contents, or other navigational information.\n<article> is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing it’s meaining. Individual blog posts or news stories are good examples.\n<section> is a flexible container for holding content that shares a common informational theme or purpose.\n<footer> is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author’s name, copyright information, and related links are typical examples of such content."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "HTML5 is a markup language used for structuring and presenting content on the World Wide Web. It is the fifth and final major HTML version that is a World Wide Web Consortium recommendation. The current specification is known as the HTML Living Standard.",
          "icon": "assets/icons/web_mobile/html.png"
        },
        {
          "sub_category_name":"Ionic",
          "junior_level":[
            {
              "q":"What is Ionic Framework?",
              "a":"Ionic Framework is an open source UI toolkit for building performant, high-quality mobile and desktop apps using web technologies (HTML, CSS, and JavaScript). Ionic Framework is focused on the frontend user experience, or UI interaction of an app (controls, interactions, gestures, animations). Currently, Ionic Framework has official integrations with Angular and React, and support for Vue is in development."
            },
            {
              "q":"Can we work with Ionic > 1 and AngularJS?",
              "a":"Unfortunately, no. Ionic (1) at a very high-level is essentially just a wrapper & directive/component library for AngularJS (1). In that same regard, Ionic 2 is built in the same way, utilizing all the benefits of Angular 2+."
            },
            {
              "q":"How can you test Ionic applications?",
              "a":"Ionic v.1 applications are built using AngularJS. Angular has a rich set of test libraries and frameworks such as Jasmine and Karma test runner. These frameworks can be used to write unit tests for Ionic applications. Also, ionic-CLI provides live reload feature so the application can be tested in the browser. For example, the ionic serve command can be used to load the application in any browser. Thus, we can use Chrome Developer Tools or Mozilla Firefox with Firebug to debug and inspect Ionic applications."
            },
            {
              "q":"What is hybrid app development?",
              "a":"Hybrid apps are developed using web technologies like HTML, CSS and Javascript, and then wrapped in a native application using platforms like Cordova. The apps are shown in its own embedded browser, like UIWebView in iOS and WebView in Android (not Safari or Chrome). This allows you to use any web-native framework for mobile app development."
            },
            {
              "q":"How do you pass data from one view to another in Ionic applications?",
              "a":"Ionic v.1 uses AngularJS and UI-router. It means you can use Angular services or UI-router’s state resolve to pass data from one view to another. Since Angular services are singletons, data stored in services can be accessed across other Angular controllers."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Ionic is a complete open-source SDK for hybrid mobile app development created by Max Lynch, Ben Sperry, and Adam Bradley of Drifty Co. in 2013. The original version was released in 2013 and built on top of AngularJS and Apache Cordova.",
          "icon": "assets/icons/web_mobile/ionic.png"
        },
        {
          "sub_category_name":"Java",
          "junior_level":[
            {
              "q":"What are the two types of Exceptions in Java? Which are the differences between them?",
              "a":"Java has two types of exceptions: checked exceptions and unchecked exceptions.\nUnchecked exceptions do not need to be declared in a method or a constructor’s throws clause, if they can be thrown by the execution of the method or the constructor, and propagate outside the method or constructor boundary.\nOn the other hand, checked exceptions must be declared in a method or a constructor’s throws clause."
            },
            {
              "q":"What is JVM? Why is Java called the “Platform Independent Programming Language”?",
              "a":"A Java virtual machine (JVM) is a process virtual machine that can execute Java bytecode. Each Java source file is compiled into a bytecode file, which is executed by the JVM. Java was designed to allow application programs to be built that could be run on any platform, without having to be rewritten or recompiled by the programmer for each separate platform. A Java virtual machine makes this possible, because it is aware of the specific instruction lengths and other particularities of the underlying hardware platform."
            },
            {
              "q":"What is the difference between an Applet and a Java Application?",
              "a":"Applets are executed within a Java enabled browser, but a\nJava application is a standalone Java program that can be executed outside of a browser."
            },
            {
              "q":"What is the Difference between JDK and JRE?",
              "a":"The Java Runtime Environment (JRE) is basically the Java Virtual Machine (JVM) where your Java programs are being executed. It also includes browser plugins for applet execution.\nThe Java Development Kit (JDK) is the full featured Software Development Kit for Java, including the JRE, the compilers and tools (like JavaDoc, and Java Debugger), in order for a user to develop, compile and execute Java applications."
            },
            {
              "q":"What is a Servlet?",
              "a":"The servlet is a Java programming language class used to process client requests and generate dynamic web content. Servlets are mostly used to process or store data submitted by an HTML form, provide dynamic content and manage state information that does not exist in the stateless HTTP protocol."
            },
            {
              "q":"What is a JSP Page?",
              "a":"A Java Server Page (JSP) is a text document that contains two types of text:\nstatic data and\nJSP elements."
            },
            {
              "q":"What are Directives?",
              "a":"What are the different types of Directives available in JSP ? Directives are instructions that are processed by the JSP engine, when the page is compiled to a servlet. Directives are used to set page-level instructions, insert data from external files, and specify custom tag libraries. Directives are defined between < %@ and % >.The different types of directives are shown below:"
            },
            {
              "q":"What does System.gc() and Runtime.gc() methods do?",
              "a":"These methods can be used as a hint to the JVM, in order to start a garbage collection. However, this it is up to the Java Virtual Machine (JVM) to start the garbage collection immediately or later in time."
            },
            {
              "q":"What differences exist between HashMap and Hashtable?",
              "a":"There are several differences between HashMap and Hashtable in Java:\nHashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.\nHashtable does not allow null keys or values. HashMap allows one null key and any number of null values."
            },
            {
              "q":"What is JDBC?",
              "a":"JDBC is an abstraction layer that allows users to choose between databases. JDBC enables developers to write database applications in Java, without having to concern themselves with the underlying details of a particular database."
            },
            {
              "q":"What does the “static” keyword mean? Can you override private or static method in Java?",
              "a":"The static keyword denotes that a member variable or method can be accessed, without requiring an instantiation of the class to which it belongs."
            },
            {
              "q":"What is the importance of finally block in exception handling?",
              "a":"A finally block will always be executed, whether or not an exception is actually thrown. Even in the case where the catch statement is missing and an exception is thrown, the finally block will still be executed. Last thing to mention is that the finally block is used to release resources like I/O buffers, database connections, etc."
            },
            {
              "q":"What is the difference between Exception and Error in java?",
              "a":"An Error \"indicates serious problems that a reasonable application should not try to catch.\"\nAn Exception \"indicates conditions that a reasonable application might want to catch.\""
            },
            {
              "q":"When does an Object becomes eligible for Garbage collection in Java ?",
              "a":"A Java object is subject to garbage collection when it becomes unreachable to the program in which it is currently used."
            },
            {
              "q":"What is an Iterator?",
              "a":"The Iterator interface provides a number of methods that are able to iterate over any Collection. Each Java Collection contains the Iterator method that returns an Iterator instance. Iterators are capable of removing elements from the underlying collection during the iteration."
            },
            {
              "q":"What are pass by reference and pass by value?",
              "a":"When an object is passed by value, this means that a copy of the object is passed. Thus, even if changes are made to that object, it doesn’t affect the original value.\nWhen an object is passed by reference, this means that the actual object is not passed, rather a reference of the object is passed. Thus, any changes made by the external method, are also reflected in all places."
            },
            {
              "q":"What is an Java Applet?",
              "a":"A Java Applet is program that can be included in a HTML page and be executed in a java enabled client browser. Applets are used for creating dynamic and interactive web applications."
            },
            {
              "q":"How HashMap works in Java?",
              "a":"A HashMap in Java stores key-value pairs. The HashMap requires a hash function and uses hashCode and equals methods, in order to put and retrieve elements to and from the collection respectively. When the put method is invoked, the HashMap calculates the hash value of the key and stores the pair in the appropriate index inside the collection. If the key exists, its value is updated with the new value. Some important characteristics of a HashMap are its capacity, its load factor and the threshold resizing."
            },
            {
              "q":"What are the basic interfaces of Java Collections Framework?",
              "a":"Java Collections Framework provides a well designed set of interfaces and classes that support operations on a collections of objects. The most basic interfaces that reside in the Java Collections Framework are:\nCollection, which represents a group of objects known as its elements.\nSet, which is a collection that cannot contain duplicate elements.\nList, which is an ordered collection and can contain duplicate elements.\nMap, which is an object that maps keys to values and cannot contain duplicate keys."
            },
            {
              "q":"What is the difference between processes and threads?",
              "a":"The main difference between them is that\na Process is a program which is executing some code and\na Thread is an independent path of execution in the process."
            },
            {
              "q":"What will happen to the Exception object after exception handling?",
              "a":"The Exception object will be garbage collected in the next garbage collection."
            },
            {
              "q":"What are Expressions?",
              "a":"A JSP expression is used to insert the value of a scripting language expression, converted into a string, into the data stream returned to the client, by the web server. Expressions are defined between <% = and %> tags."
            },
            {
              "q":"What do you know about the big-O notation and can you give some examples with respect to different data structures?",
              "a":"The Big-O notation simply describes how well an algorithm scales or performs in the worst case scenario as the number of elements in a data structure increases. The Big-O notation can also be used to describe other behavior such as memory consumption. Since the collection classes are actually data structures, we usually use the Big-O notation to chose the best implementation to use, based on time, memory and performance. Big-O notation can give a good indication about performance for large amounts of data."
            },
            {
              "q":"What is Function Overriding and Overloading in Java?",
              "a":"Method overloading in Java occurs when two or more methods in the same class have the exact same name, but different parameters.\nOn the other hand, method overriding is defined as the case when a child class redefines the same method as a parent class. Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides."
            },
            {
              "q":"How are the JSP requests handled?",
              "a":"On the arrival of a JSP request, the browser first requests a page with a .jsp extension. Then, the Web server reads the request and using the JSP compiler, the Web server converts the JSP page into a servlet class. Notice that the JSP file is compiled only on the first request of the page, or if the JSP file has changed.The generated servlet class is invoked, in order to handle the browser’s request. Once the execution of the request is over, the servlet sends a response back to the client. See how to get Request parameters in a JSP."
            },
            {
              "q":"What is the design pattern that Java uses for all Swing components?",
              "a":"The design pattern used by Java for all Swing components is the Model View Controller (MVC) pattern."
            },
            {
              "q":"What is the purpose Class.forName method?",
              "a":"This method is used to method is used to load the driver that will establish a connection to the database."
            },
            {
              "q":"What is the purpose of garbage collection in Java, and when is it used?",
              "a":"The purpose of garbage collection is to identify and discard those objects that are no longer needed by the application, in order for the resources to be reclaimed and reused."
            },
            {
              "q":"What’s the difference between sendRedirect and forward methods?",
              "a":"The sendRedirect method creates a new request, while the forward method just forwards a request to a new target. The previous request scope objects are not available after a redirect, because it results in a new request. On the other hand, the previous request scope objects are available after forwarding. FInally, in general, the sendRedirect method is considered to be slower compare to the forward method."
            },
            {
              "q":"What are Decalarations?",
              "a":"Declarations are similar to variable declarations in Java. Declarations are used to declare variables for subsequent use in expressions or scriptlets. To add a declaration, you must use the sequences to enclose your declarations."
            },
            {
              "q":"What are JSP actions?",
              "a":"JSP actions use constructs in XML syntax to control the behavior of the servlet engine. JSP actions are executed when a JSP page is requested. They can be dynamically inserted into a file, re-use JavaBeans components, forward the user to another page, or generate HTML for the Java plugin.Some of the available actions are listed below:\njsp:include – includes a file, when the JSP page is requestedjsp:useBean – finds or instantiates a JavaBean.\njsp:setProperty – sets the property of a JavaBean.\njsp:getProperty – gets the property of a JavaBean.\njsp:forward – forwards the requester to a new page.\njsp:plugin – generates browser-specific code."
            },
            {
              "q":"Explain the architechure of a Servlet.",
              "a":"The core abstraction that must be implemented by all servlets is the javax.servlet.Servlet interface. Each servlet must implement it either directly or indirectly, either by extending javax.servlet.GenericServlet or javax.servlet.http.HTTPServlet. Finally, each servlet is able to serve multiple requests in parallel using multithreading."
            },
            {
              "q":"Explain Serialization and Deserialization.",
              "a":"Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes and includes the object’s data, as well as information about the object’s type, and the types of data stored in the object. Thus, serialization can be seen as a way of flattening objects, in order to be stored on disk, and later, read back and reconstituted. Deserialisation is the reverse process of converting an object from its flattened state to a live object."
            },
            {
              "q":"How does Garbage Collection prevent a Java application from going out of memory?",
              "a":"It doesn’t! Garbage Collection simply cleans up unused memory when an object goes out of scope and is no longer needed. However an application could create a huge number of large objects that causes an OutOfMemoryError."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible.",
          "icon": "assets/icons/web_mobile/java.png"
        },
        {
          "sub_category_name":"JavaScript",
          "junior_level":[
            {
              "q":"What is the object type?",
              "a":"The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type."
            },
            {
              "q":"Explain arrays in JavaScript",
              "a":"An array is an object that holds values (of any type) not particularly in named properties/keys, but rather in numerically indexed positions:"
            },
            {
              "q":"What is typeof operator?",
              "a":"JavaScript provides a typeof operator that can examine a value and tell you what type it is:"
            },
            {
              "q":"What is Scope in JavaScript?",
              "a":"In JavaScript, each function gets its own scope. Scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables."
            },
            {
              "q":"What is let keyword in JavaScript?",
              "a":"In addition to creating declarations for variables at the function level, ES6 lets you declare variables to belong to individual blocks (pairs of { .. }), using the let keyword."
            },
            {
              "q":"Explain the same-origin policy with regards to JavaScript.",
              "a":"The same-origin policy prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model."
            },
            {
              "q":"What is the difference between == and ===?",
              "a":"== is the abstract equality operator while === is the strict equality operator. The == operator will compare for equality after doing any necessary type conversions. The === operator will not do type conversion, so if two values are not the same type === will simply return false. When using ==, funky things can happen, such as:"
            },
            {
              "q":"Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?",
              "a":"The load event fires at the end of the document loading process. At this point, all of the objects in the document are in the DOM, and all the images, scripts, links and sub-frames have finished loading."
            },
            {
              "q":"What is strict mode?",
              "a":"Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions."
            },
            {
              "q":"Explain event bubbling and how one may prevent it",
              "a":"Event bubbling is the concept in which an event triggers at the deepest possible element, and triggers on parent elements in nesting order. As a result, when clicking on a child element one may exhibit the handler of the parent activating.\nOne way to prevent event bubbling is using event.stopPropagation() or event.cancelBubble on IE < 9."
            },
            {
              "q":"What does use strict do?",
              "a":"The use strict literal is entered at the top of a JavaScript program or at the top of a function and it helps you write safer JavaScript code by throwing an error if a global variable is created by mistake. For example, the following program will throw an error:"
            },
            {
              "q":"Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?",
              "a":"Every script has access to the global scope, and if everyone uses the global namespace to define their variables, collisions will likely occur. Use the module pattern (IIFEs) to encapsulate your variables within a local namespace."
            },
            {
              "q":"What is a Polyfill?",
              "a":"A polyfill is essentially the specific code (or plugin) that would allow you to have some specific functionality that you expect in current or “modern” browsers to also work in other browsers that do not have the support for that functionality built in."
            },
            {
              "q":"Explain Null and Undefined in JavaScript",
              "a":"JavaScript (and by extension TypeScript) has two bottom types: null and undefined. They are intended to mean different things:"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "JavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. As of 2022, 98% of websites use JavaScript on the client side for web page behavior, often incorporating third-party libraries.",
          "icon": "assets/icons/web_mobile/javascript.png"
        },
        {
          "sub_category_name":"jQuery",
          "junior_level":[
            {
              "q":"What is jQuery?",
              "a":"jQuery is fast, lightweight and feature-rich client side JavaScript Library/Framework which helps in to traverse HTML DOM, make animations, add Ajax interaction, manipulate the page content, change the style and provide cool UI effect. It is one of the most popular client side library and as per a survey it runs on every second website."
            },
            {
              "q":"What is the use of jquery .each() function?",
              "a":"The $.each() function is used to iterate over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array."
            },
            {
              "q":"Can we have multiple document.ready() function on the same page?",
              "a":"YES. We can have any number of document.ready() function on the same page."
            },
            {
              "q":"Is jQuery replacement of Java Script?",
              "a":"No. jQuery is not a replacement of JavaScript. jQuery is a different library which is written on top of JavaScript. jQuery is a lightweight JavaScript library that emphasizes interaction between JavaScript and HTML."
            },
            {
              "q":"How do you select element by ID in jQuery?",
              "a":"To select element use ID selector. We need to prefix the id with \"#\" (hash symbol). For example, to select element with ID \"txtName\", then syntax would be,"
            },
            {
              "q":"What is jQuery.noConflict?",
              "a":"As other client side libraries like MooTools, Prototype can be used with jQuery and they also use $() as their global function and to define variables. This situation creates conflict as $() is used by jQuery and other library as their global function. To overcome from such situations, jQuery has introduced jQuery.noConflict()."
            },
            {
              "q":"Is jQuery a library for client scripting or server scripting?",
              "a":"Client side scripting."
            },
            {
              "q":"Is jQuery a W3C standard?",
              "a":"No. jQuery is not a W3C standard."
            },
            {
              "q":"What is event.PreventDefault?",
              "a":"The event.preventDefault() method stops the default action of an element from happening. For example, Prevents a link from following the URL."
            },
            {
              "q":"How JavaScript and jQuery are different?",
              "a":"JavaScript is a language While jQuery is a library built in the JavaScript language that helps to use the JavaScript language."
            },
            {
              "q":"What is the difference between .js and .min.js?",
              "a":"jQuery library comes in 2 different versions Development and Production/Deployment. The deployment version is also known as minified version. So .min.js is basically the minified version of jQuery library file. Both the files are same as far as functionality is concerned. but .min.js is quite small in size so it loads quickly and saves bandwidth."
            },
            {
              "q":"Which is the starting point of code execution in jQuery?",
              "a":"The starting point of jQuery code execution is $(document).ready() function which is executed when DOM is loaded."
            },
            {
              "q":"What does $(\"div\") will select?",
              "a":"This will select all the div elements on page."
            },
            {
              "q":"How to select element having a particular class (\".selected\")?",
              "a":"$('.selected'). This selector is known as class selector. We need to prefix the class name with \".\" (dot)."
            },
            {
              "q":"What does $(\"div.parent\") will select?",
              "a":"All the div element with parent class."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "jQuery is a JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as well as event handling, CSS animation, and Ajax. It is free, open-source software using the permissive MIT License. As of May 2019, jQuery is used by 73% of the 10 million most popular websites.",
          "icon": "assets/icons/web_mobile/jquery.png"
        },
        {
          "sub_category_name":"Kotlin",
          "junior_level":[
            {
              "q":"What is a data class in Kotlin?",
              "a":"We frequently create classes whose main purpose is to hold data. In Kotlin, this is called a data class and is marked as data:\ndata class User(val name: String, val age: Int)\nTo ensure consistency and meaningful behavior of the generated code, data classes have to fulfill the following requirements:\nThe primary constructor needs to have at least one parameter;\nAll primary constructor parameters need to be marked as val or var;\nData classes cannot be abstract, open, sealed or inner;"
            },
            {
              "q":"How to initialize an array in Kotlin with values?",
              "a":"val numbers: IntArray = intArrayOf(10, 20, 30, 40, 50)"
            },
            {
              "q":"Where should I use var and where val?",
              "a":"Use var where value is changing frequently. For example while getting location of android device:\nvar integerVariable : Int? = null\nUse val where there is no change in value in whole class. For example you want set textview or button's text programmatically.\nval stringVariables : String = \"Button's Constant or final Text\""
            },
            {
              "q":"What is basic difference between fold and reduce in Kotlin? When to use which?",
              "a":"fold takes an initial value, and the first invocation of the lambda you pass to it will receive that initial value and the first element of the collection as parameters.\nlistOf(1, 2, 3).fold(0) { sum, element -> sum + element }\nThe first call to the lambda will be with parameters 0 and 1.\nHaving the ability to pass in an initial value is useful if you have to provide some sort of default value or parameter for your operation.\nreduce doesn't take an initial value, but instead starts with the first element of the collection as the accumulator (called sum in the following example)\nlistOf(1, 2, 3).reduce { sum, element -> sum + element }\nThe first call to the lambda here will be with parameters 1 and 2."
            },
            {
              "q":"What is a primary constructor in Kotlin?",
              "a":"The primary constructor is part of the class header. Unlike Java, you don't need to declare a constructor in the body of the class. Here's an example:\nclass Person(val firstName: String, var age: Int) {\n// class body\n}\nThe main idea is by removing the constructor keyword, our code gets simplified and easy to understand."
            },
            {
              "q":"How to correctly concatenate a String in Kotlin?",
              "a":"In Kotlin, you can concatenate 1. using string interpolation / templates\nval a = \"Hello\"\nval b = \"World\"\nval c = \"$a $b\"\nusing the + / plus() operator\nval a = \"Hello\"\nval b = \"World\"\nval c = a + b // same as calling operator function a.plus(b)\nval c = a.plus(b)\nprint(c)\nusing the StringBuilder\nval a = \"Hello\"\nval b = \"World\"\nval sb = StringBuilder()\nsb.append(a).append(b)\nval c = sb.toString()\nprint(c)"
            },
            {
              "q":"How to create singleton in Kotlin?",
              "a":"Just use object.\nobject SomeSingleton\nThe above Kotlin object will be compiled to the following equivalent Java code:\npublic final class SomeSingleton {\npublic static final SomeSingleton INSTANCE;\nprivate SomeSingleton() {\nINSTANCE = (SomeSingleton)this;\nSystem.out.println(\"init complete\");\n}\nstatic {\nnew SomeSingleton();\n}\n}\nThis is the preferred way to implement singletons on a JVM because it enables thread-safe lazy initialization without having to rely on a locking algorithm like the complex double-checked locking."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Kotlin is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library, but type inference allows its syntax to be more concise.",
          "icon": "assets/icons/web_mobile/kotlin.png"
        },
        {
          "sub_category_name":"Laravel",
          "junior_level":[
            {
              "q":"Is there any CLI for Laravel?",
              "a":"PHP artisan is the command line interface/tool included with Laravel. It provides a number of helpful commands that can help you while you build your application easily. Here are the list of some artisian commands:\nphp artisan list\nphp artisan help\nphp artisan tinker\nphp artisan make\nphp artisan –versian\nphp artisan make modal modal_name\nphp artisan make controller controller_name"
            },
            {
              "q":"What are some benefits of Laravel over other Php frameworks?",
              "a":"Setup and customisation process is easy and fast as compared to others.\nInbuilt Authentication System\nSupports multiple file systems\nPre-loaded packages like Laravel Socialite, Laravel cashier, Laravel elixir, Passport, Laravel Scout\nEloquent ORM (Object Relation Mapping) with PHP active record implementation\nBuilt in command line tool “Artisan” for creating a code skeleton ,database structure and build their migration"
            },
            {
              "q":"Why do you prefer using Laravel?",
              "a":"Simple MVC that can be extended easily\nClean and secure routing\nPowerful Eloquent ORM for database\nMigrations\nThird party plugins"
            },
            {
              "q":"What is the Laravel?",
              "a":"Laravel is a free, open-source PHP web framework, created by Taylor Otwell and intended for the development of web applications following the model–view–controller (MVC) architectural pattern."
            },
            {
              "q":"What is the Facade Pattern used for?",
              "a":"Facades provide a static interface to classes that are available in the application's service container. Laravel facades serve as static proxies to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods.\nAll of Laravel's facades are defined in the Illuminate\\Support\\Facades namespace. Consider:\nuse Illuminate\\Support\\Facades\\Cache;\nRoute::get('/cache', function () {\nreturn Cache::get('key');\n});"
            },
            {
              "q":"What are Laravel events?",
              "a":"Laravel event provides a simple observer pattern implementation, that allow to subscribe and listen for events in the application. An event is an incident or occurrence detected and handled by the program.\nBelow are some events examples in Laravel:\nA new user has registered\nA new comment is posted\nUser login/logout\nNew product is added."
            },
            {
              "q":"Why are migrations necessary?",
              "a":"Migrations are necessary because:\nWithout migrations, database consistency when sharing an app is almost impossible, especially as more and more people collaborate on the web app.\nYour production database needs to be synced as well."
            },
            {
              "q":"What is the purpose of the Eloquent cursor() method in Laravel ?",
              "a":"The cursor method allows you to iterate through your database records using a cursor, which will only execute a single query. When processing large amounts of data, the cursor method may be used to greatly reduce your memory usage.\nforeach (Product::where('name', 'bar')->cursor() as $flight) {\n//do some stuff\n}"
            },
            {
              "q":"Which template engine does Laravel use?",
              "a":"Laravel uses Blade Templating Engine.\nBlade is the simple, yet powerful templating engine provided with Laravel. Unlike other popular PHP templating engines, Blade does not restrict you from using plain PHP code in your views. In fact, all Blade views are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade view files use the .blade.php file extension and are typically stored in the resources/views directory."
            },
            {
              "q":"What is Service Container?",
              "a":"The Laravel service container is a tool for managing class dependencies and performing dependency injection."
            },
            {
              "q":"What are artisan commands?",
              "a":"Artisan is the name of the command-line interface included with Laravel. It provides a number of helpful commands for your use while developing your application for example:\nphp artisan serve // To start Laravel project"
            },
            {
              "q":"How do you generate migrations?",
              "a":"Migrations are like version control for your database, allowing your team to easily modify and share the application's database schema.\nTo create a migration, use:\nphp artisan make:migration create_users_table"
            },
            {
              "q":"List some official packages of Laravel",
              "a":"Cashier - Laravel Cashier provides an expressive, fluent interface to Stripe's and Braintree's subscription billing services.\nDusk - Laravel Dusk provides an expressive, easy-to-use browser automation and testing API.\nEnvoy - Laravel Envoy provides a clean, minimal syntax for defining common tasks you run on your remote servers.\nHorizon - Horizon provides a dashboard and code-driven configuration for your Laravel powered Redis queues.\nPassport - provides a full OAuth2 server implementation for your Laravel application in a matter of minutes.\nScout - Laravel Scout provides a simple, driver based solution for adding full-text search to your Eloquent models.\nSocialite - a simple, convenient way to authenticate with OAuth providers using Laravel Socialite."
            },
            {
              "q":"Explain Migrations in Laravel",
              "a":"Laravel Migrations are like version control for the database, allowing a team to easily modify and share the application’s database schema. Migrations are typically paired with Laravel’s schema builder to easily build the application’s database schema."
            },
            {
              "q":"What is Eloquent Models?",
              "a":"The Eloquent ORM included with Laravel provides a beautiful, simple ActiveRecord implementation for working with your database. Each database table has a corresponding Model which is used to interact with that table. Models allow you to query for data in your tables, as well as insert new records into the table."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Laravel is a free, open-source PHP web framework, created by Taylor Otwell and intended for the development of web applications following the model–view–controller architectural pattern and based on Symfony.",
          "icon": "assets/icons/web_mobile/laravel.png"
        },
        {
          "sub_category_name":"LINQ",
          "junior_level":[
            {
              "q":"What are the types of LINQ?",
              "a":"LINQ to Objects\nLINQ to XML\nLINQ to Dataset\nLINQ to SQL\nLINQ to Entities"
            },
            {
              "q":"Explain what is LINQ? Why is it required?",
              "a":"Language Integrated Query or LINQ is the collection of standard query operators which provides query facilities into.NET framework language like C#, VB.NET. LINQ is required as it bridges the gap between the world of data and the world of objects."
            },
            {
              "q":"What is LINQ?",
              "a":"LINQ stands for Language INtegrated Query. LINQ allows us to write queries over local collection objects and remote data sources like SQL, XML documents etc. We can write LINQ query on any collection class which implements the IEnumerable interface."
            },
            {
              "q":"What is LINQ in C#?",
              "a":"LINQ stands for Language Integrated Query. LINQ has a great power of querying on any source of data. The data source could be collections of objects, database or XML files. We can easily retrieve data from any object that implements the IEnumerable<T> interface."
            },
            {
              "q":"List out the three main components of LINQ?",
              "a":"Three main components of LINQ are\nStandard Query Operators\nLanguage Extensions\nLINQ Providers"
            },
            {
              "q":"What are Anonymous Types?",
              "a":"Anonymous types are types that are generated by compiler at run time. When we create a anonymous type we do not specify a name. We just write properties names and their values. Compiler at runtime create these properties and assign values to them.\nvar k = new { FirstProperty = \"value1\", SecondProperty = \"value2\" };\nConsole.WriteLine(k.FirstProperty);\nAnonymous class is useful in LINQ queries to save our intermediate results.\nThere are some restrictions on Anonymous types as well:\nAnonymous types can not implement interfaces.\nAnonymous types can not specify any methods.\nWe can not define static members.\nAll defined properties must be initialized.\nWe can only define public fields."
            },
            {
              "q":"What is Anonymous function?",
              "a":"An Anonymous function is a special function which does not have any name. We just define their parameters and define the code into the curly braces.\nConsider:\ndelegate int func(int a, int b);\nstatic void Main(string[] args)\n{\nfunc f1 = delegate(int a, int b)\n{\nreturn a + b;\n};\nConsole.WriteLine(f1(1, 2));\n}"
            },
            {
              "q":"In LINQ how will you find the index of the element using where() with Lambda Expressions?",
              "a":"In order to find the index of the element use the overloaded version of where() with the lambda expression:\nwhere(( i, ix ) => i == ix);"
            },
            {
              "q":"Explain how LINQ is useful than Stored Procedures?",
              "a":"Debugging: It is difficult to debug a stored procedure but as LINQ is part of.NET, visual studio debugger can be used to debug the queries\nDeployment: For stored procedure, additional script should be provided but with LINQ everything gets compiled into single DLL hence deployment becomes easy\nType Safety: LINQ is type safe, so queries errors are type checked at compile time"
            },
            {
              "q":"Explain what is the purpose of LINQ providers in LINQ?",
              "a":"LINQ providers are set of classes that take an LINQ query which generates method that executes an equivalent query against a particular data source."
            },
            {
              "q":"Explain what is “LINQ to Objects”?",
              "a":"When LINQ queries any IEnumerable(<T>) collection or IEnumerable directly without the use of an intermediate LINQ provider or API such as LINQ to SQL or LINQ to XML is referred as LINQ to Objects."
            },
            {
              "q":"Explain why SELECT clause comes after FROM clause in LINQ?",
              "a":"With other programming language and C#, LINQ is used, it requires all the variables to be declared first. “FROM” clause of LINQ query defines the range or conditions to select records. So, FROM clause must appear before SELECT in LINQ."
            },
            {
              "q":"What are Extension Methods?",
              "a":"Extension methods are static functions of a static class. These methods can be invoked just like instance method syntax. These methods are useful when we can not want to modify the class. Consider:\npublic static class StringMethods\n{\npublic static bool IsStartWithLetterM(this string s)\n{\nreturn s.StartsWith(\"m\");\n}\n}\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring value = \"malslfds\";\nConsole.WriteLine(value.IsStartWithLetterM()); //print true;\nConsole.ReadLine();\n}\n}"
            },
            {
              "q":"Mention what is the role of DataContext classes in LINQ?",
              "a":"DataContext class acts as a bridge between SQL Server database and the LINQ to SQL. For accessing the database and also for changing the data in the database, it contains connections string and the functions. Essentially a DataContext class performs the following three tasks:\nCreate connection to database.\nIt submits and retrieves object to database.\nConverts objects to SQL queries and vice versa."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Language Integrated Query is a Microsoft .NET Framework component that adds native data querying capabilities to .NET languages, originally released as a major part of .NET Framework 3.5 in 2007.",
          "icon": "assets/icons/web_mobile/link.png"
        },
        {
          "sub_category_name":"MongoDB",
          "junior_level":[
            {
              "q":"Explain what is MongoDB?",
              "a":"MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling. It's Key Features are:\nDocument Oriented and NoSQL database.\nSupports Aggregation\nUses BSON format\nSharding (Helps in Horizontal Scalability)\nSupports Ad Hoc Queries\nSchema Less\nCapped Collection\nIndexing (Any field in MongoDB can be indexed)\nMongoDB Replica Set (Provides high availability)\nSupports Multiple Storage Engines"
            },
            {
              "q":"How many indexes does MongoDB create by default for a new collection?",
              "a":"By default, MongoDB created the _id collection for every collection."
            },
            {
              "q":"Which are the most important features of MongoDB?",
              "a":"Flexible data model in form of documents\nAgile and highly scalable database\nFaster than traditional databases\nExpressive query language"
            },
            {
              "q":"When should we embed one document within another in MongoDB?",
              "a":"You should consider embedding documents for:\ncontains relationships between entities\nOne-to-many relationships\nPerformance reasons"
            },
            {
              "q":"Compare SQL databases and MongoDB at a high level",
              "a":"SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today's real-world highly growing applications. MongoDB in contrast uses a flexible structure which can be easily modified and extended."
            },
            {
              "q":"If you remove an object attribute, is it deleted from the database?",
              "a":"Yes, it be. Remove the attribute and then re-save () the object."
            },
            {
              "q":"Does MongoDB need a lot space of Random Access Memory (RAM)?",
              "a":"No. MongoDB can be run on small free space of RAM."
            },
            {
              "q":"Why does Profiler use in MongoDB?",
              "a":"MongoDB uses a database profiler to perform characteristics of each operation against the database. You can use a profiler to find queries and write operations"
            },
            {
              "q":"What is “Namespace” in MongoDB?",
              "a":"MongoDB stores BSON (Binary Interchange and Structure Object Notation) objects in the collection. The concatenation of the collection name and database name is called a namespace"
            },
            {
              "q":"What are Indexes in MongoDB?",
              "a":"Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect."
            },
            {
              "q":"What is BSON in MongoDB?",
              "a":"BSON is a binary serialization format used to store documents and make remote procedure calls in MongoDB. BSON extends the JSON model to provide additional data types, ordered fields, and to be efficient for encoding and decoding within different languages."
            },
            {
              "q":"What is a replica set?",
              "a":"It is a group of mongo instances that maintain same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.\nThe ideas of a replicaset are :\nEvery data are repartited on each node\nOnly one node accept writes"
            },
            {
              "q":"What Is Replication In MongoDB?",
              "a":"Replication is the process of synchronizing data across multiple servers. Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication protects a database from the loss of a single server. Replication also allows you to recover from hardware failure and service interruptions."
            },
            {
              "q":"Mention the command to insert a document in a database called school and collection called persons.",
              "a":"use school;\ndb.persons.insert( { name: \"kadhir\", dept: \"CSE\" } )"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the Server Side Public License which is deemed non-free by several distributions.",
          "icon": "assets/icons/web_mobile/mongodb.png"
        },
        {
          "sub_category_name":".NET Core",
          "junior_level":[
            {
              "q":"What is .NET Core?",
              "a":"The .NET Core platform is a new .NET stack that is optimized for open source development and agile delivery on NuGet.\n.NET Core has two major components. It includes a small runtime that is built from the same codebase as the .NET Framework CLR. The .NET Core runtime includes the same GC and JIT (RyuJIT), but doesn’t include features like Application Domains or Code Access Security. The runtime is delivered via NuGet, as part of the ASP.NET Core package.\n.NET Core also includes the base class libraries. These libraries are largely the same code as the .NET Framework class libraries, but have been factored (removal of dependencies) to enable to ship a smaller set of libraries. These libraries are shipped as System.* NuGet packages on NuGet.org."
            },
            {
              "q":"What is MSIL?",
              "a":"When we compile our .NET code then it is not directly converted to native/binary code; it is first converted into intermediate code known as MSIL code which is then interpreted by the CLR. MSIL is independent of hardware and the operating system. Cross language relationships are possible since MSIL is the same for all .NET languages. MSIL is further converted into native code."
            },
            {
              "q":"What is .NET Standard and why we need to consider it?",
              "a":".NET Standard solves the code sharing problem for .NET developers across all platforms by bringing all the APIs that you expect and love across the environments that you need: desktop applications, mobile apps & games, and cloud services:\n.NET Standard is a set of APIs that all .NET platforms have to implement. This unifies the .NET platforms and prevents future fragmentation.\n.NET Standard 2.0 will be implemented by .NET Framework, .NET Core, and Xamarin. For .NET Core, this will add many of the existing APIs that have been requested.\n.NET Standard 2.0 includes a compatibility shim for .NET Framework binaries, significantly increasing the set of libraries that you can reference from your .NET Standard libraries.\n.NET Standard will replace Portable Class Libraries (PCLs) as the tooling story for building multi-platform .NET libraries."
            },
            {
              "q":"What is CTS?",
              "a":"The Common Type System (CTS) standardizes the data types of all programming languages using .NET under the umbrella of .NET to a common data type for easy and smooth communication among these .NET languages.\nCTS is designed as a singly rooted object hierarchy with System.Object as the base type from which all other types are derived. CTS supports two different kinds of types:\nValue Types: Contain the values that need to be stored directly on the stack or allocated inline in a structure. They can be built-in (standard primitive types), user-defined (defined in source code) or enumerations (sets of enumerated values that are represented by labels but stored as a numeric type).\nReference Types: Store a reference to the value‘s memory address and are allocated on the heap. Reference types can be any of the pointer types, interface types or self-describing types (arrays and class types such as user-defined classes, boxed value types and delegates)."
            },
            {
              "q":"What is a .NET application domain?",
              "a":"It is an isolation layer provided by the .NET runtime. As such, App domains live with in a process (1 process can have many app domains) and have their own virtual address space.\nApp domains are useful because:\nThey are less expensive than full processes\nThey are multithreaded\nYou can stop one without killing everything in the process\nSegregation of resources/config/etc\nEach app domain runs on its own security level"
            },
            {
              "q":"What is an unmanaged resource?",
              "a":"Use that rule of thumb:\nIf you found it in the Microsoft .NET Framework: it's managed.\nIf you went poking around MSDN yourself, it's unmanaged.\nAnything you've used P/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framwork is unmanaged – and you're now responsible for cleaning it up."
            },
            {
              "q":"What is CLR?",
              "a":"The CLR stands for Common Language Runtime and it is an Execution Environment. It works as a layer between Operating Systems and the applications written in .NET languages that conforms to the Common Language Specification (CLS). The main function of Common Language Runtime (CLR) is to convert the Managed Code into native code and then execute the program."
            },
            {
              "q":"What is the difference between String and string in C#?",
              "a":"string is an alias in C# for System.String. So technically, there is no difference. It's like int vs. System.Int32.\nAs far as guidelines, it's generally recommended to use string any time you're referring to an object.\nstring place = \"world\";\nLikewise, it's generally recommended to use String if you need to refer specifically to the class.\nstring greet = String.Format(\"Hello {0}!\", place);"
            },
            {
              "q":"What is .NET Standard?",
              "a":"The .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations."
            },
            {
              "q":"What is the .NET Framework?",
              "a":"The .NET is a Framework, which is a collection of classes of reusable libraries given by Microsoft to be used in other .NET applications and to develop, build and deploy many types of applications on the Windows platform including the following:\nConsole Applications\nWindows Forms Applications\nWindows Presentation Foundation (WPF) Applications\nWeb Applications\nWeb Services\nWindows Services\nServices-oriented applications using Windows Communications Foundation (WCF)\nWorkflow-enabled applications using Windows Workflow Foundation(WF)"
            },
            {
              "q":"What is the difference between .NET Core and Mono?",
              "a":"To be simple:\nMono is third party implementation of .Net Framework for Linux/Android/iOs\n.Net Core is Microsoft's own implementation for same."
            },
            {
              "q":"What are some characteristics of .NET Core?",
              "a":"Flexible deployment: Can be included in your app or installed side-by-side user- or machine-wide.\nCross-platform: Runs on Windows, macOS and Linux; can be ported to other OSes. The supported Operating Systems (OS), CPUs and application scenarios will grow over time, provided by Microsoft, other companies, and individuals.\nCommand-line tools: All product scenarios can be exercised at the command-line.\nCompatible: .NET Core is compatible with .NET Framework, Xamarin and Mono, via the .NET Standard Library.\nOpen source: The .NET Core platform is open source, using MIT and Apache 2 licenses. Documentation is licensed under CC-BY. .NET Core is a .NET Foundation project.\nSupported by Microsoft: .NET Core is supported by Microsoft, per .NET Core Support"
            },
            {
              "q":"What is the difference between decimal, float and double in .NET?",
              "a":"Precision is the main difference.\nFloat - 7 digits (32 bit)\nDouble-15-16 digits (64 bit)\nDecimal -28-29 significant digits (128 bit)\nAs for what to use when:\nFor values which are \"naturally exact decimals\" it's good to use decimal. This is usually suitable for any concepts invented by humans: financial values are the most obvious example, but there are others too. Consider the score given to divers or ice skaters, for example.\nFor values which are more artefacts of nature which can't really be measured exactly anyway, float/double are more appropriate. For example, scientific data would usually be represented in this form. Here, the original values won't be \"decimally accurate\" to start with, so it's not important for the expected results to maintain the \"decimal accuracy\". Floating binary point types are much faster to work with than decimals."
            },
            {
              "q":"What's the difference between SDK and Runtime in .NET Core?",
              "a":"The SDK is all of the stuff that is needed/makes developing a .NET Core application easier, such as the CLI and a compiler.\nThe runtime is the \"virtual machine\" that hosts/runs the application and abstracts all the interaction with the base operating system."
            },
            {
              "q":"Name some CLR services?",
              "a":"CLR services\nAssembly Resolver\nAssembly Loader\nType Checker\nCOM marshalled\nDebug Manager\nThread Support\nIL to Native compiler\nException Manager\nGarbage Collector"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": ".NET is a free and open-source, managed computer software framework for Windows, Linux, and macOS operating systems. It is a cross-platform successor to .NET Framework. The project is primarily developed by Microsoft employees by way of the .NET Foundation, and released under the MIT License.",
          "icon": "assets/icons/web_mobile/net_core.png"
        },
        {
          "sub_category_name":"Node.js",
          "junior_level":[
            {
              "q":"What is npm?",
              "a":"npm stands for Node Package Manager. npm provides following two main functionalities:\nOnline repositories for node.js packages/modules which are searchable on search.nodejs.org\nCommand line utility to install packages, do version management and dependency management of Node.js packages."
            },
            {
              "q":"What is Node.js?",
              "a":"Node.js is a web application framework built on Google Chrome's JavaScript Engine (V8 Engine).\nNode.js comes with runtime environment on which a Javascript based script can be interpreted and executed (It is analogus to JVM to JAVA byte code). This runtime allows to execute a JavaScript code on any machine outside a browser. Because of this runtime of Node.js, JavaScript is now can be executed on server as well.\nNode.js = Runtime Environment + JavaScript Library"
            },
            {
              "q":"What are the two types of API functions in Node.js?",
              "a":"The two types of API functions in Node.js are: a) Asynchronous, non-blocking functions b) Synchronous, blocking functions"
            },
            {
              "q":"What is an error-first callback?",
              "a":"Error-first callbacks are used to pass errors and data. The first argument is always an error object that the programmer has to check if something went wrong. Additional arguments are used to pass data.\nfs.readFile(filePath, function(err, data) {\nif (err) {\n//handle the error\n}\n// use the data object\n});"
            },
            {
              "q":"What is Callback Hell?",
              "a":"The asynchronous function requires callbacks as a return parameter. When multiple asynchronous functions are chained together then callback hell situation comes up."
            },
            {
              "q":"What is control flow function?",
              "a":"It is a generic piece of code which runs in between several asynchronous function calls is known as control flow function."
            },
            {
              "q":"What are Event Listeners?",
              "a":"Event Listeners are similar to call back functions but are associated with some event. For example when a server listens to http request on a given port a event will be generated and to specify http server has received and will invoke corresponding event listener. Basically, Event listener's are also call backs for a corresponding event.\nNode.js has built in event's and built in event listeners. Node.js also provides functionality to create Custom events and Custom Event listeners."
            },
            {
              "q":"If Node.js is single threaded then how it handles concurrency?",
              "a":"Node provides a single thread to programmers so that code can be written easily and without bottleneck. Node internally uses multiple POSIX threads for various I/O operations such as File, DNS, Network calls etc.\nWhen Node gets I/O request it creates or uses a thread to perform that I/O operation and once the operation is done, it pushes the result to the event queue. On each such event, event loop runs and checks the queue and if the execution stack of Node is empty then it adds the queue result to execution stack.\nThis is how Node manages concurrency."
            },
            {
              "q":"Could we run an external process with Node.js?",
              "a":"Yes. Child process module enables us to access operating system functionaries or other apps. Scalability is baked into Node and child processes are the key factors to scale our application. You can use child process to run system commands, read large files without blocking event loop, decompose the application into various “nodes” (That’s why it’s called Node).\nChild process module has following three major ways to create child processes –\nspawn - child_process.spawn launches a new process with a given command.\nexec - child_process.exec method runs a command in a shell/console and buffers the output.\nfork - The child_process.fork method is a special case of the spawn() to create child processes."
            },
            {
              "q":"What are the key features of Node.js?",
              "a":"Let’s look at some of the key features of Node.js.\nAsynchronous event driven IO helps concurrent request handling – All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus it will not wait for the response from the previous requests.\nFast in Code execution – Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.\nSingle Threaded but Highly Scalable – Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.\nNode.js library uses JavaScript – This is another important aspect of Node.js from the developer’s point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.\nThere is an Active and vibrant community for the Node.js framework – The active community always keeps the framework updated with the latest trends in the web development.\nNo Buffering – Node.js applications never buffer any data. They simply output the data in chunks."
            },
            {
              "q":"What is the difference between Nodejs, AJAX, and jQuery?",
              "a":"The one common trait between Node.js, AJAX, and jQuery is that all of them are the advanced implementation of JavaScript. However, they serve completely different purposes.\nNode.js –It is a server-side platform for developing client-server applications. For example, if we’ve to build an online employee management system, then we won’t do it using client-side JS. But the Node.js can certainly do it as it runs on a server similar to Apache, Django not in a browser.\nAJAX (aka Asynchronous Javascript and XML) –It is a client-side scripting technique, primarily designed for rendering the contents of a page without refreshing it. There are a no. of large companies utilizing AJAX such as Facebook and Stack Overflow to display dynamic content.\njQuery –It is a famous JavaScript module which complements AJAX, DOM traversal, looping and so on. This library provides many useful functions to help in JavaScript development. However, it’s not mandatory to use it but as it also manages cross-browser compatibility, so can help you produce highly maintainable web applications."
            },
            {
              "q":"What are the core modules of Node.js?",
              "a":"EventEmitter\nStream\nFS\nNet\nGlobal Objects"
            },
            {
              "q":"What is global installation of dependencies?",
              "a":"Globally installed packages/dependencies are stored in /npm directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but can not be imported using require() in Node application directly. To install a Node project globally use -g flag."
            },
            {
              "q":"What do you mean by Asynchronous API?",
              "a":"All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call."
            },
            {
              "q":"What are the benefits of using Node.js?",
              "a":"Following are main benefits of using Node.js\nAynchronous and Event Driven - All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.\nVery Fast - Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.\nSingle Threaded but highly Scalable - Node.js uses a single threaded model with event looping. Event mechanism helps server to respond in a non-bloking ways and makes server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and same program can services much larger number of requests than traditional server like Apache HTTP Server.\nNo Buffering - Node.js applications never buffer any data. These applications simply output the data in chunks."
            },
            {
              "q":"What is libuv?",
              "a":"libuv is a C library that is used to abstract non-blocking I/O operations to a consistent interface across all supported platforms. It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming. It also includes a thread pool for offloading work for some things that can't be done asynchronously at the operating system level."
            },
            {
              "q":"What is V8?",
              "a":"The V8 library provides Node.js with a JavaScript engine (a program that converts Javascript code into lower level or machine code that microprocessors can understand), which Node.js controls via the V8 C++ API. V8 is maintained by Google, for use in Chrome.\nThe Chrome V8 engine :\nThe V8 engine is written in C++ and used in Chrome and Nodejs.\nIt implements ECMAScript as specified in ECMA-262.\nThe V8 engine can run standalone we can embed it with our own C++ program."
            },
            {
              "q":"What is the difference between returning a callback and just calling a callback?",
              "a":"return callback();\n//some more lines of code; - won't be executed\ncallback();\n//some more lines of code; - will be executed\nOf course returning will help the context calling async function get the value returned by callback.\nfunction do2(callback) {\nlog.trace('Execute function: do2');\nreturn callback('do2 callback param');\n}\nvar do2Result = do2((param) => {\nlog.trace(`print ${param}`);\nreturn `return from callback(${param})`; // we could use that return\n});\nlog.trace(`print ${do2Result}`);\nOutput:\nC:\\Work\\Node>node --use-strict main.js\n[0] Execute function: do2\n[0] print do2 callback param\n[0] print return from callback(do2 callback param)"
            },
            {
              "q":"List out the differences between AngularJS and NodeJS?",
              "a":"AngularJS is a web application development framework. It’s a JavaScript and it is different from other web app frameworks written in JavaScript like jQuery. NodeJS is a runtime environment used for building server-side applications while AngularJS is a JavaScript framework mainly useful in building/developing client-side part of applications which run inside a web browser."
            },
            {
              "q":"Is Node a single threaded application?",
              "a":"Yes! Node uses a single threaded model with event looping."
            },
            {
              "q":"What's the difference between operational and programmer errors?",
              "a":"Operation errors are not bugs, but problems with the system, like request timeout or hardware failure. On the other hand programmer errors are actual bugs."
            },
            {
              "q":"How you can monitor a file for modifications in Node.js ?",
              "a":"We can take advantage of File System watch() function which watches the changes of the file."
            },
            {
              "q":"How to make Post request in Node.js?",
              "a":"Following code snippet can be used to make a Post Request in Node.js.\nvar request = require('request');\nrequest.post('http://www.example.com/action', {\nform: {\nkey: 'value'\n}\n}, function(error, response, body) {\nif (!error && response.statusCode == 200) {\nconsole.log(body)\n}\n});"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser, which was designed to build scalable network applications.",
          "icon": "assets/icons/web_mobile/nodjs.png"
        },
        {
          "sub_category_name":"OOP",
          "junior_level":[
            {
              "q":"What is object-oriented programming (OOP)?",
              "a":"OOP is a technique to develop logical modules, such as classes that contain properties, methods, fields, and events. An object is created in the program to represent a class. Therefore, an object encapsulates all the features, such as data and behavior that are associated to a class. OOP allows developers to develop modular programs and assemble them as software. Objects are used to access data and behaviors of different software modules, such as classes, namespaces, and sharable assemblies. .NET Framework supports only OOP languages, such as Visual Basic .NET, Visual C#, and Visual C++."
            },
            {
              "q":"What is inheritance?",
              "a":"Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and speeds up implementation time.\nWhen creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the base class, and the new class is referred to as the derived class.\nThe idea of inheritance implements the IS-A relationship. For example, mammal IS A animal, dog IS-A mammal hence dog IS-A animal as well, and so on."
            },
            {
              "q":"Can you inherit private members of a class?",
              "a":"No, you cannot inherit private members of a class because private members are accessible only to that class and not outside that class."
            },
            {
              "q":"What is polymorphism?",
              "a":"The word polymorphism means having many forms. In object-oriented programming paradigm, polymorphism is often expressed as one interface, multiple functions."
            },
            {
              "q":"What is encapsulation?",
              "a":"Encapsulation is defined as the process of enclosing one or more items within a physical or logical package. Encapsulation, in object oriented programming methodology, prevents access to implementation details."
            },
            {
              "q":"Why is the virtual keyword used in code?",
              "a":"The virtual keyword is used while defining a class to specify that the methods and the properties of that class can be overridden in derived classes."
            },
            {
              "q":"Explain the concept of constructor?",
              "a":"Constructor is a special method of a class, which is called automatically when the instance of a class is created. It is created with the same name as the class and initializes all class members, whenever you access the class. The main features of a constructor are as follows:\nConstructors do not have any return type.\nConstructors can be overloaded.\nIt is not mandatory to declare a constructor; it is invoked automatically by .NET Framework."
            },
            {
              "q":"What is the difference between procedural and object-oriented programming?",
              "a":"Procedural programming is based upon the modular approach in which the larger programs are broken into procedures. Each procedure is a set of instructions that are executed one after another. On the other hand, OOP is based upon objects. An object consists of various elements, such as methods and variables.\nAccess modifiers are not used in procedural programming, which implies that the entire data can be accessed freely anywhere in the program. In OOP, you can specify the scope of a particular data by using access modifiers - public, private, internal, protected, and protected internal."
            },
            {
              "q":"What is the difference between a class and a structure?",
              "a":"Class:\nA class is a reference type.\nWhile instantiating a class, CLR allocates memory for its instance in heap.\nClasses support inheritance.\nVariables of a class can be assigned as null.\nClass can contain constructor/destructor.\nStructure:\nA structure is a value type.\nIn structure, memory is allocated on stack.\nStructures do not support inheritance.\nStructure members cannot have null values.\nStructure does not require constructor/destructor and members can be initialiazed automatically."
            },
            {
              "q":"What is an object?",
              "a":"Objeects are instance of classes. It is a basic unit of a system. An object is an entity that has attributes, behavior, and identity. Attributes and behavior of an object are defined by the class definition."
            },
            {
              "q":"What is a class?",
              "a":"A class describes all the attributes of objects, as well as the methods that implement the behavior of member objects. It is a comprehensive data type, which represents a blue print of objects. It is a template of object.\nA class can be defined as the primary building block of OOP. It also serves as a template that describes the properties, state, and behaviors common to a particular group of objects.\nA class contains data and behavior of an entity. For example, the aircraft class can contain data, such as model number, category, and color and behavior, such as duration of flight, speed, and number of passengers. A class inherits the data members and behaviors of other classes by extending from them."
            },
            {
              "q":"What is the relationship between a class and an object?",
              "a":"A class acts as a blue-print that defines the properties, states, and behaviors that are common to a number of objects. An object is an instance of the class. For example, you have a class called Vehicle and Car is the object of that class. You can create any number of objects for the class named Vehicle, such as Van, Truck, and Auto.\nThe new operator is used to create an object of a class. When an object of a class is instantiated, the system allocates memory for every data member that is present in the class."
            },
            {
              "q":"Explain the basic features of OOPs",
              "a":"The following are the four basic features of OOP:\nAbstraction - Refers to the process of exposing only the relevant and essential data to the users without showing unnecessary information.\nPolymorphism - Allows you to use an entity in multiple forms.\nEncapsulation - Prevents the data from unwanted access by binding of code and data in a single unit called object.\nInheritance - Promotes the reusability of code and eliminates the use of redundant code. It is the property through which a child class obtains all the features defined in its parent class. When a class inherits the common properties of another class, the class inheriting the properties is called a derived class and the class that allows inheritance of its common properties is called a base class."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Object-oriented programming is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields, and code, in the form of procedures. A common feature of objects is that procedures are attached to them and can access and modify the object's data fields",
          "icon": "assets/icons/web_mobile/oop.png"
        },
        {
          "sub_category_name":"PHP",
          "junior_level":[
            {
              "q":"What is the use of ini_set()?",
              "a":"PHP allows the user to modify some of its settings mentioned in php.ini using ini_set(). This function requires two string arguments. First one is the name of the setting to be modified and the second one is the new value to be assigned to it.\nGiven line of code will enable the display_error setting for the script if it’s disabled.\nini_set('display_errors', '1');\nWe need to put the above statement, at the top of the script so that, the setting remains enabled till the end. Also, the values set via ini_set() are applicable, only to the current script. Thereafter, PHP will start using the original values from php.ini."
            },
            {
              "q":"What is the difference between == and ===?",
              "a":"The operator == casts between two different types if they are different\nThe === operator performs a 'typesafe comparison'\nThat means that it will only return true if both operands have the same type and the same value.\n1 === 1: true\n1 == 1: true\n1 === \"1\": false // 1 is an integer, \"1\" is a string\n1 == \"1\": true // \"1\" gets casted to an integer, which is 1\n\"foo\" === \"foo\": true // both operands are strings and have the same value"
            },
            {
              "q":"What is the return type of a function that doesn't return anything?",
              "a":"void which mean nothing."
            },
            {
              "q":"What does $GLOBALS mean?",
              "a":"$GLOBALS is associative array including references to all variables which are currently defined in the global scope of the script."
            },
            {
              "q":"What are the keys & values in an indexed array?",
              "a":"Consider:\nArray ( [0] => Hello [1] => world [2] => It's [3] => a [4] => beautiful [5] => day)\nThe keys of an indexed array are 0, 1, 2 etc. (the index values) and values are \"Hello\", \"world\", \"It's\", \"beautiful\", \"day\"."
            },
            {
              "q":"What is the purpose of php.ini file?",
              "a":"The PHP configuration file, php.ini, is the final and most immediate way to affect PHP's functionality. The php.ini file is read each time PHP is initialized.in other words, whenever httpd is restarted for the module version or with each script execution for the CGI version."
            },
            {
              "q":"How can you pass a variable by reference?",
              "a":"To be able to pass a variable by reference, we use an ampersand in front of it, as follows:\n$var1 = &$var2"
            },
            {
              "q":"Is multiple inheritance supported in PHP?",
              "a":"PHP supports only single inheritance; it means that a class can be extended from only one single class using the keyword 'extended'."
            },
            {
              "q":"What is stdClass in PHP?",
              "a":"stdClass is just a generic 'empty' class that's used when casting other types to objects. stdClass is not the base class for objects in PHP. This can be demonstrated fairly easily:\nclass Foo{}\n$foo = new Foo();\necho ($foo instanceof stdClass)?'Y':'N'; // outputs 'N'\nIt is useful for anonymous objects, dynamic properties, etc.\nAn easy way to consider the StdClass is as an alternative to associative array. See this example below that shows how json_decode() allows to get an StdClass instance or an associative array. Also but not shown in this example, SoapClient::__soapCall returns an StdClass instance.\n//Example with StdClass\n$json = '{ \"foo\": \"bar\", \"number\": 42 }';\n$stdInstance = json_decode($json);\necho $stdInstance - > foo.PHP_EOL; //\"bar\"\necho $stdInstance - > number.PHP_EOL; //42\n//Example with associative array\n$array = json_decode($json, true);\necho $array['foo'].PHP_EOL; //\"bar\"\necho $array['number'].PHP_EOL; //42"
            },
            {
              "q":"In PHP, objects are they passed by value or by reference?",
              "a":"In PHP, objects passed by value."
            },
            {
              "q":"What is PDO in PHP?",
              "a":"PDO stands for PHP Data Object.\nIt is a set of PHP extensions that provide a core PDO class and database, specific drivers. It provides a vendor-neutral, lightweight, data-access abstraction layer. Thus, no matter what database we use, the function to issue queries and fetch data will be same. It focuses on data access abstraction rather than database abstraction."
            },
            {
              "q":"Is there a difference between isset and !empty?",
              "a":"empty is more or less shorthand for!isset($foo) || !$foo, and !empty is analogous to isset($foo) && $foo. empty is the same as !$foo, but doesn't throw warnings if the variable doesn't exist. That's the main point of this function: do a boolean comparison without worrying about the variable being set."
            },
            {
              "q":"Differentiate between echo and print()",
              "a":"echo and print are more or less the same. They are both used to output data to the screen.\nThe differences are:\necho has no return value while print has a return value of 1 so it can be used in expressions.\necho can take multiple parameters (although such usage is rare) while print can take one argument.\necho is faster than print."
            },
            {
              "q":"What is the differences between $a != $b and $a !== $b?",
              "a":"!= means inequality (TRUE if $a is not equal to $b) and !== means non-identity (TRUE if $a is not identical to $b)."
            },
            {
              "q":"What does the 'var' keyword mean in PHP?",
              "a":"It's for declaring class member variables in PHP4, and is no longer needed. It will work in PHP5, but will raise an E_STRICT warning in PHP from version 5.0.0 up to version 5.1.2, as of when it was deprecated. Since PHP 5.3, var has been un-deprecated and is a synonym for 'public'.\nConsider:\nclass foo {\nvar $x = 'y'; // or you can use public like...\npublic $x = 'y'; //this is also a class member variables.\nfunction bar() {\n}\n}"
            },
            {
              "q":"What do we mean by keys and values?",
              "a":"In associative arrays, we can use named keys that you assign to them. There are two ways to create an associative array:\n// first way -\n$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");`\n// another method -\n$age['Peter'] = \"35\"; //Peter, Ben & Joe are keys\n$age['Ben'] = \"37\"; //35, 37 & 43 are values\n$age['Joe'] = \"43\";"
            },
            {
              "q":"What are the differences between die() and exit() functions in PHP?",
              "a":"There's no difference - they are the same. The only advantage of choosing die() over exit(), might be the time you spare on typing an extra letter."
            },
            {
              "q":"Explain what the different PHP errors are",
              "a":"A notice is a non-critical error saying something went wrong in execution, something minor like an undefined variable.\nA warning is given when a more critical error like if an include() command went to retrieve a non-existent file. In both this and the error above, the script would continue.\nA fatal error would terminate the code. Failure to satisfy a require() would generate this type of error, for example."
            },
            {
              "q":"Explain usage of enumerations in PHP",
              "a":"PHP doesn't have native Enumerations. Depending upon use case, I would normally use something simple like the following:\nabstract class DaysOfWeek\n{\nconst Sunday = 0;\nconst Monday = 1;\n// etc.\n}\n$today = DaysOfWeek::Sunday;\nThere is a native extension, too. SplEnum gives the ability to emulate and create enumeration objects natively in PHP."
            },
            {
              "q":"Explain how we handle exceptions in PHP?",
              "a":"When an exception is thrown, code following the statement will not be executed, and PHP will attempt to find the first matching catch block. If an exception is not caught, a PHP Fatal Error will be issued with an \"Uncaught Exception\". An exception can be thrown, and caught within PHP.\nTo handle exceptions, code may be surrounded in a try block. Each try must have at least one corresponding catch block. Multiple catch blocks can be used to catch different classes of exceptions. Exceptions can be thrown (or re-thrown) within a catch block.\nConsider:\ntry {\nprint \"this is our try block n\";\nthrow new Exception();\n} catch (Exception $e) {\nprint \"something went wrong, caught yah! n\";\n} finally {\nprint \"this part is always executed n\";\n}"
            },
            {
              "q":"What are the main differences between const vs define",
              "a":"The fundamental difference between const vs define is that const defines constants at compile time, whereas define defines them at run time.\nconst FOO = 'BAR';\ndefine('FOO', 'BAR');\n// but\nif (...) {\nconst FOO = 'BAR'; // Invalid\n}\nif (...) {\ndefine('FOO', 'BAR'); // Valid\n}\nAlso until PHP 5.3, const could not be used in the global scope. You could only use this from within a class. This should be used when you want to set some kind of constant option or setting that pertains to that class. Or maybe you want to create some kind of enum. An example of good const usage is to get rid of magic numbers.\nDefine can be used for the same purpose, but it can only be used in the global scope. It should only be used for global settings that affect the entire application.\nUnless you need any type of conditional or expressional definition, use consts instead of define()- simply for the sake of readability!"
            },
            {
              "q":"What's the difference between isset() and array_key_exists()?",
              "a":"array_key_exists will tell you if a key exists in an array and complains when $a does not exist.\nisset will only return true if the key/variable exists and is not null. isset doesn't complain when $a does not exist.\nConsider:\n$a = array('key1' => 'Foo Bar', 'key2' => null);\nisset($a['key1']); // true\narray_key_exists('key1', $a); // true\nisset($a['key2']); // false\narray_key_exists('key2', $a); // true"
            },
            {
              "q":"Can you extend a Final defined class?",
              "a":"No, you cannot extend a Final defined class. A Final class or method declaration prevents child class or method overriding."
            },
            {
              "q":"What are PSRs? Choose 1 and briefly describe it.",
              "a":"PSRs are PHP Standards Recommendations that aim at standardising common aspects of PHP Development. An example of a PSR is PSR-2, which is a coding style guide."
            },
            {
              "q":"How can you enable error reporting in PHP?",
              "a":"Check if “display_errors” is equal “on” in the php.ini or declare “ini_set('display_errors', 1)” in your script.\nThen, include “error_reporting(E_ALL)” in your code to display all types of error messages during the script execution."
            },
            {
              "q":"When should I use require vs. include?",
              "a":"The require() function is identical to include(), except that it handles errors differently. If an error occurs, the include() function generates a warning, but the script will continue execution. The require() generates a fatal error, and the script will stop.\nMy suggestion is to just use require_once 99.9% of the time.\nUsing require or include instead implies that your code is not reusable elsewhere, i.e. that the scripts you're pulling in actually execute code instead of making available a class or some function libraries."
            },
            {
              "q":"What are the different scopes of variables?",
              "a":"Variable scope is known as its boundary within which it can be visible or accessed from code. In other words, it is the context within which a variable is defined. There are only two scopes available in PHP namely local and global scopes.\nLocal variables (local scope)\nGlobal variables (special global scope)\nStatic variables (local scope)\nFunction parameters (local scope) When a variable is accessed outside its scope it will cause PHP error undefined variable."
            },
            {
              "q":"What is the difference between var_dump() and print_r()?",
              "a":"The var_dump function displays structured information about variables/expressions including its type and value. Arrays are explored recursively with values indented to show structure. It also shows which array values and object properties are references.\nThe print_r() displays information about a variable in a way that's readable by humans. array values will be presented in a format that shows keys and elements. Similar notation is used for objects.\nConsider:\n$obj = (object) array('qualitypoint', 'technologies', 'India');\nvar_dump($obj)will display below output in the screen:\nobject(stdClass)#1 (3) {\n[0]=> string(12) \"qualitypoint\"\n[1]=> string(12) \"technologies\"\n[2]=> string(5) \"India\"\n}\nAnd, print_r($obj) will display below output in the screen.\nstdClass Object (\n[0] => qualitypoint\n[1] => technologies\n[2] => India\n)"
            },
            {
              "q":"What is the difference between single-quoted and double-quoted strings in PHP?",
              "a":"Single quoted strings will display things almost completely \"as is.\"\nDouble quote strings will display a host of escaped characters (including some regexes), and variables in the strings will be evaluated.\nThings get evaluated in double quotes but not in single:\n$s = \"dollars\";\necho 'This costs a lot of $s.'; // This costs a lot of $s.\necho \"This costs a lot of $s.\"; // This costs a lot of dollars."
            },
            {
              "q":"How is it possible to set an infinite execution time for PHP script?",
              "a":"The set_time_limit(0)added at the beginning of a script sets to infinite the time of execution to not have the PHP error 'maximum execution time exceeded.' It is also possible to specify this in the php.ini file."
            },
            {
              "q":"Give me some real life examples when you had to use __destruct in your classes",
              "a":"We know that __destruct is called when the object is destroyed. Logically, what happens if the object is destroyed? Well, it means it's no longer available. So if it has resources open, it makes sense to close those resources as it's being destroyed or cleaning up after itself. Also because PHP will close resources on termination for you doesn't mean that it's bad to explicitly close them when you no longer need them (or good to not close them).\nSome real examples are:\nClosing custom database connector/wrapper connection\nDeletion of temporary folders\nCleaning up caching\nSpooling the queue of logging messages to db/file"
            },
            {
              "q":"Declare some function with default parameter",
              "a":"Consider:\nfunction showMessage($hello = false){\necho ($hello) ? 'hello' : 'bye';\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "PHP is a general-purpose scripting language geared toward web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group.",
          "icon": "assets/icons/web_mobile/php.png"
        },
        {
          "sub_category_name":"PWA",
          "junior_level":[
            {
              "q":"What is a progressive web app?",
              "a":"The concept of the progressive web app (PWA) was approached by Google in late 2015. They are basically web applications (Website) but have look and feel like other native mobile apps. The progressive web app enabled websites can offer functionalities such as working offline, push notifications, and device hardware access."
            },
            {
              "q":"What are some benefits of PWA?",
              "a":"Benefits of the progressive web app:\nSmaller and Faster: The progressive web apps are much smaller in size than native apps. They don’t even need to install. That’s they are not wasting disc space and load very fast.\nResponsive Interface: Progressive web app (PWA) supported web pages are capable to fit in every screen sizes automatically. It could be a smartphone, tablet, desktop or laptop.\nNo Updates Required: Most of the mobile apps need regular weekly updates. Like the normal website, progressive web apps (PWA) are always loaded latest updated version whenever the user interaction happens and no App or Play Store approval required.\nCost Effective: Native mobile apps need to be developed for both Android and iOS devices separately and their development cost is very high. On the other hand, progressive web apps are had the same features but the fraction of the prior price.\nSEO Advantage: Progressive web apps are discoverable by search engines and load super-fast. Just like other websites, their links are sharable too. This, in other words, gives good user experience and result in SEO rank boost.\nOffline capabilities: Due to the support of service worker API, PWAs are accessible in offline or low internet connections.\nSecurity: PWAs are delivered over HTTPS connection and secure user-data over each interaction.\nPush Notifications: By the support of push notifications, PWAs can interact easily with the users and provide a really amazing user experience.\nBypass the app stores: PWAs don’t need the App store or Google play store support. Their updated version can be directly loaded from the web server without the requirement of app store approval. On the other hand, native apps need days of approval if any new update required. There are possibilities of getting rejected or banned.\nZero installation: During browsing, progressive web app gets its own icon on phones and tablets, just like a mobile application, but without the need to go through the tedious and slow App Store installation process."
            },
            {
              "q":"What makes an app a PWA?",
              "a":"There are some key principles a web app should try to observe to be identified as a PWA. It should be:\nDiscoverable, so the contents can be found through search engines.\nInstallable, so it's available on the device's home screen.\nLinkable, so you can share it by simply sending a URL. * Network independent, so it works offline or with a poor network connection.\nProgressive, so it's still usable on a basic level on older browsers, but fully-functional on the latest ones.\nRe-engageable, so it's able to send notifications whenever there's new content available.\nResponsive, so it's usable on any device with a screen and a browser — mobile phones, tablets, laptops, TVs, fridges, etc.\nSafe, so the connection between you and the app is secured against any third parties trying to get access to your sensitive data."
            },
            {
              "q":"Why do we need a web manifest for PWA?",
              "a":"A web manifest file lists all the information about the website in a JSON format. Having this file is one of the requirements to make the website installable.\nIt usually resides in the root folder of a web app. It contains useful information, such as the app’s title, paths to different-sized icons that can be used to represent the app on a mobile OS (for example, as the home screen icon), and a background color to use in loading or splash screens. This information is needed for the browser to present the web app properly when installing, and on the home screen."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "A progressive web application, commonly known as a progressive web app, is a type of application software delivered through the web, built using common web technologies including HTML, CSS, JavaScript, and WebAssembly.",
          "icon": "assets/icons/web_mobile/pwa.png"
        },
        {
          "sub_category_name":"Python",
          "junior_level":[
            {
              "q":"Name some characteristics of Python?",
              "a":"Here are a few key points:\nPython is an interpreted language. That means that, unlike languages like C and its variants, Python does not need to be compiled before it is run. Other interpreted languages include PHP and Ruby.\nPython is dynamically typed, this means that you don't need to state the types of variables when you declare them or anything like that. You can do things like x=111 and then x=\"I'm a string\" without error\nPython is well suited to object orientated programming in that it allows the definition of classes along with composition and inheritance. Python does not have access specifiers (like C++'s public, private), the justification for this point is given as \"we are all adults here\"\nIn Python, functions are first-class objects. This means that they can be assigned to variables, returned from other functions and passed into functions. Classes are also first class objects\nWriting Python code is quick but running it is often slower than compiled languages. Fortunately, Python allows the inclusion of C based extensions so bottlenecks can be optimised away and often are. The numpy package is a good example of this, it's really quite quick because a lot of the number crunching it does isn't actually done by Python"
            },
            {
              "q":"How do I modify a string?",
              "a":"You can’t, because strings are immutable. In most situations, you should simply construct a new string from the various parts you want to assemble it from."
            },
            {
              "q":"What are the built-in types available In Python?",
              "a":"Immutable built-in datatypes of Python\nNumbers\nStrings\nTuples\nMutable built-in datatypes of Python\nList\nDictionaries\nSets"
            },
            {
              "q":"Name some benefits of Python",
              "a":"Python is a dynamic-typed language. It means that you don’t need to mention the data type of variables during their declaration.\nPython supports object orientated programming as you can define classes along with the composition and inheritance.\nFunctions in Python are like first-class objects. It suggests you can assign them to variables, return from other methods and pass as arguments.\nDeveloping using Python is quick but running it is often slower than compiled languages.\nPython has several usages like web-based applications, test automation, data modeling, big data analytics and much more."
            },
            {
              "q":"Why would you use the \"pass\" statement?",
              "a":"Python has the syntactical requirement that code blocks cannot be empty. Empty code blocks are however useful in a variety of different contexts, for example if you are designing a new class with some methods that you don't want to implement:\nclass MyClass(object):\ndef meth_a(self):\npass\ndef meth_b(self):\nprint \"I'm meth_b\"\nIf you were to leave out the pass, the code wouldn't run and you'll get an error:\nIndentationError: expected an indented block\nOther examples when we could use pass:\nIgnoring (all or) a certain type of Exception\nDeriving an exception class that does not add new behaviour\nTesting that code runs properly for a few test values, without caring about the results"
            },
            {
              "q":"What are local variables and global variables in Python?",
              "a":"Global Variables: Variables declared outside a function or in global space are called global variables. These variables can be accessed by any function in the program.\nLocal Variables: Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in the global space."
            },
            {
              "q":"What are descriptors?",
              "a":"Descriptors were introduced to Python way back in version 2.2. They provide the developer with the ability to add managed attributes to objects. The methods needed to create a descriptor are __get__, __set__ and __delete__. If you define any of these methods, then you have created a descriptor.\nDescriptors power a lot of the magic of Python’s internals. They are what make properties, methods and even the super function work. They are also used to implement the new style classes that were also introduced in Python 2.2."
            },
            {
              "q":"What Is The Benefit Of Using Flask?",
              "a":"Flask is part of the micro-framework. Which means it will have little to no dependencies on external libraries. It makes the framework light while there is little dependency to update and less security bugs."
            },
            {
              "q":"Does Python have a switch-case statement?",
              "a":"In Python, we do not have a switch-case statement. Here, you may write a switch function to use. Else, you may use a set of if-elif-else statements. To implement a function for this, we may use a dictionary.\ndef switch_demo(argument):\nswitcher = {\n1: \"January\",\n2: \"February\",\n3: \"March\",\n4: \"April\",\n5: \"May\",\n6: \"June\",\n7: \"July\",\n8: \"August\",\n9: \"September\",\n10: \"October\",\n11: \"November\",\n12: \"December\"\n}\nprint switcher.get(argument, \"Invalid month\")"
            },
            {
              "q":"What is pickling and unpickling?",
              "a":"The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure.\nPickling - is the process whereby a Python object hierarchy is converted into a byte stream,\nUnpickling - is the inverse operation, whereby a byte stream is converted back into an object hierarchy."
            },
            {
              "q":"When to use a tuple vs list vs dictionary in Python?",
              "a":"Use a tuple to store a sequence of items that will not change.\nUse a list to store a sequence of items that may change.\nUse a dictionary when you want to associate pairs of two items."
            },
            {
              "q":"What is negative index in Python?",
              "a":"Python sequences can be index in positive and negative numbers. For positive index, 0 is the first index, 1 is the second index and so forth. For negative index, (-1) is the last index and (-2) is the second last index and so forth."
            },
            {
              "q":"Suppose lst is 2, 33, 222, 14, 25, What is lst-1?",
              "a":"It's 25. Negative numbers mean that you count from the right instead of the left. So, lst[-1] refers to the last element, lst[-2] is the second-last, and so on."
            },
            {
              "q":"How do you list the functions in a module?",
              "a":"Use the dir() method to list the functions in a module:\nimport some_module\nprint dir(some_module)"
            },
            {
              "q":"What is PEP 8?",
              "a":"PEP 8 is the latest Python coding standard, a set of coding recommendations. It guides to deliver more readable Python code."
            },
            {
              "q":"What are some drawbacks of the Python language?",
              "a":"The two most common valid answers to this question (by no means intended as an exhaustive list) are:\nThe Global Interpreter Lock (GIL). CPython (the most common Python implementation) is not fully thread safe. In order to support multi-threaded Python programs, CPython provides a global lock that must be held by the current thread before it can safely access Python objects. As a result, no matter how many threads or processors are present, only one thread is ever being executed at any given time. In comparison, it is worth noting that the PyPy implementation discussed earlier in this article provides a stackless mode that supports micro-threads for massive concurrency.\nExecution speed. Python can be slower than compiled languages since it is interpreted. (Well, sort of. See our earlier discussion on this topic.)"
            },
            {
              "q":"What is lambda functions in Python?",
              "a":"A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.\nConsider:\nx = lambda a : a + 10\nprint(x(5)) # Output: 15"
            },
            {
              "q":"What are the rules for local and global variables in Python?",
              "a":"In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.\nRequiring global for assigned variables provides a bar against unintended side-effects."
            },
            {
              "q":"Given variables a and b, switch their values so that b has the value of a, and a has the value of b without using an intermediary variable.",
              "a":"a, b = b, a"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Python is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.",
          "icon": "assets/icons/web_mobile/python.png"
        },
        {
          "sub_category_name":"React",
          "junior_level":[
            {
              "q":"How does React work?",
              "a":"React creates a virtual DOM. When state changes in a component it firstly runs a \"diffing\" algorithm, which identifies what has changed in the virtual DOM. The second step is reconciliation, where it updates the DOM with the results of diff."
            },
            {
              "q":"What is context?",
              "a":"Context provides a way to pass data through the component tree without having to pass props down manually at every level. For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.\nconst {Provider, Consumer} = React.createContext(defaultValue);"
            },
            {
              "q":"What is virtual DOM?",
              "a":"The virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the “real” DOM. It’s a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation."
            },
            {
              "q":"What is props in ReactJS?",
              "a":"Props are inputs to a React component. They are single values or objects containing a set of values that are passed to React Components on creation using a naming convention similar to HTML-tag attributes. i.e, They are data passed down from a parent component to a child component.\nThe primary purpose of props in React is to provide following component functionality:\nPass custom data to your React component.\nTrigger state changes.\nUse via this.props.reactProp inside component's render() method.\nFor example, let us create an element with reactProp property,\n<Element reactProp = \"1\" />\nThis reactProp (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.\nprops.reactProp;"
            },
            {
              "q":"What is the use of refs?",
              "a":"The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when we need direct access to DOM element or an instance of a component."
            },
            {
              "q":"What is JEST?",
              "a":"Jest is a JavaScript unit testing framework made by Facebook based on Jasmine and provides automated mock creation and a jsdom environment. It's often used for testing React components."
            },
            {
              "q":"What are the advantages of ReactJS?",
              "a":"Below are the advantages of ReactJS:\nIncreases the application’s performance with Virtual DOM\nJSX makes code is easy to read and write\nIt renders both on client and server side\nEasy to integrate with other frameworks (Angular, BackboneJS) since it is only a view library\nEasy to write UI Test cases and integration with tools such as JEST."
            },
            {
              "q":"What is ReactJS?",
              "a":"ReactJS is an open-source frontend JavaScript library which is used for building user interfaces especifically for single page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. ReactJS was first deployed on Facebook’s newsfeed in 2011 and on Instagram.com in 2012."
            },
            {
              "q":"How to write comments in ReactJS?",
              "a":"The comments in ReactJS/JSX is similar to javascript multiline comments which are wrapped with curly braces:\nSingle-line comments:\n<div>\n{/* Single-line comments */}\nWelcome {user}, Let's play React\n</div>\nMulti-line comments:\n<div>\n{/* Multi-line comments for more than\none line */}\nWelcome {user}, Let's play React\n</div>"
            },
            {
              "q":"How would you write an inline style in React?",
              "a":"For example:\n<div style={{ height: 10 }}>"
            },
            {
              "q":"What are the major features of ReactJS?",
              "a":"The major features of ReactJS are as follows,\nIt uses VirtualDOM instead RealDOM considering that RealDOM manipulations are expensive.\nSupports server-side rendering\nFollows Unidirectional data flow or data binding\nUses reusable/composable UI components to develop the view"
            },
            {
              "q":"What are props in React?",
              "a":"Props are properties that are passed into a child component from its parent, and are readonly."
            },
            {
              "q":"What are the differences between a class component and functional component?",
              "a":"Class components allows you to use additional features such as local state and lifecycle hooks. Also, to enable your component to have direct access to your store and thus holds state.\nWhen your component just receives props and renders them to the page, this is a stateless component, for which a pure function can be used. These are also called dumb components or presentational components."
            },
            {
              "q":"Where in a React component should you make an AJAX request?",
              "a":"componentDidMount is where an AJAX request should be made in a React component.\nThis method will be executed when the component “mounts” (is added to the DOM) for the first time. This method is only executed once during the component’s life. Importantly, you can’t guarantee the AJAX request will have resolved before the component mounts. If it doesn't, that would mean that you’d be trying to setState on an unmounted component, which would not work. Making your AJAX request in componentDidMount will guarantee that there’s a component to update."
            },
            {
              "q":"What is the difference between state and props?",
              "a":"The state is a data structure that starts with a default value when a Component mounts. It may be mutated across time, mostly as a result of user events.\nProps (short for properties) are a Component's configuration. They are received from above and immutable as far as the Component receiving them is concerned. A Component cannot change its props, but it is responsible for putting together the props of its child Components. Props do not have to just be data - callback functions may be passed in as props."
            },
            {
              "q":"What is the difference between a Presentational component and a Container component?",
              "a":"Presentational components are concerned with how things look. They generally receive data and callbacks exclusively via props. These components rarely have their own state, but when they do it generally concerns UI state, as opposed to data state.\nContainer components are more concerned with how things work. These components provide the data and behavior to presentational or other container components. They call Flux actions and provide these as callbacks to the presentational components. They are also often stateful as they serve as data sources."
            },
            {
              "q":"What are refs used for in React?",
              "a":"Refs are an escape hatch which allow you to get direct access to a DOM element or an instance of a component. In order to use them you add a ref attribute to your component whose value is a callback function which will receive the underlying DOM element or the mounted instance of the component as its first argument.\nclass UnControlledForm extends Component {\nhandleSubmit = () => {\nconsole.log(\"Input Value: \", this.input.value)\n}\nrender () {\nreturn (\n<form onSubmit={this.handleSubmit}>\n<input\ntype='text'\nref={(input) => this.input = input} />\n<button type='submit'>Submit</button>\n</form>\n)\n}\n}\nAbove notice that our input field has a ref attribute whose value is a function. That function receives the actual DOM element of input which we then put on the instance in order to have access to it inside of the handleSubmit function.\nIt’s often misconstrued that you need to use a class component in order to use refs, but refs can also be used with functional components by leveraging closures in JavaScript.\nfunction CustomForm ({handleSubmit}) {\nlet inputElement\nreturn (\n<form onSubmit={() => handleSubmit(inputElement.value)}>\n<input\ntype='text'\nref={(input) => inputElement = input} />\n<button type='submit'>Submit</button>\n</form>\n)\n}"
            },
            {
              "q":"What's the difference between a controlled component and an uncontrolled one in React?",
              "a":"A controlled component has its state completely driven by React,\nUncontrolled components can maintain their own internal state. E.g., a textarea's value."
            },
            {
              "q":"What are controlled components?",
              "a":"A ReactJS component that controls the input elements within the forms on subsequent user input is called “Controlled component”. i.e, every state mutation will have an associated handler function.\nFor example, to write all the names in uppercase letters, we use handleChange as below,\nhandleChange(event) {\nthis.setState({\nvalue: event.target.value.toUpperCase()\n});\n}"
            },
            {
              "q":"What is state in ReactJS?",
              "a":"State of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.\nLet's create user component with message state,\nclass User extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nmessage: \"Welcome to React world\",\n}\n}\nrender() {\nreturn (\n<div>\n<h1>{this.state.message}</h1>\n</div>\n);\n}\n}"
            },
            {
              "q":"When to use a Class Component over a Functional Component?",
              "a":"If the component need state or lifecycle methods then use class component otherwise use functional component."
            },
            {
              "q":"What does it mean for a component to be mounted in React?",
              "a":"It has a corresponding element created in the DOM and is connected to that."
            },
            {
              "q":"How do we pass a property from a parent component props to a child component?",
              "a":"For example:\n<ChildComponent someProp={props.someProperty} />"
            },
            {
              "q":"What are fragments?",
              "a":"It's common pattern in React which is used for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\nrender() {\nreturn (\n<React.Fragment>\n<ChildA />\n<ChildB />\n<ChildC />\n</React.Fragment>\n);\n}\nThere is also a shorter syntax which is not supported in many tools\nrender() {\nreturn (\n<>\n<ChildA />\n<ChildB />\n<ChildC />\n</>\n);\n}"
            },
            {
              "q":"When rendering a list what is a key and what is it's purpose?",
              "a":"Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. The best way to pick a key is to use a string that uniquely identifies a list item among its siblings.\nrender () {\nreturn (\n<ul>\n{this.state.todoItems.map(({task, uid}) => {\nreturn <li key={uid}>{task}</li>\n})}\n</ul>\n)\n}\nMost often you would use IDs from your data as keys. When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort. It is not recommend to use indexes for keys if the items can reorder, as that would be slow."
            },
            {
              "q":"How to create refs?",
              "a":"Refs are created using React.createRef() method and attached to React elements via the ref attribute. In order to use refs throughout the component, just assign the ref to the instance property with in constructor.\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.myRef = React.createRef();\n}\nrender() {\nreturn <div ref={this.myRef} />;\n}\n}\nAnd:\nclass UserForm extends Component {\nhandleSubmit = () => {\nconsole.log(\"Input Value is: \", this.input.value)\n}\nrender () {\nreturn (\n<form onSubmit={this.handleSubmit}>\n<input\ntype='text'\nref={(input) => this.input = input} /> // Access DOM input in handle submit\n<button type='submit'>Submit</button>\n</form>\n)\n}\n}\nWe can also use it in functional components with the help of closures."
            },
            {
              "q":"What happens when you call setState?",
              "a":"The state property is updated in a React component with the object passed into setState, and this is done asynchronously. It tells React that this component and its children need to be re-rendered, but React may not do this immediately (it may batch these state update requests for better performance)."
            },
            {
              "q":"What are stateful components?",
              "a":"If the behaviour of a component is dependent on the state of the component then it can be termed as stateful component. These Stateful components are always class components and have a state that gets initialized in the constructor.\nclass App extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { count: 0 };\n}\nrender() {\n// omitted for brevity\n}\n}"
            },
            {
              "q":"How would you prevent a component from rendering in React?",
              "a":"Return null from the render method."
            },
            {
              "q":"What is JSX?",
              "a":"JSX is a syntax notation for JavaScript XML(XML-like syntax extension to ECMAScript). It stands for JavaScript XML. It provides expressiveness of JavaScript along with HTML like template syntax. For example, the below text inside h1 tag return as javascript function to the render function,\nrender(){\nreturn(\n<div>\n<h1> Welcome to React world!!</h1>\n</div>\n);\n}"
            },
            {
              "q":"How error boundaries handled in React (15)?",
              "a":"React15 provided very basic support for error boundaries using the method name unstable_handleError. Later this has been renamed as componentDidCatch starting from React16 beta release."
            },
            {
              "q":"Where is the state kept in a React + Redux application?",
              "a":"In the store."
            },
            {
              "q":"What are the limitations of ReactJS?",
              "a":"Below are the list of limitations:\nReact is just a view library, not a full-blown framework\nThere is a learning curve for beginners who are new to web development.\nIntegrating React.js into a traditional MVC framework requires some additional configuration\nThe code complexity increases with inline templating and JSX.\nToo many smaller components leading to over-engineering or boilerplate"
            },
            {
              "q":"What is the difference between React Native and React?",
              "a":"ReactJS is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.\nReact Native is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use ReactJS to build your components, and implements ReactJS under the hood."
            },
            {
              "q":"What are stateless components?",
              "a":"If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for stateless functional components. There are a lot of benefits if you decide to use stateless functional components here; they are easy to write, understand, and test, and you can avoid the this keyword altogether."
            },
            {
              "q":"How is React different from AngularJS (1.x)?",
              "a":"For example, AngularJS (1.x) approaches building an application by extending HTML markup and injecting various constructs (e.g. Directives, Controllers, Services) at runtime. As a result, AngularJS is very opinionated about the greater architecture of your application — these abstractions are certainly useful in some cases, but they come at the cost of flexibility.\nBy contrast, React focuses exclusively on the creation of components, and has few (if any) opinions about an application’s architecture. This allows a developer an incredible amount of flexibility in choosing the architecture they deem “best” — though it also places the responsibility of choosing (or building) those parts on the developer."
            },
            {
              "q":"What is the point of Redux?",
              "a":"Application state management that is easy to reason about, maintain and manage in an asynchronous web application environment."
            },
            {
              "q":"Why is it necessary to capitalize the components?",
              "a":"It is necessary because components are not the DOM element but they are constructors. If they are not capitalized, they can cause various issues and can confuse developers with several elements."
            },
            {
              "q":"What is the difference between state and props?",
              "a":"Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. i.e,\nProps get passed to the component similar to function parameters\nstate is managed within the component similar to variables declared within a function."
            },
            {
              "q":"What is Flow?",
              "a":"Flow is a static type checker, designed to find type errors in JavaScript programs, created by Facebook. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving null, unlike most type systems."
            },
            {
              "q":"How to create components in ReactJS?",
              "a":"There are two possible ways to create ReactJS Components.\nFunctional components: This is the simplest way to create ReactJS components. It accepts props as an Object and returns ReactJS elements. We call it as “functional” because those are pure JavaScript functions.\nfunction Greeting(props) {\nreturn <h1> Hello, {props.message}</h1> \n}\nClass components: You can also use Es6 class to define component. The above functional component can be written as below,\nclass Greeting extends React.Component {\nrender() {\nreturn <h1>Hello, {this.props.message}</h1>;\n}\n}"
            },
            {
              "q":"What is the purpose of callback function as an argument of setState?",
              "a":"The callback function is invoked when setState finished and the component gets rendered. Since setState is asynchronous the callback function is used for any post action.\nNote: It is recommended to use lifecycle method rather this callback function.\nsetState({name: 'sudheer'}, () => console.log('The name has updated and component re-rendered'));"
            },
            {
              "q":"What are portals in ReactJS?",
              "a":"Portal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\nReactDOM.createPortal(child, container);\nThe first argument (child) is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element."
            },
            {
              "q":"How to pass a parameter to an event handler or callback?",
              "a":"You can use an arrow function to wrap around an event handler and pass parameters:\n<button onClick={() => this.handleClick(id)} />\nThis is equivalent to calling .bind as below,\n<button onClick={this.handleClick.bind(this, id)} />"
            },
            {
              "q":"What’s the difference between an \"Element\" and a \"Component\" in React?",
              "a":"Simply put, a React element describes what you want to see on the screen. Not so simply put, a React element is an object representation of some UI.\nA React component is a function or a class which optionally accepts input and returns a React element (typically via JSX which gets transpiled to a createElement invocation)."
            },
            {
              "q":"What happens during the lifecycle of a React component?",
              "a":"At the highest level, React components have lifecycle events that fall into three general categories:\nInitialization\nState/Property Updates\nDestruction"
            },
            {
              "q":"What is Flux?",
              "a":"Unidrectional application flow paradigm popular a few years back in React; mostly superceded by Redux these days."
            },
            {
              "q":"What is the difference between component and container in react Redux?",
              "a":"Component is part of the React API. A Component is a class or function that describes part of a React UI. Container is an informal term for a React component that is connected to a redux store. Containers receive Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components."
            },
            {
              "q":"What is inline conditional expressions?",
              "a":"You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator(&&).\n<h1>Hello!</h1>\n{messages.length > 0 &&\n<h2>\nYou have {messages.length} unread messages.\n</h2>"
            },
            {
              "q":"How do you prevent the default behavior in an event callback in React?",
              "a":"You call e.preventDefault(); on the event e passed into the callback."
            },
            {
              "q":"What is reconciliation?",
              "a":"When a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called reconciliation."
            },
            {
              "q":"What is the purpose of using super constructor with props argument?",
              "a":"A child class constructor cannot make use of this reference until super() method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to super() call is to access this.props in your child constructors.\nPassing props:\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props);\nconsole.log(this.props); // Prints { name: 'sudheer',age: 30 }\n}\n}\nNot passing props:\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper();\nconsole.log(this.props); // Prints undefined\n// But Props parameter is still available\nconsole.log(props); // Prints { name: 'sudheer',age: 30 }\n}\nrender() {\n// No difference outside constructor\nconsole.log(this.props) // Prints { name: 'sudheer',age: 30 }\n}\n}\nThe above code snippets reveals that this.props behavior is different only with in the constructor. It would be same outside the constructor."
            },
            {
              "q":"What happens when you call \"setState\"?",
              "a":"The first thing React will do when setState is called is merge the object you passed into setState into the current state of the component. This will kick off a process called reconciliation. The end goal of reconciliation is to, in the most efficient way possible, update the UI based on this new state.\nTo do this, React will construct a new tree of React elements (which you can think of as an object representation of your UI). Once it has this tree, in order to figure out how the UI should change in response to the new state, React will diff this new tree against the previous element tree.\nBy doing this, React will then know the exact changes which occurred, and by knowing exactly what changes occurred, will able to minimize its footprint on the UI by only making updates where absolutely necessary."
            },
            {
              "q":"Describe how events are handled in React.",
              "a":"In order to solve cross browser compatibility issues, your event handlers in React will be passed instances of SyntheticEvent, which is React’s cross-browser wrapper around the browser’s native event. These synthetic events have the same interface as native events you’re used to, except they work identically across all browsers.\nWhat’s mildly interesting is that React doesn’t actually attach events to the child nodes themselves. React will listen to all events at the top level using a single event listener. This is good for performance and it also means that React doesn’t need to worry about keeping track of event listeners when updating the DOM."
            },
            {
              "q":"What is the difference between Element and Component?",
              "a":"An element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated. The object representation of React element would be as follows,\nconst element = React.createElement(\n'div',\n{id: 'login-btn'},\n'Login'\n)\nThe above createElement returns as object as below,\n{\ntype: 'div',\nprops: {\nchildren: 'Login',\nid: 'login-btn'\n}\n}\nAnd finally it renders to the DOM using ReactDOM.render as below,\n<div id='login-btn'>Login</div>\nWhereas a component can be declared in several different ways. It can be a class with a render() method. Alternatively, in simple cases, it can be defined as a function. In either case, it takes props as an input, and returns an element tree as the output. JSX transpiled as createElement at the end.\nfunction Button ({ onLogin }) {\nreturn React.createElement(\n'div',\n{id: 'login-btn', onClick: onLogin},\n'Login'\n)\n}"
            },
            {
              "q":"What are Higher-Order components?",
              "a":"A higher-order component (HOC) is a function that takes a component and returns a new component. Basically, it’s a pattern that is derived from React’s compositional nature We call them as “pure’ components” because they can accept any dynamically provided child component but they won’t modify or copy any behavior from their input components.\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\nHOC can be used for many use cases as below,\nCode reuse, logic and bootstrap abstraction\nRender High jacking\nState abstraction and manipulation\nProps manipulation"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "React is a free and open-source front-end JavaScript library for building user interfaces based on UI components. It is maintained by Meta and a community of individual developers and companies.",
          "icon": "assets/icons/web_mobile/react.png"
        },
        {
          "sub_category_name":"React Native",
          "junior_level":[
            {
              "q":"What are native apps?",
              "a":"Native mobile apps are the most common type of app.\nThey are built for specific platforms and are written in languages that the platform accepts. For example, Swift and Objective-C for native iOS apps and Java or Kotlin for native Android apps.\nNative apps are also built using the specific Integrated Development Environment (IDE) for the selected operating systems\nSource: clearbridgemobile.com"
            },
            {
              "q":"List some benefits of using React Native for building mobile apps?",
              "a":"Some benefits of React Native are:\nKnown for Optimal Performance\nCan Reuse the Codes and Pre-Developed Components\nLarge Community of Developers\nAdvantage of Live and Hot Reloading\nCost Effective Solution\nOffers Simple User Interface\nSupport for Third-Party Plugins\nModular Architecture\nProviding Handy Solutions and Libraries\nSource: brainhub.eu"
            },
            {
              "q":"Why do we use curly brace while importing some library?",
              "a":"Problem\nConsider:\nimport { Text, StyleSheet } from \"react-native\";\nCurly braces are used to import small pieces of library. In above example we just want to make use of Text and StyleSheet component from react-native, so they are put in curly braces.\nSource: github.com"
            },
            {
              "q":"What are the advantages of hybrid apps over native apps?",
              "a":"Works across multiple platforms.\nUnified development.\nFaster build and lower cost of development.\nEasier to make changes and update.\nSource: Stackoverflow.com"
            },
            {
              "q":"What are hybrid apps?",
              "a":"Hybrid mobile apps are applications that are installed on a device, just like any other app.\nHybrid apps are deployed in a native container that uses a mobile WebView object. When the app is used, this object displays web content thanks to the use of web technologies (CSS, JavaScript, HTML).\nSource: brainhub.eu"
            },
            {
              "q":"What is React Native?",
              "a":"React Native is a mobile app development framework that enables the development of multi-platform Android and iOS apps using native UI elements.\nIt is based on the JavaScriptCore runtime and Babel transformers. With this setup react native supports new JavaScript (ES6+) features, e.g. arrow functions, async/await etc.\nThis famous framework for mobile app development started in the summer of 2013 as Facebook’s internal hackathon project.\nIts first public preview was released in January of 2015 at Reactjs Conference and in March of 2015, Facebook made React Native open and available on GitHub.\nSource: brainhub.eu"
            },
            {
              "q":"How do you dismiss the keyboard in react native?",
              "a":"Using Keyboard.dismiss()\nimport { Keyboard } from 'react-native'\n// Hiding the keyboard\nKeyboard.dismiss()\nSource: stackoverflow.com"
            },
            {
              "q":"What is JSX?",
              "a":"JSX is an XML/HTML-like syntax used by React that extends ECMAScript so that XML/HTML-like text can co-exist with JavaScript/React code.\nThe syntax is intended to be used by preprocessors (i.e., transpilers like Babel) to transform HTML-like text found in JavaScript files into standard JavaScript objects that a JavaScript engine will parse.\nconst nav = (\n<ul id=\"nav\">\n<li><a href=\"#\">Home</a></li>\n<li><a href=\"#\">About</a></li>\n<li><a href=\"#\">Clients</a></li>\n<li><a href=\"#\">Contact Us</a></li>\n</ul>\n);\nSource: www.reactenlightenment.com"
            },
            {
              "q":"What are props in React Native?",
              "a":"The properties of React Native components are simply pronounced as props.\nIn React Native, most of the components can be customized at the time of their creation with different parameters. These parameters are known as props.\nThey are immutable, and they cannot be changed.\nimport React, { Component } from 'react';\nimport {\nPlatform,\nStyleSheet,\nImage,\nText,\nView\n} from 'react-native';\nexport default class App extends Component<{}> {\nrender() {\nlet imagePath = { uri: 'https://facebook.github.io/react-native/img/header_logo.png'};\nreturn (\n<View style={styles.container}>\n<Text style={styles.welcome}>Welcome to React Native!</Text>\n<Image source={imagePath} style={{width: 250, height: 250}} />\n</View>\n);\n}\n}\nconst styles = StyleSheet.create({\ncontainer: {\nflex: 1,\njustifyContent: 'center',\nalignItems: 'center',\nbackgroundColor: '#a7a6a9',\n},\nwelcome: {\nfontSize: 30,\ntextAlign: 'center',\nmargin: 20,\n}\n});\nOutput\nSource: facebook.github.io"
            },
            {
              "q":"Tell us some options of storing persisting data in a react native app?",
              "a":"Some popular options are:\nAsync Storage (\"built-in\" to React Native)\nSQLite\nRealm\nFirebase\nMongoDB\nSource: stackoverflow.com"
            },
            {
              "q":"Will this piece of code work?",
              "a":"Problem\n<View>\n<Text>Hey there!</Text>\n<Text style={{ fontsize: 40 }} >Example of inline style</Text>;\n</View>\nNo. An error will be thrown as Text strings must be rendered within Text component. Because here semi-colon in third line will be treated as text, and in React native all texts needs to be rendered inside Text tag.\nSource: github.com"
            },
            {
              "q":"What are the advantages of native apps over hybrid apps?",
              "a":"They work efficiently as they are built for that specific platforms\nNative apps are responsive on all the platform-specific devices\nThey are very fast and the best in the app performance\nNative apps better integrate with mobile hardware\nThey have interactive and intuitive User Interface (UI) and User Experience (UX) as per the user expectations based on specific platforms\nSome of the Native mobile apps work even without the Internet connection\nNative apps are secured and reliable\nThey can easily access or utilize the other device-specific capabilities like GPS, Camera, Contacts, etc.\nSource: www.quora.com"
            },
            {
              "q":"What are Refs used for in React Native?",
              "a":"Refs provide you direct access to a DOM element or a components instance.\nSource: github.com"
            },
            {
              "q":"What are the types of data that control a component?",
              "a":"There are two types of data that control a component: props and state.\nprops are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use state.\nSource: facebook.github.io"
            },
            {
              "q":"What does the Gesture Responder System do?",
              "a":"The gesture responder system manages the lifecycle of gestures in an app.\nSource: facebook.github.io"
            },
            {
              "q":"What determines the size of a component and what are the ways?",
              "a":"The height and width determine the size of component on the screen.\nTwo different ways to set height and width. - Fixed Dimensions - Flex Dimensions\nSource: facebook.github.io"
            },
            {
              "q":"What are some ways of styling a react native component?",
              "a":"We can use:\nInline styling\nStyleSheet\nStyled Components\nSource: facebook.github.io"
            },
            {
              "q":"What are components?",
              "a":"Components are the building blocks of any React application.\nComponents let you split the UI into independent, reusable pieces, and think about each piece in isolation.\nReact Native provides a number of built-in components. Some are:- - Basic Components - User Interface - List Views - iOS-specific - Android-specific\nSource: facebook.github.io"
            },
            {
              "q":"When would you use ScrollView over FlatList or vice-versa?",
              "a":"Do you need to render a list of similar items from an array or the data is very big? Use FlatList\nDo you need to render generic content in a scrollable container and the data is small? Use ScrollView\nSource: stackoverflow.com"
            },
            {
              "q":"How is React Native different from ReactJs?",
              "a":"ReactJS React has as its main focus Web Development.\nReact’s virtual DOM is faster than the conventional full refresh model, since the virtual DOM refreshes only parts of the page.\nWe use div, p, span, etc. HTML tags to build the UI of the web application.\nYou can reuse code components in React, saving you a lot of time. (You can in React Native too.)\nAs a business: The rendering of your pages completely, from the server to the browser will improve the SEO of your web app.\nIt improves the debugging speed making your developer’s life easier.\nYou can use hybrid mobile app development, like Cordova or Ionic, to build mobile apps with React, but is more efficiently building mobile apps with React Native from many points.\nReact Native An extension of React, niched on Mobile Development.\nIts main focus is all about Mobile User Interfaces.\niOS & Android are covered.\nReusable React Native UI components & modules allow hybrid apps to render natively.\nWe use View, Text imported from React Native library.\nNo need to overhaul your old app. All you have to do is add React Native UI components into your existing app’s code, without having to rewrite.\nDoesn't use HTML to render the app. Provides alternative components that work in a similar way, so it wouldn't be hard to understand them.\nBecause your code doesn’t get rendered in an HTML page, this also means you won’t be able to reuse any libraries you previously used with React that renders any kind of HTML, SVG or Canvas.\nReact Native is not made from web elements and can’t be styled in the same way.\nSource: stackoverflow.com"
            },
            {
              "q":"What will be the output of following snippet?",
              "a":"Problem\nconst ComponentScreen = () => {\nconst someArray = ['1', '2', '3']\nreturn (\n<View>\n<Text>{someArray}</Text>\n</View>\n)\n}\nexport default ComponentScreen;\n123\nSource: github.com"
            },
            {
              "q":"How do you check if the react native app is in debug or release build?",
              "a":"You can use this command\nif (__DEV__) {\nconsole.log('I am in debug');\n}\nSource: stackoverflow.com"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "React Native is an open-source UI software framework created by Meta Platforms, Inc. It is used to develop applications for Android, Android TV, iOS, macOS, tvOS, Web, Windows and UWP by enabling developers to use the React framework along with native platform capabilities",
          "icon": "assets/icons/web_mobile/react.png"
        },
        {
          "sub_category_name":"Reactive Programming",
          "junior_level":[
            {
              "q":"What is Reactive Programming?",
              "a":"Reactive programming is programming with asynchronous data streams. Event buses or your typical click events are really an asynchronous event stream, on which you can observe and do some side effects. Reactive is that idea on steroids. You are able to create data streams of anything, not just from click and hover events. Streams are cheap and ubiquitous, anything can be a stream: variables, user inputs, properties, caches, data structures, etc. For example, imagine your Twitter feed would be a data stream in the same fashion that click events are. You can listen to that stream and react accordingly."
            },
            {
              "q":"What is Stream?",
              "a":"A stream is a sequence of ongoing events ordered in time. It can emit three different things: a value (of some type), an error, or a \"completed\" signal."
            },
            {
              "q":"What is the Reactive Manifesto?",
              "a":"The Reactive Manifesto is a document that defines the core principles of reactive programming. It was first released in 2013 by a group of developers led by a man called Jonas Boner. The Reactive Manifesto underpins the principles of reactive programming."
            },
            {
              "q":"What Are Some Advantages of Reactive Programming?",
              "a":"Here’s a short list of advantages :\navoid “callback hell”\na lot simpler to do async / threaded work\na lot of operators that simplify work\nvery simple to compose streams of data\ncomplex threading becomes very easy\nyou end up with a more cleaner, readable code base\neasy to implement back-pressure"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computing, reactive programming is a declarative programming paradigm concerned with data streams and the propagation of change.",
          "icon": "assets/icons/web_mobile/reactive_programming.png"
        },
        {
          "sub_category_name":"Redis",
          "junior_level":[
            {
              "q":"What is Redis?",
              "a":"Redis, which stands for Remote Dictionary Server, is a fast, open-source, in-memory key-value data store for use as a database, cache, message broker, and queue.\nYou can run atomic operations, like appending to a string; incrementing the value in a hash; pushing an element to a list; computing set intersection, union and difference; or getting the member with highest ranking in a sorted set.\nIn order to achieve performance, Redis works with an in-memory dataset. Depending on your use case, you can persist it either by dumping the dataset to disk every once in a while, or by appending each command to a log. Persistence can be optionally disabled, if you just need a feature-rich, networked, in-memory cache.\nRedis is a popular choice for caching, session management, gaming, leaderboards, real-time analytics, geospatial, ride-hailing, chat/messaging, media streaming, and pub/sub apps."
            },
            {
              "q":"Is Redis just a cache?",
              "a":"Like a cache Redis offers:\nin memory key-value storage\nBut unlike a cash Redis:\nSupports multiple datatypes (strings, hashes, lists, sets, sorted sets, bitmaps, and hyperloglogs)\nIt provides an ability to store cache data into physical storage (if needed).\nSupports pub-sub model\nRedis cache provides replication for high availability (master/slave)\nSupports ultra-fast lua-scripts. Its execution time equals to C commands execution.\nCan be shared across multiple instances of the application (instead of in-memory cache for each app instance)"
            },
            {
              "q":"Does Redis persist data?",
              "a":"Redis supports so-called \"snapshots\". This means that it will do a complete copy of whats in memory at some points in time (e.g. every full hour). When you lose power between two snapshots, you will lose the data from the time between the last snapshot and the crash (doesn't have to be a power outage..). Redis trades data safety versus performance, like most NoSQL-DBs do.\nRedis saves data in one of the following cases:\nautomatically from time to time\nwhen you manually call BGSAVE command\nwhen redis is shutting down\nBut data in redis is not really persistent, because:\ncrash of redis process means losing all changes since last save\nBGSAVE operation can only be performed if you have enough free RAM (the amount of extra RAM is equal to the size of redis DB)"
            },
            {
              "q":"How are Redis pipelining and transaction different?",
              "a":"Pipelining is primarily a network optimization. It essentially means the client buffers up a bunch of commands and ships them to the server in one go. The commands are not guaranteed to be executed in a transaction. The benefit here is saving network round trip time for every command.\nRedis is single threaded so an individual command is always atomic, but two given commands from different clients can execute in sequence, alternating between them for example.\nMulti/exec, however, ensures no other clients are executing commands in between the commands in the multi/exec sequence."
            },
            {
              "q":"What's the advantage of Redis vs using memory?",
              "a":"Redis is a remote data structure server. It is certainly slower than just storing the data in local memory (since it involves socket roundtrips to fetch/store the data). However, it also brings some interesting properties:\nRedis can be accessed by all the processes of your applications, possibly running on several nodes (something local memory cannot achieve).\nRedis memory storage is quite efficient, and done in a separate process. If the application runs on a platform whose memory is garbage collected (node.js, java, etc ...), it allows handling a much bigger memory cache/store. In practice, very large heaps do not perform well with garbage collected languages.\nRedis can persist the data on disk if needed.\nRedis is a bit more than a simple cache: it provides various data structures, various item eviction policies, blocking queues, pub/sub, atomicity, Lua scripting, etc ...\nRedis can replicate its activity with a master/slave mechanism in order to implement high-availability.\nBasically, if you need your application to scale on several nodes sharing the same data, then something like Redis (or any other remote key/value store) will be required."
            },
            {
              "q":"When to use Redis Lists data type?",
              "a":"Redis lists are ordered collections of strings. They are optimized for inserting, reading, or removing values from the top or bottom (aka: left or right) of the list.\nRedis provides many commands for leveraging lists, including commands to push/pop items, push/pop between lists, truncate lists, perform range queries, etc.\nLists make great durable, atomic, queues. These work great for job queues, logs, buffers, and many other use cases."
            },
            {
              "q":"When to use Redis over MongoDB?",
              "a":"It depends on kind of dev team you are and your application needs but some notes when to use Redis is probably a good idea:\nCaching\nCaching using MongoDB simply doesn't make a lot of sense. It would be too slow.\nIf you have enough time to think about your DB design.\nYou can't simply throw in your documents into Redis. You have to think of the way you in which you want to store and organize your data. One example are hashes in Redis. They are quite different from \"traditional\", nested objects, which means you'll have to rethink the way you store nested documents. One solution would be to store a reference inside the hash to another hash (something like key: [id of second hash]). Another idea would be to store it as JSON, which seems counter-intuitive to most people with a *SQL-background. Redis's non-traditional approach requires more effort to learn, but greater flexibility.\nIf you need really high performance.\nBeating the performance Redis provides is nearly impossible. Imagine you database being as fast as your cache. That's what it feels like using Redis as a real database.\nIf you don't care that much about scaling.\nScaling Redis is not as hard as it used to be. For instance, you could use a kind of proxy server in order to distribute the data among multiple Redis instances. Master-slave replication is not that complicated, but distributing you keys among multiple Redis-instances needs to be done on the application site (e.g. using a hash-function, Modulo etc.). Scaling MongoDB by comparison is much simpler."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Redis is an in-memory data structure store, used as a distributed, in-memory key–value database, cache and message broker, with optional durability. Redis supports different kinds of abstract data structures, such as strings, lists, maps, sets, sorted sets, HyperLogLogs, bitmaps, streams, and spatial indices.",
          "icon": "assets/icons/web_mobile/redis.png"
        },
        {
          "sub_category_name":"Redux",
          "junior_level":[
            {
              "q":"Do you need to keep all component states in Redux store?",
              "a":"You need to keep your application state as small as possible. You don't have to push everything in there. Only do it makes a lot of sense to keep something there Or if it makes your life easier when using Dev Tools. But we shouldn't overload its importance too much."
            },
            {
              "q":"What is Redux?",
              "a":"Redux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with ReactJS, or with any other view library. It is tiny (about 2kB) and has no dependencies."
            },
            {
              "q":"What is Flux?",
              "a":"Flux is an application design paradigm used as a replacement for the more traditional mvc pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook used this pattern internally when working with React The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:"
            },
            {
              "q":"What is Redux DevTools?",
              "a":"Redux DevTools is a live-editing time travel environment for redux with hot reloading, action replay, and customizable UI. If you don’t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox."
            },
            {
              "q":"What are reducers in redux?",
              "a":"The reducer is a pure function that takes the previous state and an action, and returns the next state.\n(previousState, action) => newState\nIt's called a reducer because it's the type of function you would pass to Array.prototype.reduce(reducer, ?initialValue). It's very important that the reducer stays pure. Things you should never do inside a reducer:\nMutate its arguments;\nPerform side effects like API calls and routing transitions;\nCall non-pure functions, e.g. Date.now() or Math.random()."
            },
            {
              "q":"What is redux-saga?",
              "a":"redux-saga is a library that aims to make side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better. It is available in NPM as\nnpm install --save redux-saga"
            },
            {
              "q":"How to set initial state in Redux?",
              "a":"You need to pass initial state as second argument to createStore\nconst rootReducer = combineReducers({\ntodos: todos,\nvisibilityFilter: visibilityFilter\n});\nconst initialState = {\ntodos: [{id:123, name:'sudheer', completed: false}]\n};\nconst store = createStore(\nrootReducer,\ninitialState\n);"
            },
            {
              "q":"What is the difference between React context and React redux?",
              "a":"You can use Context in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for. Whereas Redux is much more powerful and provides a large number of features that the Context Api doesn't provide.\nAlso, React Redux uses context internally but it doesn’t expose this fact in the public API. So you should feel much safer using context via React Redux than directly because if it changes, the burden of updating the code will be on React Redux instead developer responsibility."
            },
            {
              "q":"What is Redux Thunk?",
              "a":"Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and getState() as parameters."
            },
            {
              "q":"How to add multiple middlewares to Redux?",
              "a":"You can use applyMiddleware where you can pass each piece of middleware as a new argument. So you just need to pass each piece of middleware you'd like. For example, you can add Redux Thunk and logger middlewares as an argument as below,\nimport { createStore, applyMiddleware } from 'redux'\nconst createStoreWithMiddleware = applyMiddleware(ReduxThunk, logger)(createStore);"
            },
            {
              "q":"What are the features of Redux DevTools?",
              "a":"Below are the major features of Redux devTools 1. Lets you inspect every state and action payload 2. Lets you go back in time by “cancelling” actions 3. If you change the reducer code, each “staged” action will be re-evaluated 4. If the reducers throw, you will see during which action this happened, and what the error was 5. With persistState() store enhancer, you can persist debug sessions across page reloads"
            },
            {
              "q":"How to structure Redux top level directories?",
              "a":"Most of the applications has several top-level directories as below 1. Components Used for “dumb” React components unaware of Redux 2. Containers Used for “smart” React components connected to Redux 3. Actions Used for all action creators, where file name corresponds to part of the app 4. Reducers Used for all reducers, where file name corresponds to state key 5. Store Used for store initialization This structure works well for small and mid-level size apps."
            },
            {
              "q":"What are Redux selectors and Why to use them?",
              "a":"Selectors are functions that take Redux state as an argument and return some data to pass to the component. For example, to get user details from the state:\nconst getUserData = state => state.user.data;"
            },
            {
              "q":"What are the core principles of Redux?",
              "a":"Redux follows three fundamental principles: 1. Single source of truth: The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application. 2. State is ready only: The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state. 3. Changes are made with pure functions: To specify how the state tree is transformed by actions, you write pure reducers(Reducers are just pure functions that take the previous state and an action, and return the next state)."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Redux is an open-source JavaScript library for managing and centralizing application state. It is most commonly used with libraries such as React or Angular for building user interfaces. Similar to Facebook's Flux architecture, it was created by Dan Abramov and Andrew Clark.",
          "icon": "assets/icons/web_mobile/redux.png"
        },
        {
          "sub_category_name":"Ruby",
          "junior_level":[
            {
              "q":"Is there an equivalent of “continue” in Ruby?",
              "a":"Yes, it's called next.\nfor i in 0..5\nif i < 2\nnext\nend\nputs \"Value of local variable is #{i}\"\nend"
            },
            {
              "q":"Which core object includes the \"Kernel\" module?",
              "a":"Object"
            },
            {
              "q":"What is an object?",
              "a":"An instance of a class. To some, it's also the root class in ruby (Object). Classes themselves descend from the Object root class."
            },
            {
              "q":"What can you say about an identifier that begins with a capital letter?",
              "a":"It is a constant."
            },
            {
              "q":"What are rubygems?",
              "a":"rubygems is package manager software for ruby libraries (i.e. gems). The package manager has basic CRUD operations, dependency trees, and supports asynchronous communication between multiple gem servers."
            },
            {
              "q":"What is a class?",
              "a":"Classes hold data, have methods that interact with that data, and are used to instantiate objects.\nclass WhatAreClasses\ndef initialize\n@data = \"I'm instance data of this object. Hello.\"\nend\ndef method\nputs @data.gsub(\"instance\", \"altered\")\nend\nend\nobject = WhatAreClasses.new\nobject.method\n#=> I'm altered data of this object. Hello."
            },
            {
              "q":"What is the highest level in the object model?",
              "a":"BasicObject"
            },
            {
              "q":"Is everything in Ruby an object?",
              "a":"Methods are not objects. Blocks are not objects. Keywords are not objects. However, there exist Method objects and Proc objects, and some keywords refer to objects."
            },
            {
              "q":"Why Ruby is known as a language of flexibility?",
              "a":"Ruby is known as a language of flexibility because it facilitates its author to alter the programming elements. Some specific parts of the language can be removed or redefined. Ruby does not restrict the user. For example, to add two numbers, Ruby allows to use + sign or the word plus. This alteration can be done with Ruby's built-in class Numeric."
            },
            {
              "q":"How might you specify a default value for a hash?",
              "a":"Pass the default values as arguments to ::new on initialization or change the default directly with the method Hash#default. You may also provide a default at the time of query with Hash#fetch."
            },
            {
              "q":"Explain some differences between Ruby and Python",
              "a":"Similarities:\nHigh level language\nSupport multiple platforms\nUse interactive prompt called irb\nServer side scripting language\nDifferences:\nRuby is fully object oriented while Python is not.\nRuby supports EclipseIDE while Python supports multiple IDEs.\nRuby use Mixins while Python doesn't.\nRuby supports blocks, procs and lambdas while Python doesn't."
            },
            {
              "q":"Are instance methods public or private?",
              "a":"They are public by default. You can change their visibility using Module#private, Module#protected, or back again using Module#public."
            },
            {
              "q":"Are class variables inherited?",
              "a":"No. The behavior is different than inheritance. Any alteration of a class variable by a subclass affects that class variable in the superclass and all other subclasses of the superclass."
            },
            {
              "q":"Can you call a private method outside a Ruby class using its object?",
              "a":"Yes, with the help of the send method.\nGiven the class Test:\nclass Test\nprivate\ndef method\np \"I am a private method\"\nend\nend\nWe can execute the private method using send:\n>> Test.new.send(:method)\n\"I am a private method\""
            },
            {
              "q":"There are three ways to invoke a method in ruby. Can you give me at least two?",
              "a":"We are looking for the dot operator (or period operator), the Object#send method, or method(:foo).call\nobject = Object.new\nputs object.object_id\n#=> 282660\nputs object.send(:object_id)\n#=> 282660\nputs object.method(:object_id).call # (Kudos to Ezra)\n#=> 282660"
            },
            {
              "q":"What is the difference between private and protected methods?",
              "a":"A private method can only be called by any instance methods of the defining class or any subclasses and must be invoked in a functional style and not explicitly on self such as with self.my_method. A protected method may be explicitly invoked by any instance of the defining class, and is not restricted to implicit invocation on self."
            },
            {
              "q":"What is the difference between an Instance Variable and a Class Variable?",
              "a":"A class variable is evaluated in reference to the class object created by the enclosing class definition while\nan instance variable is evaluated in reference to self. Instance variables cannot be referenced outside of instance methods."
            },
            {
              "q":"Is Ruby a strongly typed or a weakly typed language?",
              "a":"Strongly typed since an object's type is checked before an operation is performed on it."
            },
            {
              "q":"Explain redo statement in Ruby",
              "a":"Ruby redo statement is used to repeat the current iteration of the loop. The redo statement is executed without evaluating loop's condition."
            },
            {
              "q":"What is duck typing and how does it pertain to Ruby?",
              "a":"That an object may be acted upon even if it isn't the expected type as long as it looks and behaves like the expected object. This is a characteristic of Ruby because the lack of type checking of parameters makes this an effective programming technique."
            },
            {
              "q":"Why are symbols typically used as hash keys instead of strings?",
              "a":"Strings are mutable while symbols are immutable. Though Ruby internally makes an immutable copy of a string when used as a hash key, comparing two symbols is faster than comparing two String objects. This is also a convention."
            },
            {
              "q":"Why might you use #each instead of for/in?",
              "a":"It's the \"Ruby way\" - an example of how Ruby defines methods that mimic natural language concepts. Iterator methods such as #each read more naturally. #each is a block so it defines a new variable scope. for/in depends on the existence of #each which implies that #each is a more fundamental aspect of the language."
            },
            {
              "q":"What is a predicate in the context of Ruby method naming conventions?",
              "a":"A method that answers a question posed by the method invocation or method name. Predicates typically return a boolean.\n$ irb\n> 5.odd?\n=> true\n> 5.even?\n=> false\n> 5.between?(1, 10)\n=> true\n> 5.between?(11, 20)\n=> false"
            },
            {
              "q":"What is the difference between a class variable and a class instance variable?",
              "a":"Class instance variables are instance variables of a class. Class instance variables cannot be used within instance methods."
            },
            {
              "q":"What is a module? Can you tell me the difference between classes and modules?",
              "a":"Modules serve as a mechanism for namespaces.\nmodule ANamespace\nclass AClass\ndef initialize\nputs \"Another object, coming right up!\"\nend\nend\nend\nANamespace::AClass.new\n#=> Another object, coming right up!\nAlso, modules provide as a mechanism for multiple inheritance via mix-ins and cannot be instantiated like classes can.\nmodule AMixIn\ndef who_am_i?\nputs \"An existentialist, that's who.\"\nend\nend\n# String is already the parent class\nclass DeepString < String\n# extend adds instance methods from AMixIn as class methods\nextend AMixIn\nend\nDeepString.who_am_i?\n#=> An existentialist, that's who.\nAMixIn.new\n#=> NoMethodError: undefined method ‘new’ for AMixIn:Module"
            },
            {
              "q":"Is Ruby a statically typed or a dynamically typed language?",
              "a":"Dynamically typed since type checking is done at runtime."
            },
            {
              "q":"Why might you use Hash#fetch over Hash#[] when querying values in a hash?",
              "a":"Hash#fetch provides options for handling the case where a key does not exist in the hash."
            },
            {
              "q":"What are two uses of the splat operator?",
              "a":"Explode or expand the elements of an array.\nCollect arguments of a parameter list into an array."
            },
            {
              "q":"What is a DSL and how does it pertain to Ruby?",
              "a":"A Domain Specific Language is an API that allows a developer to solve a problem or represent data more naturally than they might otherwise. The flexible nature of Ruby's syntax and the ability to alias and alter existing methods and classes makes it conducive to creating rich DSL's."
            },
            {
              "q":"What does it mean to coerce an object? Why would you do it?",
              "a":"To coerce an object means to force it into an expected type. One might do this in order to try and force an unknown object type into the expected type or format required by the operation. This is a common practice involved in duck typing."
            },
            {
              "q":"What is the difference between #== and #===?",
              "a":"#== performs the generic comparison while #=== performs case equality comparison and is useful for providing meaningful semantics in case statements."
            },
            {
              "q":"What is the difference between nil and false in Ruby?",
              "a":"nil:\nnil cannot be a value\nnil is returned where there is no predicate\nnil is not a boolean data type\nnil is an object of nilclass\nfalse:\nfalse can be a value\nin case of a predicate, true or false is returned by a method\nfalse is a boolean data type\nfalse is an object of falseclass"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Ruby is an interpreted, high-level, general-purpose programming language which supports multiple programming paradigms. It was designed with an emphasis on programming productivity and simplicity. In Ruby, everything is an object, including primitive data types",
          "icon": "assets/icons/web_mobile/ruby.png"
        },
        {
          "sub_category_name":"Ruby on Rails",
          "junior_level":[
            {
              "q":"What Is ORM In Rails?",
              "a":"ORM tends for Object-Relationship-Model, where Classes are mapped to table in the database, and Objects are directly mapped to the rows in the table."
            },
            {
              "q":"Explain what is rake in Rails?",
              "a":"Rake is a Ruby Make; it is a Ruby utility that substitutes the Unix utility ‘make’, and uses a ‘Rakefile’ and ‘.rake files’ to build up a list of tasks. In Rails, Rake is used for normal administration tasks like migrating the database through scripts, loading a schema into the database, etc."
            },
            {
              "q":"Explain what is Ruby on Rails?",
              "a":"Ruby: It is an object-oriented programming language inspired by PERL and Python\nRails: It is a framework used for building web applications"
            },
            {
              "q":"Mention what is Rails Migration?",
              "a":"Rails Migration enables Ruby to make changes to the database schema, making it possible to use a version control system to leave things synchronized with the actual code."
            },
            {
              "q":"Explain what is ORM (Object-Relationship-Model) in Rails?",
              "a":"ORM or Object Relationship Model in Rails indicate that your classes are mapped to the table in the database, and objects are directly mapped to the rows in the table."
            },
            {
              "q":"Explain what is the role of sub-directory app/controllers and app/helpers?",
              "a":"App/controllers: A web request from the user is handled by the Controller. The controller sub-directory is where Rails looks to find controller classes\nApp/helpers: The helper’s sub-directory holds any helper classes used to assist the view, model and controller classes."
            },
            {
              "q":"Explain what is Rails Active Record in Ruby on Rails?",
              "a":"Rails active record is the Object/Relational Mapping (ORM) layer supplied with Rails. It follows the standard ORM model as\nTable map to classes\nRows map to objects\nColumns map to object attributes"
            },
            {
              "q":"Mention what are the limits of Ruby on Rails?",
              "a":"Ruby on Rails has been designed for creating a CRUD web application using MVC. Some of the features that Rails does not support include:\nForeign key in databases\nLinking to multiple database at once\nSoap web services\nConnection to multiple database servers at once"
            },
            {
              "q":"Mention what is the role of Rails Controller?",
              "a":"The Rails controller is the logical center of the application. It facilitates the interaction between the users, views, and the model. It also performs other activities like\nIt is capable of routing external requests to internal actions. It handles URL extremely well\nIt regulates helper modules, which extend the capabilities of the view templates without bulking of their code\nIt regulates sessions; that gives users the impression of an ongoing interaction with our applications"
            },
            {
              "q":"What is the use of load and require in Ruby?",
              "a":"You use load() to execute code\nuse require() to import libraries."
            },
            {
              "q":"What Do You Mean By Render And Redirect_to?",
              "a":"render causes rails to generate a response whose content is provided by rendering one of your templates. Means, it will direct goes to view page.\nredirect_to generates a response that, instead of delivering content to the browser, just tells it to request another url. Means it first checks actions in controller and then goes to view page."
            },
            {
              "q":"What Are Helpers And How To Use Helpers In ROR?",
              "a":"Helpers are modules that provide methods which are automatically usable in your view. They provide shortcuts to commonly used display code and a way for you to keep the programming out of your views. The purpose of a helper is to simplify the view."
            },
            {
              "q":"What Are The Various Components Of Rail?",
              "a":"Action Pack: Action Pack is a single gem that contains Action Controller, Action View and Action Dispatch. The \"VC\" part of \"MVC\".\nAction Controller: Action Controller is the component that manages the controllers in a Rails application. The Action Controller framework processes incoming requests to a Rails application, extracts parameters, and dispatches them to the intended action.\nAction View: Action View manages the views of your Rails application. It can create both HTML and XML output by default. Action View manages rendering templates, including nested and partial templates, and includes built-in AJAX support.\nAction Dispatch: Action Dispatch handles routing of web requests and dispatches them as you want, either to your application or any other Rack application. Rack applications are a more advanced topic and are covered in a separate guide called Rails on Rack.\nAction Mailer: Action Mailer is a framework for building e-mail services. You can use Action Mailer to receive and process incoming email and send simple plain text or complex multipart emails based on flexible templates.\nActive Model: Active Model provides a defined interface between the Action Pack gem services and Object Relationship Mapping gems such as Active Record. Active Model allows Rails to utilize other ORM frameworks in place of Active Record if your application needs this.\nActive Record: Active Record are like Object Relational Mapping (ORM), where classes are mapped to table, objects are mapped to columns and object attributes are mapped to data in the table.\nActive Resource: Active Resource provides a framework for managing the connection between business objects and RESTful web services. It implements a way to map web-based resources to local objects with CRUD semantics.\nActive Support: Active Support is an extensive collection of utility classes and standard Ruby library extensions that are used in Rails, both by the core code and by your applications."
            },
            {
              "q":"How Is Visibility Of Methods Changed In Ruby (encapsulation)?",
              "a":"By applying the access modifier:\nPublic,\nPrivate and\nProtected"
            },
            {
              "q":"What do you mean by the term Scaffolding and what sort of advantages the Ruby can offer when it comes to same?",
              "a":"While developing the projects, the users often have to write codes in the early stage of development. These codes help building the application in a very reliable manner and quickly and also, a close eye can be kept on the working of some major components with this approach. In Ruby, the scaffolding is done automatically and the users are free to concentrate on the core development only from the first day of development."
            },
            {
              "q":"What Is MVC? And How It Works?",
              "a":"MVC tends for Model-View-Controller, used by many languages like PHP, Perl, Python etc. The flow goes like this:\nRequest first comes to the controller, controller finds and appropriate view and interacts with model, model interacts with your database and send the response to controller then controller based on the response give the output parameter to view."
            },
            {
              "q":"Explain how you define Instance Variable, Global Variable and Class Variable in Ruby?",
              "a":"Ruby Instance variable begins with — @\nRuby Class variables begin with — @@\nRuby Global variables begin with — $"
            },
            {
              "q":"How Many Types Of Relationships Does A Model Has?",
              "a":"has_one\nbelongs_to\nhas_many\nhas_many :through"
            },
            {
              "q":"Mention what are the positive aspects of Rails?",
              "a":"Rails provides many features like:\nMeta-programming: Rails uses code generation but for heavy lifting it relies on meta-programming. Ruby is considered as one of the best language for Meta-programming.\nActive Record: It saves object to the database through Active Record Framework. The Rails version of Active Record identifies the column in a schema and automatically binds them to your domain objects using metaprogramming\nScaffolding: Rails have an ability to create scaffolding or temporary code automatically\nConvention over configuration: Unlike other development framework, Rails does not require much configuration, if you follow the naming convention carefully\nThree environments: Rails comes with three default environment testing, development, and production.\nBuilt-in-testing: It supports code called harness and fixtures that make test cases to write and execute."
            },
            {
              "q":"Mention what is the difference between a gem and a plugin in Ruby?",
              "a":"Gem: A gem is a just ruby code. It is installed on a machine, and it’s available for all ruby applications running on that machine.\nPlugin: Plugin is also ruby code, but it is installed in the application folder and only available for that specific application."
            },
            {
              "q":"How Many Types Of Associations Relationships Does A Model Have?",
              "a":"When you have more than one model in your rails application, you would need to create connection between those models. You can do this via associations. Active Record supports three types of associations:\none-to-one: A one-to-one relationship exists when one item has exactly one of another item. For example, a person has exactly one birthday or a dog has exactly one owner.\none-to-many: A one-to-many relationship exists when a single object can be a member of many other objects. For instance, one subject can have many books.\nmany-to-many: A many-to-many relationship exists when the first object is related to one or more of a second object, and the second object is related to one or many of the first object.\nYou indicate these associations by adding declarations to your models:\nhas_one,\nhas_many,\nbelongs_to,\nhas_and_belongs_to_many"
            },
            {
              "q":"Explain what is a class library in Ruby?",
              "a":"Ruby class libraries consist of a variety of domains, such as thread programming, data types, various domains, etc. These classes give flexible capabilities at a high level of abstraction, giving you the ability to create powerful Ruby scripts useful in a variety of problem domains. The following domains which have relevant class libraries are,\nGUI programming\nNetwork programming\nCGI Programming\nText processing"
            },
            {
              "q":"List out what can Rails Migration do?",
              "a":"Rails Migration can do following things\nCreate table\nDrop table\nRename table\nAdd column\nRename column\nChange column\nRemove column and so on"
            },
            {
              "q":"What Is The Difference Between Nil And False In Ruby?",
              "a":"False is a boolean datatype, Nil is not a data type it have object_id 4."
            },
            {
              "q":"Mention what is the difference in scope for these two variables: @@name and @name?",
              "a":"The difference in scope for these two variables is that:\n@@name is a class variable\n@name is an instance variable"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License. Rails is a model–view–controller framework, providing default structures for a database, a web service, and web pages.",
          "icon": "assets/icons/web_mobile/ruby_onrails.png"
        },
        {
          "sub_category_name":"Testing",
          "junior_level":[
            {
              "q":"What is the difference between load and stress testing?",
              "a":"A load test is usually conducted to understand the behaviour of the system under a specific expected load. This load can be the expected concurrent number of users on the application performing a specific number of transactions within the set duration. This test will give out the response times of all the important business critical transactions.\nA stress testing instead is performed to understand the upper limits of capacity within the system. This kind of test is done to determine the system's robustness in terms of extreme load and helps application administrators to determine if the system will perform sufficiently if the current load goes well above the expected maximum."
            },
            {
              "q":"What is Load Testing?",
              "a":"Load testing measures system performance as the workload increases. That workload could mean concurrent users or transactions.The system is monitored to measure response time and system staying power as workload increases. That workload falls within the parameters of normal working conditions."
            },
            {
              "q":"Difference between acceptance test and functional test?",
              "a":"Functional testing: This is a verification activity; did we build a correctly working product? Does the software meet the business requirements? A functional test verifies that the product actually works as you (the developer) think it does.\nAcceptance testing: This is a validation activity; did we build the right thing? Is this what the customer really needs? Acceptance tests verify the product actually solves the problem it was made to solve. This can best be done by the user (customer), for instance performing his/her tasks that the software assists with."
            },
            {
              "q":"Name some performance testing steps",
              "a":"Some of the performance testing steps are:\nIdentify the testing environment\nIdentify performance metrics\nPlan and design performance tests\nConfigure the test environment\nImplement your test design\nExecute tests\nAnalyze, report, retest"
            },
            {
              "q":"What is profiling?",
              "a":"Profiling measures how long various parts of the code take to run. Profilers are implemented a lot like debuggers too, except that rather than allowing you to stop the program and poke around, they simply let it run and keep track of how much time gets spent in every part of the program."
            },
            {
              "q":"What is the difference between unit tests and functional tests?",
              "a":"Unit Test - testing an individual unit, such as a method (function) in a class, with all dependencies mocked up.\nFunctional Test - AKA Integration Test, testing a slice of functionality in a system. This will test many methods and may interact with dependencies like Databases or Web Services."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Software testing is the act of examining the artifacts and the behavior of the software under test by validation and verification. Software testing can also provide an objective, independent view of the software to allow the business to appreciate and understand the risks of software implementation.",
          "icon": "assets/icons/web_mobile/testing.png"
        },
        {
          "sub_category_name":"Spring",
          "junior_level":[
            {
              "q":"What is Spring?",
              "a":"Spring is an open source development framework for enterprise Java. The core features of the Spring Framework can be used in developing any Java application, but there are extensions for building web applications on top of the Java EE platform. Spring framework targets to make J2EE development easier to use and promote good programming practice by enabling a POJO-based (Plain Old Java Object) programming model."
            },
            {
              "q":"What is default scope of bean in Spring framework?",
              "a":"The default scope of bean is Singleton for Spring framework."
            },
            {
              "q":"What do you mean by Bean wiring ?",
              "a":"The act of creating associations between application components (beans) within the Spring container is referred to as Bean wiring."
            },
            {
              "q":"What is Spring Security?",
              "a":"Spring Security is a separate module of the Spring framework that focuses on providing authentication and authorization methods in Java applications. It also takes care of most of the common security vulnerabilities such as CSRF attacks.\nTo use Spring Security in web applications, you can get started with a simple annotation: @EnableWebSecurity."
            },
            {
              "q":"What does a bean definition contain?",
              "a":"The bean definition contains the information called configuration metadata which is needed for the container to know the followings −\nHow to create a bean\nBean's lifecycle details\nBean's dependencies"
            },
            {
              "q":"What is Spring Boot?",
              "a":"Spring Boot is a project that provides a pre-configured set of frameworks to reduce boilerplate configuration so that you can have a Spring application up and running with the smallest amount of code."
            },
            {
              "q":"What is the DispatcherServlet and what is it used for?",
              "a":"The DispatcherServlet is an implementation of the Front Controller design pattern that handles all incoming web request to a Spring MVC application. A Front Controller pattern (see Enterprise application design pattern) is a common pattern in web applications whose job is to receive all request and route it to different components of the application for actual processing.\nIn Spring MVC, DispatcherServlet is used for finding the correct Controller to process a request, which it does with the help of handler mapping, e.g. the @RequestMapping annotation."
            },
            {
              "q":"Do you need spring-mvc.jar in your classpath or is it part of spring-core?",
              "a":"The spring-mvc.jar is not part of spring-core, which means that if you want to use Spring MVC framework in your Java project, you must include spring-mvc.jar in your application's classpath. In a Java web application, spring-mvc.jar is usually placed inside the /WEB-INF/lib folder."
            },
            {
              "q":"What are benefits of using Spring?",
              "a":"Following is the list of few of the great benefits of using Spring Framework:\nLightweight − Spring is lightweight when it comes to size and transparency. The basic version of spring framework is around 2MB.\nInversion of control (IOC) − Loose coupling is achieved in spring using the technique Inversion of Control. The objects give their dependencies instead of creating or looking for dependent objects.\nAspect oriented (AOP) − Spring supports Aspect oriented programming and enables cohesive development by separating application business logic from system services.\nContainer − Spring contains and manages the life cycle and configuration of application objects.\nMVC Framework − Spring's web framework is a well-designed web MVC framework, which provides a great alternative to web frameworks such as Struts or other over-engineered or less popular web frameworks.\nTransaction Management − Spring provides a consistent transaction management interface that can scale down to a local transaction (using a single database, for example) and scale up to global transactions (using JTA, for example).\nException Handling − Spring provides a convenient API to translate technology-specific exceptions (thrown by JDBC, Hibernate, or JDO, for example) into consistent, unchecked exceptions."
            },
            {
              "q":"What in the world are Spring beans?",
              "a":"Spring beans are just object instances that are managed by the Spring container, namely, they are created and wired by the framework and put into a \"bag of objects\" (the container) from where you can get them later.\nThe \"wiring\" part there is what dependency injection is all about, what it means is that you can just say \"I will need this thing\" and the framework will follow some rules to get you the proper instance."
            },
            {
              "q":"What is the purpose of the Core Container module?",
              "a":"The core container provides the essential functionality of the Spring framework. A primary component of the core container is the BeanFactory, an implementation of the Factory pattern. The BeanFactory applies the Inversion of Control (IOC) pattern to separate an application's configuration and dependency specification from the actual application code."
            },
            {
              "q":"What is Application Context?",
              "a":"On the surface, an application context is the same as a bean factory. Both load bean definitions, wire beans together, and dispense beans upon request. But it also provides:\nA means for resolving text messages, including support for internationalization\nA generic way to load file resources\nEvents to beans that are registered as listeners"
            },
            {
              "q":"How to integrate Java Server Faces (JSF) with Spring?",
              "a":"JSF and Spring do share some of the same features, most noticeably in the area of IOC services. By declaring JSF managed-beans in the faces-config.xml configuration file, you allow the FacesServlet to instantiate that bean at startup. Your JSF pages have access to these beans and all of their properties.We can integrate JSF and Spring in two ways:\nDelegatingVariableResolver: Spring comes with a JSF variable resolver that lets you use JSF and Spring together. The DelegatingVariableResolver will first delegate value lookups to the default resolver of the underlying JSF implementation, and then to Spring's 'business context' WebApplicationContext. This allows one to easily inject dependencies into one's JSF-managed beans.\nFacesContextUtils: custom VariableResolver works well when mapping one's properties to beans in faces-config.xml, but at times one may need to grab a bean explicitly. The FacesContextUtils class makes this easy. It is similar to WebApplicationContextUtils, except that it takes a FacesContext parameter rather than a ServletContext parameter.\nApplicationContext ctx = FacesContextUtils.getWebApplicationContext(FacesContext.getCurrentInstance());"
            },
            {
              "q":"What is Spring MVC framework?",
              "a":"The Spring web MVC framework provides model-view-controller architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between these elements."
            },
            {
              "q":"How is event handling done in Spring?",
              "a":"Event handling in the ApplicationContext is provided through the ApplicationEvent class and ApplicationListener interface. So if a bean implements the ApplicationListener, then every time an ApplicationEvent gets published to the ApplicationContext, that bean is notified."
            },
            {
              "q":"What are ORM's Spring supports?",
              "a":"Spring supports the following ORM's:\nHibernate\niBatis\nJPA (Java Persistence API)\nTopLink\nJDO (Java Data Objects)\nOJB"
            },
            {
              "q":"What are the different modules in Spring framework?",
              "a":"Following are the modules of the Spring framework:\nCore module\nBean module\nContext module\nExpression Language module\nJDBC module\nORM module\nOXM module\nJava Messaging Service(JMS) module\nTransaction module\nWeb module\nWeb-Servlet module\nWeb-Struts module\nWeb-Portlet module"
            },
            {
              "q":"Explain the @Controller annotation.",
              "a":"The @Controller annotation indicates that a particular class serves the role of a controller. Spring does not require you to extend any controller base class or reference the Servlet API."
            },
            {
              "q":"How do you provide configuration metadata to the Spring Container?",
              "a":"There are following three important methods to provide configuration metadata to the Spring Container −\nXML based configuration file.\nAnnotation-based configuration\nJava-based configuration"
            },
            {
              "q":"What are Spring beans?",
              "a":"The objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container, for example, in the form of XML <bean/> definitions."
            },
            {
              "q":"Explain @RequestMapping annotation.",
              "a":"@RequestMapping annotation is used to map a URL to either an entire class or a particular handler method."
            },
            {
              "q":"How does the scope Prototype work?**",
              "a":"Scope prototype means that every time you call for an instance of the Bean, Spring will create a new instance and return it. This differs from the default singleton scope, where a single object instance is instantiated once per Spring IoC container."
            },
            {
              "q":"What is the Model?",
              "a":"Model is a reference to encapsulate the data or output for rendering. Model is always created and passed to the view in Spring MVC. If a mapped controller method has Model as a method parameter, then a model instance is automatically injected by Spring framework to that method."
            },
            {
              "q":"What is a View and what's the idea behind supporting different types of View?",
              "a":"A View is an interface in Spring MVC application whose implementations are responsible for rendering context and exposing the model. A single view exposes multiple model attributes. Views in Spring MVC can be beans.\nThey are likely to be instantiated as beans by a ViewResolver. As this interface is stateless, view implementations should be thread-safe. By using ViewResolver, a logical name of view can be resolved into different types of View implementation, e.g. JstlView for displaying JSP or other view implementations for FreeMarker and Velocity."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "The Spring Framework is an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE platform.",
          "icon": "assets/icons/web_mobile/spring.png"
        },
        {
          "sub_category_name":"SQL",
          "junior_level":[
            {
              "q":"Define a temp table",
              "a":"In a nutshell, a temp table is a temporary storage structure. What does that mean? Basically, you can use a temp table to store data temporarily so you can manipulate and change it before it reaches its destination format."
            },
            {
              "q":"What is a view?",
              "a":"A view is simply a virtual table that is made up of elements of multiple physical or “real” tables. Views are most commonly used to join multiple tables together, or control access to any tables existing in background server processes."
            },
            {
              "q":"What is PRIMARY KEY?",
              "a":"A PRIMARY KEY constraint is a unique identifier for a row within a database table. Every table should have a primary key constraint to uniquely identify each row and only one primary key constraint can be created for each table. The primary key constraints are used to enforce entity integrity."
            },
            {
              "q":"What is blocking?",
              "a":"SQL Server blocking occurs when one connection holds a lock on a record and other connection tries to fetch the record or update the record."
            },
            {
              "q":"What is Normalization?",
              "a":"It is the process of eliminating redundant data and maintaining data dependencies."
            },
            {
              "q":"What is the difference between WHERE clause and HAVING clause?",
              "a":"WHERE clause can only be applied on a static non-aggregated column\nwe will need to use HAVING for aggregated columns."
            },
            {
              "q":"What is DEFAULT?",
              "a":"Default allows to add values to the column if the value of that column is not set. Default can be defined on number and datetime fields. They cannot be defined on timestamp and IDENTITY columns."
            },
            {
              "q":"What is FOREIGN KEY?",
              "a":"A FOREIGN KEY constraint prevents any actions that would destroy links between tables with the corresponding data values. A foreign key in one table points to a primary key in another table. Foreign keys prevent actions that would leave rows with foreign key values when there are no primary keys with that value. The foreign key constraints are used to enforce referential integrity."
            },
            {
              "q":"What’s the difference between a local temp table and a global temp table?",
              "a":"Local tables are accessible to a current user connected to the server. These tables disappear once the user has disconnected from the server.\nGlobal temp tables, on the other hand, are available to all users regardless of the connection. These tables stay active until all the global connections are closed."
            },
            {
              "q":"How can a column with a default value be added to an existing table?",
              "a":"Consider:\nALTER TABLE SomeTable\nADD SomeCol Bit NULL --Or NOT NULL.\nCONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.\nDEFAULT (0)--Optional Default-Constraint.\nWITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records.\nKeep in mind that if the column is nullable, then null will be the value used for existing rows."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "SQL is a domain-specific language used in programming and designed for managing data held in a relational database management system, or for stream processing in a relational data stream management system.",
          "icon": "assets/icons/web_mobile/sql.png"
        },
        {
          "sub_category_name":"T-SQL",
          "junior_level":[
            {
              "q":"Is it possible to rename a database? If so, how would you rename the database?",
              "a":"Yes - Databases can be renamed in similar manners as other relational database objects.\nIt is possible to rename a database by one of these options:\nIssue the sp_renamedb system stored procedure.\nIssue the sp_rename system stored procedure and specify 'database' as the parameter.\nUse Management Studio by right clicking on the database and selecting the 'Rename' option."
            },
            {
              "q":"Mention what is TOP in TSQL?",
              "a":"TOP limits the rows returned in a query result set to a specified number of rows or percentage of rows in SQL Server. When TOP is used in combination with the ORDER BY clause, the result set is limited to the first N number of ordered rows. Otherwise, it retrieves the first N number of rows in an undefined order."
            },
            {
              "q":"What is TSQL Window functions?",
              "a":"A window function is a function that's applied to a set of rows defined by a window descriptor and returns a single value for each row from the underlying query. The purpose of the window descriptor is to define the set of rows that the function should apply to. You provide the window specification using a clause called OVER.\nSELECT empid, ordermonth, qty,\nSUM(qty) OVER(PARTITION BY empid\nORDER BY ordermonth\nROWS BETWEEN UNBOUNDED PRECEDING\nAND CURRENT ROW) AS runqty\nFROM Sales.EmpOrders;"
            },
            {
              "q":"Explain what are the differences between SQL and T-SQL?",
              "a":"SQL is a query language to operate on sets.\nTSQL is a proprietary procedural language used by Microsoft in SQL Server.\nT-SQL adds a number of features that are not available in SQL.\nThis includes procedural programming elements and a local variable to provide more flexible control of how the application flows. A number of functions were also added to T-SQL to make it more powerful; functions for mathematical operations, string operations, date and time processing, and the like. These additions make T-SQL comply with the Turing completeness test, a test that determines the universality of a computing language. SQL is not Turing complete and is very limited in the scope of what it can do.\nAnother significant difference between T-SQL and SQL is the changes done to the DELETE and UPDATE commands that are already available in SQL. With T-SQL, the DELETE and UPDATE commands both allow the inclusion of a FROM clause which allows the use of JOINs. This simplifies the filtering of records to easily pick out the entries that match a certain criteria unlike with SQL where it can be a bit more complicated."
            },
            {
              "q":"What are the new error handling commands introduced with SQL Server 2005 and beyond?",
              "a":"The new commands are TRY and CATCH.\nAlthough they do not directly replace any specific command, in many respects the TRY and CATCH has been used over the RAISERROR command.\nThe TRY block is for the business logic and the CATCH logic is for capturing the error."
            },
            {
              "q":"Could you explain the difference between Primary Key and Unique Index?",
              "a":"The differences between the two are:\nColumn(s) that make the Primary Key of a table cannot be NULL since by definition, the Primary Key cannot be NULL since it helps uniquely identify the record in the table. The column(s) that make up the unique index can be nullable. A note worth mentioning over here is that different RDBMS treat this differently –> while SQL Server and DB2 do not allow more than one NULL value in a unique index column, Oracle allows multiple NULL values. That is one of the things to look out for when designing/developing/porting applications across RDBMS.\nThere can be only one Primary Key defined on the table where as you can have many unique indexes defined on the table (if needed).\nAlso, in the case of SQL Server, if you go with the default options then a Primary Key is created as a clustered index while the unique index (constraint) is created as a non-clustered index. This is just the default behavior though and can be changed at creation time, if needed."
            },
            {
              "q":"Name 5 commands that can be used to manipulate text in T-SQL code",
              "a":"CHARINDEX( findTextData, textData, [startingPosition] ) - Returns the starting position of the specified expression in a character string. The starting position is optional.\nLEFT( character_expression , integer_expression ) - Returns the left part of a character string with the specified number of characters.\nLEN( textData ) - Returns integer value of the length of the string, excluding trailing blanks.\nLOWER ( character_expression ) - Returns a character expression after converting uppercase character data to lowercase.\nLTRIM( textData) - Removes leading blanks. PATINDEX( findTextData, textData ) - Returns integer value of the starting position of text found in the string.\nREPLACE( textData, findTextData, replaceWithTextData ) - Replaces occurrences of text found in the string with a new value.\nREPLICATE( character_expression , integer_expression ) - Repeats a character expression for a specified number of times.\nREVERSE( character_expression ) - Returns the reverse of a character expression.\nRTRIM( textData) - Removes trailing blanks. SPACE( numberOfSpaces ) - Repeats space value specified number of times.\nSTUFF( textData, start , length , insertTextData ) - Deletes a specified length of characters and inserts another set of characters at a specified starting point.\nSUBSTRING( textData, startPosition, length ) - Returns portion of the string.\nUPPER( character_expression ) - Returns a character expression with lowercase character data converted to uppercase."
            },
            {
              "q":"When should I use primary key or index?",
              "a":"Basically, a primary key is (at the implementation level) a special kind of index. Specifically:\nA table can have only one primary key, and with very few exceptions, every table should have one.\nA primary key is implicitly UNIQUE - you cannot have more than one row with the same primary key, since its purpose is to uniquely identify rows.\nA primary key can never be NULL, so the row(s) it consists of must be NOT NULL\nA table can have multiple indexes, and indexes are not necessarily UNIQUE. Indexes exist for two reasons:\nTo enforce a uniquness constraint (these can be created implicitly when you declare a column UNIQUE)\nTo improve performance. Comparisons for equality or \"greater/smaller than\" in WHERE clauses, as well as JOINs, are much faster on columns that have an index. But note that each index decreases update/insert/delete performance, so you should only have them where they're actually needed."
            },
            {
              "q":"Mention what are the limitations of IDENTITY column?",
              "a":"The limitations of the IDENTITY column is that column values cannot be updated once generated. Also, it may require to specify this column as a PRIMARY KEY, as such, there is a possibility of duplication of values within a table. Identity property is applicable for integer based column only."
            },
            {
              "q":"What are the three ways that Dynamic SQL can be issued?",
              "a":"Writing a query with parameters.\nUsing EXEC.\nUsing sp_executesql."
            },
            {
              "q":"What are the two commands to remove all of the data from a table? Are there any implications with the specific commands?",
              "a":"TRUNCATE removes all rows from a table. The operation cannot be rolled back and no triggers will be fired. As such, TRUCATE is faster and doesn't use as much undo space as a DELETE.\nThe DELETE command is used to remove rows from a table. A WHERE clause can be used to only remove some rows. If no WHERE condition is specified, all rows will be removed. After performing a DELETE operation you need to COMMIT or ROLLBACK the transaction to make the change permanent or to undo it. Note that this operation will cause all DELETE triggers on the table to fire."
            },
            {
              "q":"Mention what is subquery?",
              "a":"A subquery is a query that is nested inside a SELECT, INSERT, UPDATE, or DELETE statement, or inside another subquery.\nConsider:\nSELECT Ord.SalesOrderID, Ord.OrderDate,\n(SELECT MAX(OrdDet.UnitPrice)\nFROM Sales.SalesOrderDetail AS OrdDet\nWHERE Ord.SalesOrderID = OrdDet.SalesOrderID) AS MaxUnitPrice\nFROM Sales.SalesOrderHeader AS Ord;"
            },
            {
              "q":"Mention what is OFFSET-FETCH filter in tsql?",
              "a":"In TSQL OFFSET-FETCH filter is designed similar to TOP but with an extra element. It helps to define how many rows you want to skip before specifying how many rows you want to filter."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Transact-SQL is Microsoft's and Sybase's proprietary extension to the SQL used to interact with relational databases.",
          "icon": "assets/icons/web_mobile/tsql.png"
        },
        {
          "sub_category_name":"TypeScript",
          "junior_level":[
            {
              "q":"What is Typescript and why one should use it?",
              "a":"TypeScript is a free and open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language."
            },
            {
              "q":"What are the benefits of TypeScript?",
              "a":"TypeScript has following benefits.\nIt helps in code structuring.\nUse class based object oriented programming.\nImpose coding guidelines.\nOffers type checking.\nCompile time error checking.\nIntellisense."
            },
            {
              "q":"What is TypeScript and why would I use it in place of JavaScript?",
              "a":"TypeScript is a superset of JavaScript which primarily provides optional static typing, classes and interfaces. One of the big benefits is to enable IDEs to provide a richer environment for spotting common errors as you type the code. For a large JavaScript project, adopting TypeScript might result in more robust software, while still being deployable where a regular JavaScript application would run.\nIn details:\nTypeScript supports new ECMAScript standards and compiles them to (older) ECMAScript targets of your choosing. This means that you can use features of ES2015 and beyond, like modules, lambda functions, classes, the spread operator, destructuring, today.\nJavaScript code is valid TypeScript code; TypeScript is a superset of JavaScript.\nTypeScript adds type support to JavaScript. The type system of TypeScript is relatively rich and includes: interfaces, enums, hybrid types, generics, union and intersection types, access modifiers and much more. TypeScript makes typing a bit easier and a lot less explicit by the usage of type inference.\nThe development experience with TypeScript is a great improvement over JavaScript. The IDE is informed in real-time by the TypeScript compiler on its rich type information.\nWith strict null checks enabled (--strictNullChecks compiler flag) the TypeScript compiler will not allow undefined to be assigned to a variable unless you explicitly declare it to be of nullable type.\nTo use TypeScript you need a build process to compile to JavaScript code. The TypeScript compiler can inline source map information in the generated .js files or create separate .map files. This makes it possible for you to set breakpoints and inspect variables during runtime directly on your TypeScript code.\nTypeScript is open source (Apache 2 licensed, see github) and backed by Microsoft. Anders Hejlsberg, the lead architect of C# is spearheading the project."
            },
            {
              "q":"Explain generics in TypeScript",
              "a":"Generics are able to create a component or function to work over a variety of types rather than a single one.\n/** A class definition with a generic parameter */\nclass Queue<T> {\nprivate data = [];\npush = (item: T) => this.data.push(item);\npop = (): T => this.data.shift();\n}\nconst queue = new Queue<number>();\nqueue.push(0);\nqueue.push(\"1\"); // ERROR : cannot push a string. Only numbers allowed"
            },
            {
              "q":"What are Modules in Typescript?",
              "a":"Modules in Typescript helps in organizing the code. There are 2 types of Modules — Internal and External\nInternal Modules are now replaceable by using Typescript’s namespace.\nExternal Modules used to specify and load dependencies between multiple external js files. If there is only one js file used, then external modules are not relevant."
            },
            {
              "q":"List the built-in types in Typescript",
              "a":"These are also called the primitive types in TypeScript:\nNumber type: it is used to represent number type values and represents double precision floating point values.\nvar variable_name: number;\nString type: it represents a sequence of characters stored as Unicode UTF-16 code. It is the same as JavaScript primitive type.\nvar variable_name: string;\nBoolean type: in Typescript, it is used to represent a logical value. When we use the Boolean type, we get output only in true or false. It is also the same as JavaScript primitive type.\nvar variable_name: bool;\nNull type: it represents a null literal and it is not possible to directly reference the null type value itself.\nvar variable_name:number = null;\nUndefined type: it is the type of undefined literal. This type of built-in type is the sub-type of all the types.\nvar variable_name:number = undefined;"
            },
            {
              "q":"How to call base class constructor from child class in TypeScript?",
              "a":"We can call base class constructor using super()."
            },
            {
              "q":"Do we need to compile TypeScript files and why?",
              "a":"Yes we do. Typescript is just a language Extension browsers can't interpret it. Converting from TypeScript to JavaScript is called compiling. Compiling doesn't mean binary code is created in this case. For this kind of translation, also the term transpilation is used instead of compilation."
            },
            {
              "q":"What is TypeScript and why do we need it?",
              "a":"JavaScript is the only client side language universally supported by all browsers. But JavaScript is not the best designed language. It’s not a class-based object-oriented language, doesn’t support class based inheritance, unreliable dynamic typing and lacks in compile time error checking. And TypeScript addresses all these problems. In other words, TypeScript is an attempt to “fix” JavaScript problems.\nTypeScript is a free and open source programming language developed and maintained by Microsoft. It is a strict superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language. TypeScript is quite easy to learn and use for developers familiar with C#, Java and all strong typed languages. At the end of day “TypeScript is a language that generates plain JavaScript files.”\nAs stated on Typescript official website, “TypeScript lets you write JavaScript the way you really want to. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.” Where “typed” means that it considers the types of variables, parameters and functions."
            },
            {
              "q":"What is \"Decorators\" in TypeScript?",
              "a":"A Decorator is a special kind of declaration that can be attached to a class declaration, method, accessor, property, or parameter. Decorators are functions that take their target as the argument. With decorators we can run arbitrary code around the target execution or even entirely replace the target with a new definition.\nThere are 4 things we can decorate in ECMAScript2016 (and Typescript): constructors, methods, properties and parameters."
            },
            {
              "q":"What is Interface in TypeScript?",
              "a":"One of TypeScript’s core principles is that type-checking focuses on the shape that values have.\nAn interface is a virtual structure that only exists within the context of TypeScript. The TypeScript compiler uses interfaces solely for type-checking purposes.\nWhen you define your interface you’re saying that any object (not an instance of a class) given this contract must be an object containing interfaces properties."
            },
            {
              "q":"What is the difference between Classes and Interfaces in Typescript?",
              "a":"We use classes as object factories. A class defines a blueprint of what an object should look like and act like and then implements that blueprint by initialising class properties and defining methods. Classes are present throughout all the phases of our code.\nUnlike classes, an interface is a virtual structure that only exists within the context of TypeScript. The TypeScript compiler uses interfaces solely for type-checking purposes. Once code is transpiled to its target language, it will be stripped from interfaces.\nA class may define a factory or a singleton by providing initialisation to its properties and implementation to its methods, an interface is simply a structural contract that defines what the properties of an object should have as a name and as a type."
            },
            {
              "q":"How to implement class constants in TypeScript?",
              "a":"In TypeScript, the const keyword cannot be used to declare class properties. Doing so causes the compiler to an error with \"A class member cannot have the 'const' keyword.\" TypeScript 2.0 has the readonly modifier:\nclass MyClass {\nreadonly myReadonlyProperty = 1;\nmyMethod() {\nconsole.log(this.myReadonlyProperty);\n}\n}\nnew MyClass().myReadonlyProperty = 5; // error, readonly"
            },
            {
              "q":"What is getters/setters in TypeScript?",
              "a":"TypeScript supports getters/setters as a way of intercepting accesses to a member of an object. This gives you a way of having finer-grained control over how a member is accessed on each object.\nclass foo {\nprivate _bar:boolean = false;\nget bar():boolean {\nreturn this._bar;\n}\nset bar(theBar:boolean) {\nthis._bar = theBar;\n}\n}\nvar myBar = myFoo.bar; // correct (get)\nmyFoo.bar = true; // correct (set)"
            },
            {
              "q":"Does TypeScript support all object oriented principles?",
              "a":"The answer is YES. There are 4 main principles to Object Oriented Programming:\nEncapsulation,\nInheritance,\nAbstraction, and\nPolymorphism.\nTypeScript can implement all four of them with its smaller and cleaner syntax."
            },
            {
              "q":"When to use interfaces and when to use classes in TypeScript?",
              "a":"If you need/wish to create an instance of perhaps a custom object, whilst getting the benefits of type-checking things such as arguments, return types or generics - a class makes sense.\nIf you’re not creating instances - we have interfaces at our disposal, and their benefit comes from not generating any source code, yet allowing us to somewhat “virtually” type-check our code."
            },
            {
              "q":"How could you check null and undefined in TypeScript?",
              "a":"Just use:\nif (value) {\n}\nIt will evaluate to true if value is not:\nnull\nundefined\nNaN\nempty string ''\n0\nfalse\nTypesScript includes JavaScript rules."
            },
            {
              "q":"Which object oriented terms are supported by TypeScript?",
              "a":"TypeScript supports following object oriented terms:\nModules\nClasses\nInterfaces\nData Types\nMember functions"
            },
            {
              "q":"What are the difference beetween Typescript and JavaScript?",
              "a":"It is an object oriented programming language (not pure).\nHere it is static typing (We can declare a variable in multiple ways). ex: var num : number.\nIt has interfaces.\nIt has optional parameter feature.\nIt has Rest Parameter feature.\nSupports generics.\nSupports Modules\nNumber, string etc. are the interfaces."
            },
            {
              "q":"What is a TypeScript Map file?",
              "a":".map files are source map files that let tools map between the emitted JavaScript code and the TypeScript source files that created it. Many debuggers (e.g. Visual Studio or Chrome's dev tools) can consume these files so you can debug the TypeScript file instead of the JavaScript file."
            },
            {
              "q":"Could we use TypeScript on backend and how?",
              "a":"Typescript doesn’t only work for browser or frontend code, you can also choose to write your backend applications. For example you could choose Node.js and have some additional type safety and the other abstraction that the language brings.\nInstall the default Typescript compiler\nnpm i -g typescript\nThe TypeScript compiler takes options in the shape of a tsconfig.json file that determines where to put built files and in general is pretty similar to a babel or webpack config.\n{\n\"compilerOptions\": {\n\"target\": \"es5\",\n\"module\": \"commonjs\",\n\"declaration\": true,\n\"outDir\": \"build\"\n}\n}\nCompile ts files\ntsc\nRun\nnode build/index.js"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the development of large applications and transpiles to JavaScript.",
          "icon": "assets/icons/web_mobile/ts.png"
        },
        {
          "sub_category_name":"UX Design",
          "junior_level":[
            {
              "q":"Name some basic design elements",
              "a":"The elements of design are:\nLINE – The linear marks made with a pen or brush or the edge created when two shapes meet.\nSHAPE – A shape is a self contained defined area of geometric (squares and circles), or organic (free formed shapes or natural shapes). A positive shape automatically creates a negative shape.\nDIRECTION – All lines have direction – Horizontal, Vertical or Oblique. Horizontal suggests calmness, stability and tranquillity. Vertical gives a feeling of balance, formality and alertness. Oblique suggests movement and action\nSIZE – Size is simply the relationship of the area occupied by one shape to that of another.\nTEXTURE – Texture is the surface quality of a shape – rough, smooth, soft hard glossy etc.\nCOLOUR – Colour is light reflected off objects. Color has three main characteristics: hue or its name (red, green, blue, etc.), value (how light or dark it is), and intensity (how bright or dull it is)."
            },
            {
              "q":"What is user experience (UX) research?",
              "a":"User Experience (UX) research is the process of discovering the behaviors, motivations and needs of your customers through observation, task analysis, and other types of user feedback. Understand the user experience for new products, websites, mobile apps and prototypes. UX research helps brands and organisations accomplish the following:\nUnderstand the user experience for new products, websites, mobile apps and prototypes\nMake informed decisions through the product development process by testing various aspects of product designs\nDiscover, optimise and evaluate the genuine user experience\nUnderstand each user interaction prior to conversion\nNail the design and experience early in a product’s life cycle"
            },
            {
              "q":"What are user research methods?",
              "a":"There are two main types of user research: quantitative (statistics: can be calculated and computed; focuses on numbers and mathematical calculations) and qualitative (insights: concerned with descriptions, which can be observed but cannot be computed).\nQuantitative research is primarily exploratory research and is used to quantify the problem by way of generating numerical data or data that can be transformed into usable statistics. Some common data collection methods include various forms of surveys – online surveys, paper surveys, mobile surveys and kiosk surveys, longitudinal studies, website interceptors, online polls, and systematic observations.\nQualitative user research is a direct assessment of behavior based on observation. It’s about understanding people’s beliefs and practices on their terms. It can involve several different methods including contextual observation, ethnographic studies, interviews, field studies, and moderated usability tests."
            },
            {
              "q":"What are the top UX research methods and when to use them?",
              "a":"Here are some examples of the types of user research performed at each phase of a project.\nCard Sorting: Allows users to group and sort a site’s information into a logical structure that will typically drive navigation and the site’s information architecture. This helps ensure that the site structure matches the way users think.\nContextual Interviews: Enables the observation of users in their natural environment, giving you a better understanding of the way users work.\nFirst Click Testing: A testing method focused on navigation, which can be performed on a functioning website, a prototype, or a wireframe.\nFocus Groups: Moderated discussion with a group of users, allowing insight into user attitudes, ideas, and desires.\nHeuristic Evaluation/Expert Review: A group of usability experts evaluating a website against a list of established guidelines.\nInterviews: One-on-one discussions with users show how a particular user works. They enable you to get detailed information about a user’s attitudes, desires, and experiences.\nParallel Design: A design methodology that involves several designers pursuing the same effort simultaneously but independently, with the intention to combine the best aspects of each for the ultimate solution.\nPersonas: The creation of a representative user based on available data and user interviews. Though the personal details of the persona may be fictional, the information used to create the user type is not.\nPrototyping: Allows the design team to explore ideas before implementing them by creating a mock-up of the site. A prototype can range from a paper mock-up to interactive HTML pages.\nSurveys: A series of questions asked to multiple users of your website that help you learn about the people who visit your site.\nSystem Usability Scale (SUS): SUS is a technology-independent ten-item scale for subjective evaluation of the usability.\nTask Analysis: Involves learning about user goals, including what users want to do on your website, and helps you understand the tasks that users will perform on your site.\nUsability Testing: Identifies user frustrations and problems with a site through one-on-one sessions where a “real-life” user performs tasks on the site being studied.\nUse Cases: Provide a description of how users use a particular feature of your website. They provide a detailed look at how users interact with the site, including the steps users take to accomplish each task."
            },
            {
              "q":"What are the most popular usability methods?",
              "a":"UX researchers have developed many techniques over the years for testing and validating product hypothesis and particular design decisions. The methods range from well-known lab-based usability studies to those that have been more recently developed. In this article, we will explore seven different usability testing methods when you should use them and why.Before you pick a particular testing method, you should have a clear understanding of your target audience, available resources (time and money), and research objectives. This information not only will help you select the relevant testing method but also adjust the questions and tasks for your test participants:\nGuerilla testing is the simplest form of usability testing. Basically, guerrilla testing means going into a public place such as a coffee shop to ask people about your prototype. Test participants are chosen randomly.Guerilla testing works best in the early stages of the product development process.\nUnmoderated remote usability testing occurs remotely without a moderator. It offers quick, robust, and inexpensive user testing results to be used for further analysis. Test participants are asked to complete tasks in their own environment using their own devices and without a moderator present, which leads to the product being used naturally. The cost of unmoderated testing is lower; however, this type of testing offers less detailed testing results. Unmoderated remote usability testing works the best when you need to obtain a large sample to prove critical findings from your initial moderated research.\nContextual inquiry is less a usability testing method and more like an interview/observation method that helps a product team obtain information about the user experience from the real users.This technique is useful for getting rich information about users— their workspace, personal preferences, and habits.\nCard sorting is an excellent method for prioritizing content and features in user interface. The technique is relatively simple—all you need to do is place concepts (content, features) on cards and allow test participants to manipulate the cards into groups and categories.Card sorting is great when you want to optimize your product’s information architecture."
            },
            {
              "q":"What is usability testing?",
              "a":"Usability testing is a method used to evaluate how easy a website is to use. The tests take place with real users to measure how ‘usable’ or ‘intuitive’ a website is and how easy it is for users to reach their goals.The key difference between usability testing and traditional testing (bug testing, acceptance testing etc.) is that usability testing takes place with actual users or customers of the product. Whilst traditional testing might be undertaken by a developer, designer or project manager, usability testing removes any bias by collecting feedback direct from the end user.\nUsability testing can be used in a variety of ways during your project lifecycle. Despite not being able to mimic real life usage, usability testing is still the best method of ensuring your website supports users in achieving their goals quickly and easily. When businesses meet the needs and expectations of their users, they are more likely to develop a successful service."
            },
            {
              "q":"What are the advantages and disadvantages of usability testing?",
              "a":"There are many advantages of usability testing including:\nfeedback direct from the target audience to focus the project team\ninternal debates can be resolved by testing the issue to see how users react to the different options being discussed\nissues and potential problems are highlighted before the product is launched\nThe business advantages of usability testing can be seen at the end of the project:\nit increases the likelihood of usage and repeat usage\nit minimises the risk of the product failing\nusers are better able to reach their goals, which results in the business meeting its targets\nDisadvantages.Usability testing provides many benefits, but there are a few disadvantages in using this methodology, which should be noted. Firstly, testing is not 100% representative of the real life scenario, e.g. a mother will not have her two young children running around like she might have at home. Also, usability testing is mainly qualitative, so does not provide the large samples of feedback that a questionnaire might, but the feedback can be far more accurate and insightful."
            },
            {
              "q":"What are the different types of usability testing?",
              "a":"There are a few different types of usability testing or reasons to conduct usability research:\nComparative Usability Testing. Used to compare the usability of one website with another. Comparative tests are commonly used to compare a website against peer or competitor sites, however it can also be used to compare two designs to establish which provides the best user experience.\nExplorative Usability Testing. Before a new product is released, explorative usability testing can establish what content and functionality a new product should include to meet the needs of its users. Users test a range of different services where they are given realistic scenarios to complete which helps to highlight any gaps in the market that can be taken advantage of and illustrate where to focus design effort."
            },
            {
              "q":"What is the prototyping process?",
              "a":"Prototyping is the 4th step of the design thinking process.Before you determine how you should go about the prototyping process, you have to have identified the users, defined their problem, and brainstormed and selected a proper solution in the form of a product or service. Listed below are the steps in the prototyping methodology:\nIdentify Obstacles .Start by brainstorming with your team to identify any obstacles that may delay or block your prototyping or product designing process. Having these identified prior to designing will allow you to take precautions.\nSelect the Features.You prototype won’t be able to represent all the product features, therefore you might want to select the key features that will help you gather as much feedback from the user as possible.\nSketch Your Design .You can do this on a piece of paper or a diagramming tool like Creately which provides complete libraries for wireframes, UI mockups, flowcharts, mind maps etc.\nShare Your Design .Share your design with partners, stakeholders etc. Ask for their feedback and mark where you need to make modifications to the design based on their requirements.\nContinue to Develop .Apply changes and develop your prototype by adding more features. Once it’s ready, you can share it with your stakeholders, partners, users etc. again for their feedback."
            },
            {
              "q":"The importance of prototyping in designing?",
              "a":"The prototype is an important draft design that precedes the development of the original design layout. It is intended not only to show the structure of the future site, but also the site map, the interrelation of its main pages. Prototyping is a process designed to significantly reduce the time to develop a site, due to the focus of the designer on the main functional and marketing factors:\nThe prototype gives the customer a complete idea of ​​how the site will look like in the final result;\nPrototyping allows you to streamline the design development process, focusing on important interface elements;\nA site’s sketch is an irreplaceable thing if the client still does not fully understand what he expects from the site, what functions each page will carry. Careful planning at the prototyping stage makes it possible to avoid global changes in the finished layout;\nAt the prototyping stage, it is possible to identify unnecessary elements that are best abandoned;\nThis process significantly reduces the workload of the designer in developing the project, and thus saves the customer’s money;\nHaving a prototype in hand, the designer and customer more clearly represent the final result;\nPrototype development involves the involvement of the customer, contributes to more productive work, process consistency.\nHaving a prototype makes it easier to understand the tasks for each team member. It gives them the opportunity to do more realistic planning of development deadlines and more accurately determine the cost of work. Website development in strict accordance with the prototype allows not taking into account the cost of changes and modifications."
            },
            {
              "q":"What are the types of prototypes?",
              "a":"A prototype is a basic working model, mock-up or a simple simulation of the product which leads us to create a minimal viable product to final product and variations. The main reason for prototyping is to validate the idea and this is the step in converting an idea to a real product. A prototype could be a working model, representational (non-working) model, miniature or a scale model, video or a photo demonstration based on the factors like a problem to be solved, the mandate of the end customer. A prototype can be in the following forms paper, 3D printing, digital, small model or limited usage product.Here a prototype is made using video just to show others the idea in a graphical/visual format:\nFeasibility Prototype\nHorizontal Prototype\nRapid Prototyp\nSimulations\nStoryboard\nVertical Prototype\nWireframe\nAnimations\nMock-up"
            },
            {
              "q":"What is prototyping in design?",
              "a":"A prototype is an early sample, model or release of a product created to test a concept or process. Typically, a prototype is used to evaluate a new design to improve the accuracy of analysts and system users. It is the step between the formalization and the evaluation of an idea. Prototypes are a crucial part of the design process and a practice used in all design disciplines. From architects, engineers, industrial designers and even service designers, they make their prototypes to test their designs before investing in their mass production. The purpose of a prototype is to have a tangible model of the solutions to the problems already defined and discussed by the designers during the concept/idea stage. Instead of going through the entire design cycle based on a supposed solution, prototypes allow designers to validate their concepts by putting an early version of the solution in front of real users and collecting feedback as quickly as possible."
            },
            {
              "q":"What is Interaction Design?",
              "a":"Interaction designers, focus on digital products and interactive software design. Interaction design helps humans experience or manipulate software or interface with screen-based hardware in order to achieve specific goals — checking email, withdrawing money from an ATM, or “Liking” a webpage.\nInteraction design is heavily focused on satisfying the needs and desires of the people who will use the product.\nInteraction design can be broken down into two parts or the same whole\nUI Design — User interface design\nUX Design — User experience design"
            },
            {
              "q":"What is User Research?",
              "a":"User research is conducted so as to understand users’ characteristics, aims, and behaviors towards achieving these aims. Its purpose is to produce designs that improve their working practices and lives. User research also involves the continuous evaluation of the impact of designs on the users, not only during the design and development phase but after long-term use, too."
            },
            {
              "q":"What is Graphic Design?",
              "a":"Graphic designers work with graphical images, whether they be illustrations, typography, or images, and on a variety of media including print and web. Graphic design is typically rendered in 2D — printed on a physical surface or displayed on a screen but not limited to 2D.\nAs a graphic designer, you can specialize in the following\nLogo design\nBrand design\nPrint Designer"
            },
            {
              "q":"What is User Centered Design?",
              "a":"User-centered design is an iterative design process in which designers focus on the users and their needs in each phase of the design process. UCD calls for involving users throughout the design process via a variety of research and design techniques so as to create highly usable and accessible products for them.\nUser-centered design demands that designers employ a mixture of investigative (e.g., surveys and interviews) and generative (e.g., brainstorming) methods and tools to develop an understanding of user needs."
            },
            {
              "q":"Describe what User Interface (UI) Design does mean for you?",
              "a":"User Interface (UI) design is the design of software or websites with the focus on the user’s experience and interaction. The goal of user interface design is to make the user’s interaction as simple and efficient as possible. Good user interface design puts emphasis on goals and completing tasks, and good UI design never draws more attention to itself than enforcing user goals."
            },
            {
              "q":"Is UX design UI design? What’s the difference?",
              "a":"User interface (UI) design is not the same as UX design. A seasoned UX design pro understands the vital difference and is able to articulate it clearly. Designing for the user interface often plays an important role in the work of a UX designer, but it is not the only function.\nWhereas UI design is concerned with the effective layout of visual elements on a user interface, UX design is ‘people first.’ It’s about what motivates them—how they think and behave.\nA great UX designer should be able to demonstrate knowledge describing the differences, in particular how UI design is only one slice of the UX design process ‘pie’, and only one of many different disciplines that reside under the UX banner. These include, but are not limited to: a user-centered design strategy, core user demographic definition, persona creation, user research, information architecture, content strategy, interaction design, visual design and usability testing."
            },
            {
              "q":"Name some UX Design tools you prefer to work with",
              "a":"Just to name a few:\nAdobe XD,\nFigma,\nInvision studio\nSketch\nBalsamiq"
            },
            {
              "q":"What are the 4 types of research methods?",
              "a":"Data may be grouped into four main types based on methods for collection: observational, experimental, simulation, and derived. The type of research data you collect may affect the way you manage that data. For example, data that is hard or impossible to replace (e.g. the recording of an event at a specific time and place) requires extra backup procedures to reduce the risk of data loss. Or, if you will need to combine data points from different sources, you will need to follow best practices to prevent data corruption:\nObservational Data.Observational data are captured through observation of a behavior or activity.\nExperimental data are collected through active intervention by the researcher to produce and measure change or to create difference when a variable is altered.\nSimulation Data are generated by imitating the operation of a real-world process or system over time using computer test models.\nDerived data involves using existing data points, often from different data sources, to create new data through some sort of transformation, such as an arithmetic formula or aggregation."
            },
            {
              "q":"Why do you do user research?",
              "a":"User research helps us to understand how people go about performing tasks and achieving goals that are important to them. User research focuses on understanding user expectations, behaviors, needs, and motivations through methodical, investigative approaches.It helps us identify unarticulated needs and to fill in any gaps in our knowledge about our users, context of use, challenges, and opportunities. It also helps us to align our product and business strategy with the core needs and goals of our users."
            },
            {
              "q":"How to conduct UX research with usability testing?",
              "a":"Usability testing can be broken down into a few major steps:\nIdentify what needs to be tested and why (e.g. a new product, feature, etc.)\nIdentify the target audience (or your desired customers).\nCreate a list of tasks for the participants to work through.\nRecruit the right participants for the test.\nInvolve the right stakeholders.\nApply what you learn.\nOne of usability’s most hard-earned lessons is that ‘you are not the user.’ If you work on a development project, you’re atypical by definition. Design to optimize the user experience for outsiders, not insiders."
            },
            {
              "q":"What is the role of research in the UX design process?",
              "a":"UX research is the starting point for a project. Research helps us learn about the users and their behavior, goals, motivations, and needs. It also shows us how they currently navigate a system, where they have problems and, most importantly, how they feel when interacting with our product.\nUX research comes first in the UX design process because without it, our work can only be based on our own experiences and assumptions, which is not objective. As Neil Turner, founder of UX for the Masses told us, a good foundation is key to successful design:\n“Good user research is key to designing a great user experience. Designing without good user research is like building a house without solid foundations—your design will soon start to crumble and eventually fall apart.”"
            },
            {
              "q":"What are key principles of good website usability?",
              "a":"Here are 5 key principles of good website usability:\nAvailability and Accessibility. Let’s start with a basic, yet central aspect of usability: the availability and accessibility of your site. If people try to access your website and it doesn’t work — for whatever reason –your website becomes worthless.\nClarity. If you distract or confuse your visitors, they will either need more time to find what they came for, or they might forget their initial goal all together.It is your job to help them reach these goals as quickly as possible. If you can manage to do that, your visitors will be pleased and you have laid the groundwork for a positive experience.\nLearnability. It should be your goal to design intuitive interfaces — interfaces that don’t require instructions, or even a long process of trial and error to figure them out. Key to intuitive design is to make use of what people already know, or create something new that is easy to learn.\nCredibility.It is important that people know you are a real company with real people. Offer a clear “About Us” page together with your contact details and if possible a physical address.\nRelevancy.It is not enough that your website is clear, your content must also be relevant. Again, it is essential that you know your users and why they visit your site."
            },
            {
              "q":"What’s the difference between A/B testing and usability testing?",
              "a":"Many UX specialists consider A/B testing as a usability testing method. It’s vital to understand that usability is all about having individuals experience a product’s functionality. And as we know, A/B testing is about experimenting with two or more versions of a page/screen to see which is most effective. The goal of A/B testing is to find the page that will convert better, while the purpose of usability testing is finding usability issues that prevent users from having great user experience."
            },
            {
              "q":"How do you write usability tasks?",
              "a":"Whether you're new usability testing or want to improve your know-how, we want to share with you our best tips for creating usability tasks. Tasks are the backbone of usability testing:\nDefine user goals.Before you conduct usability testing, and preferably before you design anything—you should always start by understanding your users' goals. If you define user goals from the start, it will help you draft tasks for usability testing.\nStart with a simple task.For users to become accustomed to the testing experience and your product, start your test with one simple task.\nGive users one task at a time.Avoid grouping tasks together—this will create lengthy and complicated instructions, and users will have to be reminded about what they have to do. Split tasks up to create the focus on a single 'to-do' activity for your users.\nFollow your design's flow.When a new user arrives on your website, they do certain actions first, e.g., sign up or log in. To create a realistic user test, follow the same flow users take in your live website or product.\nMake tasks actionable.The premise of usability testing is to learn if users can complete tasks using your product. For this, you have to create similar tasks to those users do in real life in your app or website.\nSet a scenario. Such a description gives users the task (purchase plane tickets) while being clear on why they need to do it (holidays are coming up). This scenario also shares the details they need to know to be able to complete the task.\nAvoid giving precise instructions.One of the most important rules for writing usability tasks is to avoid giving precise instructions for completing the tasks or using leading words in your phrasing."
            },
            {
              "q":"What you have to consider when budgeting for usability testing?",
              "a":"Remember to budget for more than one usability test. Building usability into a Web site (or any product) is an iterative process. Consider these elements when budgeting for usability testing:\nTime: You will need time to plan the usability test. It will take the usability specialist and the team time to become familiar with the site and pilot test the test scenarios. Be sure to budget in time for this test prep as well as running tests, analyzing the data, writing the report, and presenting the findings.\nRecruiting Costs: Consider how or where you will recruit your participants. You will either need to allow for staff time to recruit or engage a recruiting firm to schedule participants for you based on the requirements.\nParticipant Compensation: If you will be compensating participants for their time or travel, factor that into your testing budget.\nRental Costs: If you do not have monitoring or recording equipment, you will need to budget for rental costs for the lab or other equipment. You may also need to secure a location for testing, a conference room for example, so consider this as well.\nIt’s important to keep in mind that usability testing is not just a milestone to be checked off on the project schedule. The team should have a goal for why they are testing and then implement the results."
            },
            {
              "q":"What is extreme prototyping",
              "a":"Extreme Prototyping is employed mainly for web applications and usually in three phases:\nStatic HTML/CSS/JS is created — this gives users an instant tangible feel for the product.\nThereafter, the service layer is simulated — this includes business rules and logic.\nLastly, the actual service layer is developed — this involves integrating with real-world systems and plugging that into the front end HTML/CSS/JS views.\nThis gives users an early view of the application without having actual functionality behind it. The backend will gradually come together as the process moves along."
            },
            {
              "q":"When should prototyping be used?",
              "a":"Prototype model should be used when the desired system needs to have a lot of interaction with the end users.\nTypically, online systems, web interfaces have a very high amount of interaction with end users, are best suited for Prototype model. It might take a while for a system to be built that allows ease of use and needs minimal training for the end user.\nPrototyping ensures that the end users constantly work with the system and provide a feedback which is incorporated in the prototype to result in a useable system. They are excellent for designing good human computer interface systems."
            },
            {
              "q":"What are the essentials of successful prototyping?",
              "a":"Prototypes are at their best, when they are seen as a tool for tinkering. When using them as the standard method for visualizing possible solutions to a problem, they let you discover ideas that you wouldn't have come to mind when working solely on isolated application states.There are three essentials of successful prototyping:\nSpeed is everything. In order not to fall for the temptation of seeing whatever first comes out of the prototyping process as the ideal solution, you need to get comfortable with throwing away your work;\nKeep it small. It is often easier to create a series of small feature prototypes than one big demo;\nIt's not for production. Trying to force the code into that system results in lots of workarounds that wouldn't even be needed when not starting from prototype code.Your code should be at least written nicely enough so that you still understand it the next day. ."
            },
            {
              "q":"What are the disadvantages of rapid prototyping?",
              "a":"Fast prototyping is a course of whereby a working mannequin or prototype is developed for the aim of testing the assorted product options like design, concepts, options, performance, efficiency and output. This strategy of improvement of working mannequin is kind of fast. The person can provide an early suggestions relating to the prototype. Fast prototyping is, usually, a major and important a part of the system designing course of and it’s believed to lower the venture value and danger.\nDisadvantages of fast prototyping: Some individuals are of the opinion that fast prototyping isn’t efficient as a result of, in precise, it fails in replication of the true product or system. It might so occur that some essential developmental steps may very well be omitted to get a fast and low-cost working mannequin. This may be one of many biggest disadvantages of fast prototyping. One other drawback of fast prototyping is one through which many issues are ignored leading to limitless rectifications and revisions. Another drawback of fast prototyping is that it is probably not appropriate for big sized functions."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "User Experience Design (UXD or UED) is a design process whose sole objective is to design a system that offers a great experience to its users. Thus UXD embraces the theories of a number of disciplines such as user interface design, usability, accessibility, information architecture, and Human Computer Interaction.",
          "icon": "assets/icons/web_mobile/ux_design.png"
        },
        {
          "sub_category_name":"Vue.js",
          "junior_level":[
            {
              "q":"What is Vue.js?",
              "a":"Vue js is progressive javascript script used to create dynamic user interfaces.Vue js is very easy to learn.In order to work with Vue js you just need to add few dynamic features to a website.You don’t need to install any thing to use Vue js just need add Vue js library in your project."
            },
            {
              "q":"How to create an instance of Vue.js?",
              "a":"Every Vue application starts by creating a new Vue instance with the Vue function:\nvar vm = new Vue({\n// options\n})"
            },
            {
              "q":"What are Components in Vue.js?",
              "a":"Components are one of most powerful features of Vue js.In Vue components are custom elements that help extend basic HTML elements to encapsulate reusable code.\nFollowing is the way to register a Vue component inside another component:\nexport default {\nel: '#your-element'\ncomponents: {\n'your-component'\n}\n}"
            },
            {
              "q":"What are filters in Vue.js?",
              "a":"In Vue js filters are used to transform the output that are going to rendered on browser.\nA Vue.js filter is essentially a function that takes a value, processes it, and then returns the processed value. In the markup it is denoted by a single pipe (|) and can be followed by one or more arguments:\n<element directive=\"expression | filterId \\[args...\\]\"></element>"
            },
            {
              "q":"What are Directives in Vue.js, List some of them you used?",
              "a":"The concept of directive in Vue js is drastically simpler than that in Angular. Vue.js directives provides a way to extend HTML with new attributes and tags. Vue.js has a set of built-in directives which offers extended functionality to your applications.You can also write your custom directives in Vue.js .\nBelow are list of commonly used directives in Vue.js\nv-show\nv-if\nv-model\nv-else\nv-on"
            },
            {
              "q":"How can I fetch query parameters in Vue.js?",
              "a":"You have access to a $route object from your components, that expose what we need.\n//from your component\nconsole.log(this.$route.query.test)"
            },
            {
              "q":"Explain the basic logical Vue.js app organisation",
              "a":"A Vue.js application consists of a root Vue instance created with new Vue, optionally organized into a tree of nested, reusable components. For example, a todo app’s component tree might look like this:\nRoot Instance\n└─ TodoList\n├─ TodoItem\n│ ├─ DeleteTodoButton\n│ └─ EditTodoButton\n└─ TodoListFooter\n├─ ClearTodosButton\n└─ TodoListStatistics\nAll Vue components are also Vue instances."
            },
            {
              "q":"Explain the differences between one-way data flow and two-way data binding?",
              "a":"In one-way data flow the view(UI) part of application does not updates automatically when data Model is change we need to write some custom code to make it updated every time a data model is changed. In Vue js v-bind is used for one-way data flow or binding.\nIn two-way data binding the view(UI) part of application automatically updates when data Model is changed. In Vue.js v-model directive is used for two way data binding."
            },
            {
              "q":"List some features of Vue.js",
              "a":"Vue js comes with following features\nTemplates\nReactivity\nComponents\nTransitions\nRouting"
            },
            {
              "q":"How to create Two-Way Bindings in Vue.js?",
              "a":"v-model directive is used to create Two-Way Bindings in Vue js.In Two-Way Bindings data or model is bind with DOM and Dom is binded back to model.\nIn below example you can see how Two-Way Bindings is implemented.\n<div id=\"app\">\n{{message}}\n<input v-model=\"message\">\n</div>\n<script type=\"text/javascript\">\nvar message = 'Vue.js is rad';\nnew Vue({ el: '#app', data: { message } });\n</script>"
            },
            {
              "q":"What are the Advantages/Disadvantages of Vuejs?",
              "a":"Vue.js Advantages\nEasy for applications and interfaces development\nSupport Two-way communication as like AngularJs\nAbility to control the states\nNatural thought process\nVue.js Disadvantages\nLimited scope\nSingle creator\nSmall developer community"
            },
            {
              "q":"Can I pass parameters in computer properties in Vue.js?",
              "a":"You can use a method or computed function.\nThe method way:\n<span>{{ fullName('Hi') }}</span>\nmethods: {\nfullName(salut) {\nreturn `${salut} ${this.firstName} ${this.lastName}`\n}\n}\nComputed property with a parameter way:\ncomputed: {\nfullName() {\nreturn salut => `${salut} ${this.firstName}\n${this.lastName}`\n}\n}"
            },
            {
              "q":"What are components props?",
              "a":"Every component instance has its own isolated scope. This means you cannot (and should not) directly reference parent data in a child component’s template. Data can be passed down to child components using props. Props are custom attributes you can register on a component. When a value is passed to a prop attribute, it becomes a property on that component instance.\nVue.component('blog-post', {\n// camelCase in JavaScript\nprops: ['postTitle'],\ntemplate: '<h3>{{ postTitle }}</h3>'\n})"
            },
            {
              "q":"How to deploy Vue.js app?",
              "a":"If you've created your project like this:\nvue init webpack myproject\nNow you can run\nnpm run build\nThen copy index.html and /dist/ folder into your website root directory. Done."
            },
            {
              "q":"How to use local storage with Vue.js?",
              "a":"You can just do following:\nlocalStorage.setItem('YourItem', response.data)\nlocalStorage.getItem('YourItem')\nlocalStorage.removeItem('YourItem')"
            },
            {
              "q":"How can you redirect to another page in Vue.js?",
              "a":"If you are using vue-router, you should use router.go(path) to navigate to any particular route. The router can be accessed from within a component using this.$router. router.go() changed in VueJS 2.0. You can use router.push({ name: \"yourroutename\"})or just router.push(\"yourroutename\") now to redirect."
            },
            {
              "q":"What is filters in Vue.js?",
              "a":"Vue.js allows you to define filters that can be used to apply common text formatting. Filters are usable in two places: mustache interpolations and v-bind expressions (the latter supported in 2.1.0+). Filters should be appended to the end of the JavaScript expression, denoted by the “pipe” symbol:\n<!-- in mustaches -->\n{{ message | capitalize }}\n<!-- in v-bind -->\n<div v-bind:id=\"rawId | formatId\"></div>"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Vue.js is an open-source model–view–viewmodel front end JavaScript framework for building user interfaces and single-page applications. It was created by Evan You, and is maintained by him and the rest of the active core team members.",
          "icon": "assets/icons/web_mobile/vue.png"
        },
        {
          "sub_category_name":"WCF",
          "junior_level":[
            {
              "q":"What is WCF?",
              "a":"Windows Communication Foundation (WCF) is a framework for building service-oriented applications. Using WCF, you can send data as asynchronous messages from one service endpoint to another. A service endpoint can be part of a continuously available service hosted by IIS, or it can be a service hosted in an application. An endpoint can be a client of a service that requests data from a service endpoint. The messages can be as simple as a single character or word sent as XML, or as complex as a stream of binary data."
            },
            {
              "q":"What are WCF Service Endpoints?",
              "a":"All communication with a Windows Communication Foundation (WCF) service occurs through the endpoints of the service. Endpoints provide clients access to the functionality offered by a WCF service.\nA WCF service endpoint has three basic elements, i.e. Address, Binding and Contract (ABC).\nAddress: It defines \"WHERE\". Address is the URL that identifies the location of the service.\nBinding: It defines \"HOW\". Binding defines how the service can be accessed.\nContract: It defines \"WHAT\". Contract identifies what is exposed by the service."
            },
            {
              "q":"What is a service contract in WCF?",
              "a":"A service contract defines the operations which are exposed by the service to the outside world. A service contract is the interface of the WCF service and it tells the outside world what the service can do. It may have service-level settings, such as the name of the service and namespace for the service.\n[ServiceContract]\ninterface IMyContract {\n[OperationContract]\nstring MyMethod();\n}\nclass MyService: IMyContract {\npublic string MyMethod() {\nreturn \"Hello World\";\n}\n}"
            },
            {
              "q":"Provide some scenarios when we could use WCF services",
              "a":"A few sample scenarios include:\nA secure service to process business transactions.\nA service that supplies current data to others, such as a traffic report or other monitoring service.\nA chat service that allows two people to communicate or exchange data in real time.\nA dashboard application that polls one or more services for data and presents it in a logical presentation.\nExposing a workflow implemented using Windows Workflow Foundation as a WCF service.\nA Silverlight application to poll a service for the latest data feeds.\nWhile creating such applications was possible prior to the existence of WCF, WCF makes the development of endpoints easier than ever. In summary, WCF is designed to offer a manageable approach to creating Web services and Web service clients."
            },
            {
              "q":"Could you name basic WCF service components?",
              "a":"Have a look at this mindmap to navigate yourself through WCF service components:"
            },
            {
              "q":"What are the features and advantage of WCF?",
              "a":"Features of WCF**\nWindows Communication Foundation (WCF) is a secure, reliable, and scalable messaging platform for the .NET Framework 3.0,\nService Orientation\nInteroperability\nMultiple Message Patterns\nService Metadata\nData Contracts\nSecurity\nMultiple Transports and Encodings\nReliable and Queued Messages\nDurable Messages\nTransactions\nAJAX and REST Support\nExtensibility\nAdvantages of WCF:\nService Oriented\nLocation Independent\nLanguage Independent\nPlatform Independent\nSupport Multiple operation\nWCF can maintain transaction like COM+ Does\nIt can maintain state\nIt can control concurrency\nIt can be hosted on IIS, WAS, Self hosting, Windows services."
            },
            {
              "q":"Explain what is SOA?",
              "a":"SOA stands for **service-oriented architecture. Service Oriented Architecture is an architectural approach in software development where the application is organized as \"Services\". Services are a group of methods that contain the business logic to connect a DB or other services. For instance you go to a hotel and order food. Your order first goes to the counter and then it goes to the kitchen where the food is prepared and finally the waiter serves the food.\nSome important characteristics of Service Oriented Architecture\nSOA services should be independent of other services. Altering a service should not affect the client calling the service.\nServices should be self-contained. Services should be able to define themselves (in the Web Service Description Language (WSDL)). It should be able to tell the client what all of the operations it does, what are all the data types it uses and what kind of value it will return."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "The Windows Communication Foundation, previously known as Indigo, is a free and open-source runtime and a set of APIs in the .NET Framework for building connected, service-oriented applications. .NET Core 1.0, released 2016, did not support WCF server side code",
          "icon": "assets/icons/web_mobile/wcf.png"
        },
        {
          "sub_category_name":"Web Security",
          "junior_level":[
            {
              "q":"What is SQL injection?",
              "a":"Injection attacks stem from a lack of strict separation between program instructions (i.e., code) and user-provided (or external) input. This allows an attacker to inject malicious code into a data snippet.\nSQL injection is one of the most common types of injection attack. To carry it out, an attacker provides malicious SQL statements through the application.\nHow to prevent:\nPrepared statements with parameterized queries\nStored procedures\nInput validation - blacklist validation and whitelist validation\nPrinciple of least privilege - Application accounts shouldn’t assign DBA or admin type access onto the database server. This ensures that if an application is compromised, an attacker won’t have the rights to the database through the compromised application."
            },
            {
              "q":"What is the difference between Authentication vs Authorization?",
              "a":"Authentication is the process of ascertaining that somebody really is who he claims to be.\nAuthorization refers to rules that determine who is allowed to do what. E.g. Adam may be authorized to create and delete databases, while Usama is only authorised to read.\nOr in short:\nAuthentication = login + password (who you are)\nAuthorization = permissions (what you are allowed to do)\nAlso:\nAuthentication = Verification\nAuthorization = Permissions"
            },
            {
              "q":"What is Security Testing?",
              "a":"Security testing can be considered most important in all type of software testing. Its main objective is to find vulnerabilities in any software (web or networking) based application and protect their data from possible attacks or intruders.\nAs many applications contains confidential data and needs to be protected being leaked. Software testing needs to be done periodically on such applications to identify threats and to take immediate action on them."
            },
            {
              "q":"What is a DDOS attack?",
              "a":"A denial-of-service attack (DoS attack) is an attempt to make a computer resource unavailable to its intended users.\nDenial of service is typically accomplished by flooding the targeted machine or resource with superfluous requests in an attempt to overload systems and prevent some or all legitimate requests from being fulfilled.\nIn a distributed denial-of-service attack (DDoS attack), the incoming traffic flooding the victim originates from many different sources. This effectively makes it impossible to stop the attack simply by blocking a single source."
            },
            {
              "q":"What is OWASP?",
              "a":"OWASP stands for Open Web Application Security Project. It is an organization which supports secure software development."
            },
            {
              "q":"List the various methodologies in Security testing?",
              "a":"Methodologies in Security testing are:\nWhite Box - All the information are provided to the testers.\nBlack Box - No information is provided to the testers and they can test the system in real world scenario.\nGrey Box - Partial information is with the testers and rest they have to rest on their own."
            },
            {
              "q":"What is “Vulnerability”?",
              "a":"The Vulnerability can be defined as weakness of any system through which intruders or bugs can attack on the system.\nIf security testing has not been performed rigorously on the system then chances of vulnerabilities get increase. Time to time patches or fixes requires preventing a system from the vulnerabilities"
            },
            {
              "q":"What is a botnet?",
              "a":"A botnet is a number of Internet-connected devices, each of which is running one or more bots. Botnets can be used to perform distributed denial-of-service attack (DDoS attack), steal data, send spam, and allows the attacker to access the device and its connection."
            },
            {
              "q":"What is Cross-Site Scripting (XSS)?",
              "a":"Cross-Site Scripting (XSS) is an attack that occurs when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.\nThe page provided by the server when someone requests it is unaltered. Instead, an XSS attack exploits a weakness in a page that include a variable submitted in a request to show up in raw form in the response. The page is only reflecting back what was submitted in that request."
            },
            {
              "q":"What is DOM-based XSS?",
              "a":"DOM-based XSS is a type of cross-site scripting which appears in DOM(Document Object Model), instead of HTML."
            },
            {
              "q":"Mention what flaw arises from session tokens having poor randomness across a range of values?",
              "a":"Session hijacking, is the issue related to A2: 2017 – Broken Authentication. It is also called cookie hijacking. In this type of attack, there is the possibility of exploitation of a valid computer session—sometimes also called a session key—to gain unauthorized access to information or services in a system. This flaw comes when there is a poor randomness in session key."
            },
            {
              "q":"How to mitigate the SQL Injection risks?",
              "a":"To mitigate SQL injection:\nPrepared Statements with Parameterized Queries: Always ensure that your SQL interpreter always able to differentiate between code and data. Never use dynamic queries which fail to find the difference between code and data. Instead, use static SQL query and then pass in the external input as a parameter to query. Use of Prepared Statements (with Parameterized Queries) force developer to first define all the SQL code, and then pass in each parameter to the query later.\nUse of Stored Procedures: Stored Procedure is like a function in C where database administrator call it whenever he/she need it. It is not completely mitigated SQL injection but definitely helps in reducing risks of SQL injection by avoiding dynamic SQL generation inside.\nWhite List Input Validation: Always use white list input validation and allow only preapproved input by the developer. Never use blacklist approach as it is less secure than whitelist approach.\nEscaping All User Supplied Input\nEnforcing Least Privilege"
            },
            {
              "q":"What is Cross Site Scripting (XSS)?",
              "a":"By using Cross Site Scripting (XSS) technique, users executed malicious scripts (also called payloads) unintentionally by clicking on untrusted links and hence, these scripts pass cookies information to attackers."
            },
            {
              "q":"How can we Protect Web Applications From Forced Browsing?",
              "a":"To protect web applications from forced browsing, strictly monitor access-control settings are accurate and up to date on every page and application on the site."
            },
            {
              "q":"What is an SSL Certificate?",
              "a":"SSL Certificates are small data files that digitally bind a cryptographic key to an organization’s details. When installed on a web server, it activates the padlock and the https protocol (over port 443) and allows secure connections from a web server to a browser."
            },
            {
              "q":"What is Content Security Policy?",
              "a":"Content Security Policy (CSP) is an HTTP header that allows site operators fine-grained control over where resources on their site can be loaded from. The use of this header is the best method to prevent cross-site scripting (XSS) vulnerabilities. Due to the difficulty in retrofitting CSP into existing websites, CSP is mandatory for all new websites and is strongly recommended for all existing high-risk sites.\nThe primary benefit of CSP comes from disabling the use of unsafe inline JavaScript. Inline JavaScript – either reflected or stored – means that improperly escaped user-inputs can generate code that is interpreted by the web browser as JavaScript. By using CSP to disable inline JavaScript, you can effectively eliminate almost all XSS attacks against your site."
            },
            {
              "q":"What is CORS and how to enable one?",
              "a":"A request for a resource (like an image or a font) outside of the origin is known as a cross-origin request. CORS (cross-origin resource sharing) manages cross-origin requests. CORS allows servers to specify who (i.e., which origins) can access the assets on the server, among many other things.\nAccess-Control-Allow-Origin is an HTTP header that defines which foreign origins are allowed to access the content of pages on your domain via scripts using methods such as XMLHttpRequest.\nFor example, if your server provides both a website and an API intended for XMLHttpRequest access on a remote websites, only the API resources should return the Access-Control-Allow-Origin header. Failure to do so will allow foreign origins to read the contents of any page on your origin.\n# Allow any site to read the contents of this JavaScript library, so that subresource integrity works\nAccess-Control-Allow-Origin: *"
            },
            {
              "q":"How can I prevent XSS?",
              "a":"XSS can be prevented by sanitizing user input to the application. Always allowed those elements as input which is absolutely essential for that field."
            },
            {
              "q":"What is Session Hijacking?",
              "a":"Session Hijacking involves the exploitation of the web session control mechanism. The attacker basically exploits vulnerable connections and steals HTTP cookies to gain unauthorized access to sensitive information/data stored in web servers.\nThe most effective countermeasure network-level session hijacking is to pick encrypted transport protocols that enable secure connections."
            },
            {
              "q":"What is Intrusion Detection System (IDS)?",
              "a":"An intrusion detection system (IDS) is a device or software application that monitors a network or systems for malicious activity or policy violations.\nIntrusion detection check following:\nPossible attacks\nAny abnormal activity\nAuditing the system data\nAnalysis of different collected data etc."
            },
            {
              "q":"Explain what threat arises from not flagging HTTP cookies with tokens as secure?",
              "a":"Access Control Violation threat arises from not flagging HTTP cookies with tokens as secure."
            },
            {
              "q":"Why is the Root Certificate important?",
              "a":"A Root SSL certificate is a certificate issued by a trusted certificate authority (CA).\nIn the SSL ecosystem, anyone can generate a signing key and sign a new certificate with that signature. However, that certificate is not considered valid unless it has been directly or indirectly signed by a trusted CA.\nA trusted certificate authority is an entity that has been entitled to verify that someone is effectively who it declares to be. In order for this model to work, all the participants on the game must agree on a set of CA which they trust. All operating systems and most of web browsers ship with a set of trusted CAs."
            },
            {
              "q":"Provide some \"robots.txt\" anti-pattern usage",
              "a":"robots.txt is a text file placed within the root directory of a site that tells robots (such as indexers employed by search engines) how to behave, by instructing them not to index certain paths on the website.\nIt should not be used as a way to prevent the disclosure of private information or to hide portions of a website. Although this does prevent these sites from appearing in search engines, it does not prevent its discovery from attackers, as robots.txt is frequently used for reconnaisance.\n# Using robots.txt to hide certain directories is a terrible idea\nUser-agent: *\nDisallow: /secret/admin-interface"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Web security refers to protecting networks and computer systems from damage to or the theft of software, hardware, or data. It includes protecting computer systems from misdirecting or disrupting the services they are designed to provide.",
          "icon": "assets/icons/web_mobile/web_security.png"
        },
        {
          "sub_category_name":"WebSockets",
          "junior_level":[
            {
              "q":"What is WebSockets?",
              "a":"WebSocket is a technology that allows a client to establish two-way full-duplex communication with the server.\nThe key word in that definition is two-way: with WebSocket, both the client and the server can trigger communication with one another, and both can send messages, at the same time. By a contrast In a traditional HTTP system communication can only be initiated in one direction: from the client to the server."
            },
            {
              "q":"Why use WebSocket over Http?",
              "a":"A WebSocket is a continuous connection between client and server. That continuous connection allows the following:\nData can be sent from server to client at any time, without the client even requesting it. This is often called server-push and is very valuable for applications where the client needs to know fairly quickly when something happens on the server (like a new chat messages has been received or a new price has been udpated). A client cannot be pushed data over http. The client would have to regularly poll by making an http request every few seconds in order to get timely new data. Client polling is not efficient.\nData can be sent either way very efficiently. Because the connection is already established and a webSocket data frame is very efficiently organized, one can send data a lot more efficiently that via an HTTP request that necessarily contains headers, cookies, etc..."
            },
            {
              "q":"What do you mean by lower latency interaction?",
              "a":"Low latency means that there is very little delay between the time you request something and the time you get a response. As it applies to webSockets, it just means that data can be sent quicker (particularly over slow links) because the connection has already been established so no extra packet roundtrips are required to establish the TCP connection."
            },
            {
              "q":"What is Short polling and what problems do we have with it?",
              "a":"Short Polling or Ajax Polling is a technique when we have the client ping the server repeatedly, say, every 500ms (or over some fixed delay). That way, you get new data every 500ms:\nclient requests a webpage from a server using regular HTTP.\nThe client receives the requested webpage and executes the JavaScript on the page which requests a file from the server at regular intervals (e.g. 0.5 seconds).\nThe server calculates each response and sends it back, just like normal HTTP traffic.\nThere are a few obvious downsides to this:\nthere’s a 500ms delay,\nit consumes server resources with a barrage of requests, and most requests will return empty if the data isn’t frequently updated."
            },
            {
              "q":"Explain what is Server-Sent Events (SSE) / EventSource?",
              "a":"Alongside with short and long polling, SSE is a technique for sending messages is the Server-Sent Events API, which allows the server to push updates to the client by leveraging the JavaScript EventSource. EventSource opens a persistent, one-directional connection with the server over HTTP using a special text/event-stream header and listens for messages, which are treated like JavaScript events by your code.\nServer-Sent Events (SSE) are great for apps where you don’t need to send the server any data—for example, a Twitter-style news feed or a real-time dashboard of stock quotes. Another pro is that Server-Sent Events work over HTTP and the API is relatively easy to use.\nHowever:\nSSE is not supported by older browsers,\nmost browsers limit the number of SSE connections you can make at the same time."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection. The WebSocket protocol was standardized by the IETF as RFC 6455 in 2011. The current API specification allowing web applications to use this protocol is known as WebSockets.",
          "icon": "assets/icons/web_mobile/web_socket.png"
        },
        {
          "sub_category_name":"Xamarin",
          "junior_level":[
            {
              "q":"What is Xamarin?",
              "a":"Xamarin is a Cross Platform Mobile Development technology by Microsoft where we can develop the native app using the same code base across all platforms (iOS, Android, UWP) using the C# language. Xamarin uses two approaches for the app development:\nXamarin.Forms and\nXamarin Native.\nXamarin.Forms uses MVVM & XAML while Xamarin Native uses native UI technology and MVC or MVVMCross Architecture."
            },
            {
              "q":"How to display static HTML string in Xamarin.Forms?",
              "a":"We can use WebView control to display static HTML string. WebView can be used to display Websites, HTML string, Documents, Local Files depending on the platform support."
            },
            {
              "q":"Name few widely used Layout Controls",
              "a":"Frame: It contains a single element as a child having a default padding of 20.\nGrid: It is used when UI components are to be arranged into Rows & Columns.\nStackLayout: It is used when UI components are to be arranged either horizontally or vertically.\nScrollView: It enables the scrolling for a child element if required. It has one child only.\nThere are other Layout Controls too like AbsoluteLayout, RelativeLayout, ContentView, ContentPresenter, etc."
            },
            {
              "q":"What are Pages in Xamarin.Forms?",
              "a":"Pages are Xamarin Forms generic representation of Cross Mobil Application Screens. A Page occupies most or all of a screen and contains a single child.\nOn IOS, the Page is mapped to ViewController, on Android, it is mapped to somewhat like Activity and on Universal Windows Platform, it is mapped to Page. Pages can be of several types, viz. Master /Detail Page, navigational Page, Carousel Page, Tabbed Page, Template Page, etc."
            },
            {
              "q":"What is is the difference between ListView & TableView?",
              "a":"The ListView and TableView controls are so similar, you can think of them as a single control. The major difference between the two is the manner in which they lay out their items, and it’s easy to change the layout so each control emulates the other.\nThe ListView control displays its data stacked vertically, much like a standard listbox. Use this control to display an ordered list of data, especially long lists that require scrolling like a list of email messages, a list of contacts, or search results.\nThe TableView control displays its data stacked horizontally in rows (although you can alter this behavior and have it displayed in columns first, as well). You use this control when you need more space for rich visualization of each item to be displayed.\nOne of the big differences is ListView provides you a ItemsSource and a Itemtemplate and TableView does not. So items must be added as children manually."
            },
            {
              "q":"What are the various flavors of Xamarin Applications that can be made?",
              "a":"Xamarin allows two different ways of creating applications, based on the amount of code reusability and customization:\nThe first approach is the Traditional Native Approach wherein platform-specific apps using Xamarin.iOSiOS and Xamarin.Android can be made. This way of creating apps is generally used when there is a lot of customization specific to the platform is required as it allows direct access to platform-specific APIs. Xamarin.iOS is used for iOS applications and Xamarin.Android is used to create Android applications.\nThe second approach is creating apps through Xamarin.Forms approach. Xamarin.Forms are used when there is a possibility of reuse of a lot of platform-independent code and the focus is less on custom UI. The platform-independent code is separated and kept in Shared Project or PCL or .NET Standard Library and Platform Specific projects consume this common code by including it."
            },
            {
              "q":"What is the basic architecture of Xamarin.Forms project?",
              "a":"Xamarin.Forms can consists of four (this varies based on requirements) projects under one solution.\n.NET Standard, PCL or Shared Project\niOS Project\nAndroid Project\nUWP Project\nHere, .NET Standard, PCL or Shared Project contains all UI & Business logic inside it.\niOS, Android, UWP contains platform specific code containing Renderers or Dependency Services Implementations."
            },
            {
              "q":"What is the difference between Margin and Padding properties?",
              "a":"Margin property represents the distance between the element and its adjacent elements and is used to control the element's rendering position, and the rendering position of its neighbors. Margin can be specified on Layout and View classes.\nPadding property represents the distance between an Element and the child elements of it and thus it is used to separate the control from its own content. Padding values can be specified on Layout classes.\nSuppose, two adjacent elements have a margin of value 20 pixels assigned, what will be the distance between these two elements? Why?\nThe distance between two elements will be 40 pixels in this case, because, Margin property values are Additive. In addition to this, if Margin and Padding both are applied, then the distance between element and its content will be Margin + Padding."
            },
            {
              "q":"Explain Lifecycle methods of Xamarin.Forms app",
              "a":"Lifecycle methods are set of methods which get executed when application enters into a specific state. Following are such methods:\nOnStart: Executes when application starts from the beginning\nOnSleep: Executes each time when application goes into the background\nOnResume: Executes when application comes into the foreground from the Sleeping state"
            },
            {
              "q":"What is Xamarin.Forms and what are the benefits of using it?",
              "a":"Xamarin.Forms is a Cross-Platform Toolkit which helps share Business Logic as well as UI using XAML across all supported platforms.\nIt uses MVVM pattern along with Binding into the XAML UI to accomplish this. It produces pure native controls for each individual platforms. Using Xamarin.Forms, we can share the whole business logic as well as UI among all supporting platforms like iOS, Android and UWP. It also provides a way for platform specific customization of any native controls using Renderers. Thus, we can almost share about 80-90% of code across platforms. We can say Xamarin is the King of Cross Platforms."
            },
            {
              "q":"How to store simple Key-Value data?",
              "a":"Xamarin.Forms's Application class exposes the Application.Current.Properties Dictionary which is used to store the simple Key-Value pair data. The Properties dictionary uses a string key and stores an object value."
            },
            {
              "q":"How will you navigate from one page to another?",
              "a":"On some button click event of First Page, we can call the following method, which will navigate to the second page:\nawait Navigation.PushAsync (new MySecondPageXaml (), true);\nWe have to use the \"Navigation\" property which is available under ContentPage class (XAML Page's code behind). So this navigation can be written in the Page's code behind file."
            },
            {
              "q":"What is the difference between Xamarin.Forms & Xamarin Native?",
              "a":"Xamarin.Forms is used when:\nLess platform-specific code is required\nCode sharing is more important than custom UI\nUI is not complex\nXamarin Native is used when:\nLot of platform specific code is required\nCustom UI is more important then code sharing\nMany platform-specific APIs are used"
            },
            {
              "q":"What is App.cs class?",
              "a":"App.cs is the main class of the app which offers features like:\nMainPage: It helps to set the initial page for the app.\nProperties Dictionary: It helps us store simple values across lifecycle states.\nStatic Current Property: It gives the instance of the current application object."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Xamarin is a Microsoft-owned San Francisco-based software company founded in May 2011 by the engineers that created Mono, Xamarin.Android and Xamarin.iOS, which are cross-platform implementations of the Common Language Infrastructure and Common Language Specifications.",
          "icon": "assets/icons/web_mobile/xamarin.png"
        }
      ]
    },
    {
      "category_name": "Data structures & Algorithms",
      "sub_category":[
        {
          "sub_category_name":"Arrays",
          "junior_level":[
            {
              "q":"Explain what is an Array?",
              "a":"An array is a collection of homogeneous (same type) data items stored in contiguous memory locations. For example if an array is of type “int”, it can only store integer elements and cannot allow the elements of other types such as double, float, char etc. The elements of an array are accessed by using an index.\nO(1)\nO(log n)\nO(n)\nO(n log n)\nO(n2)\nO(2n)\nO(n!)"
            },
            {
              "q":"Name some characteristics of Array Data Structure",
              "a":"Arrays are:\nFinite (fixed-size) - An array is finite because it contains only limited number of elements.\nOrder -All the elements are stored one by one , in contiguous location of computer memory in a linear order and fashion\nHomogenous - All the elements of an array are of same data types only and hence it is termed as collection of homogenous"
            },
            {
              "q":"How do Dynamic Arrays work?",
              "a":"A simple dynamic array can be constructed by allocating an array of fixed-size, typically larger than the number of elements immediately required. The elements of the dynamic array are stored contiguously at the start of the underlying array, and the remaining positions towards the end of the underlying array are reserved, or unused. Elements can be added at the end of a dynamic array in constant time by using the reserved space until this space is completely consumed.\nWhen all space is consumed, and an additional element is to be added, the underlying fixed-sized array needs to be increased in size. Typically resizing is expensive because you have to allocate a bigger array and copy over all of the elements from the array you have overgrow before we can finally append our item.\nDynamic arrays memory allocation is language specific. For example in C++ arrays are created on the stack, and have automatic storage duration -- you don't need to manually manage memory, but they get destroyed when the function they're in ends. They necessarily have a fixed size:\nint foo[10];\nArrays created with operator new[] have dynamic storage duration and are stored on the heap (technically the \"free store\"). They can have any size, but you need to allocate and free them yourself since they're not part of the stack frame:\nint* foo = new int[10];\ndelete[] foo;"
            },
            {
              "q":"What are Dynamic Arrays?",
              "a":"A dynamic array is an array with a big improvement: automatic resizing.\nOne limitation of arrays is that they're fixed size, meaning you need to specify the number of elements your array will hold ahead of time. A dynamic array expands as you add more elements. So you don't need to determine the size ahead of time."
            },
            {
              "q":"What is a main difference between an Array and a Dictionary?",
              "a":"Arrays and dictionaries both store collections of data, but differ by how they are accessed. Arrays provide random access of a sequential set of data. Dictionaries (or associative arrays) provide a map from a set of keys to a set of values.\nArrays store a set of objects (that can be accessed randomly)\nDictionaries store pairs of objects\nItems in an array are accessed by position (index) (often a number) and hence have an order.\nItems in a dictionary are accessed by key and are unordered.\nThis makes array/lists more suitable when you have a group of objects in a set (prime numbers, colors, students, etc.). Dictionaries are better suited for showing relationships between a pair of objects."
            },
            {
              "q":"Name some advantages and disadvantages of Arrays",
              "a":"Pros:\nFast lookups. Retrieving the element at a given index takes O(1) time, regardless of the length of the array.\nFast appends. Adding a new element at the end of the array takes O(1) time.\nCons:\nFixed size. You need to specify how many elements you're going to store in your array ahead of time.\nCostly inserts and deletes. You have to shift the other elements to fill in or close gaps, which takes worst-case O(n) time."
            },
            {
              "q":"What is time complexity of basic Array operations?",
              "a":"Array uses continuous memory locations (space complexity O(n)) to store the element so retrieving of any element will take O(1) time complexity (constant time by using index of the retrieved element). O(1) describes inserting at the end of the array. However, if you're inserting into the middle of an array, you have to shift all the elements after that element, so the complexity for insertion in that case is O(n) for arrays. End appending also discounts the case where you'd have to resize an array if it's full.\nOperationAverage CaseWorst Case\nReadO(1)O(1)\nAppendO(1)O(1)\nInsertO(n)O(n)\nDeleteO(n)O(n)\nSearchO(n)O(n)"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, an array data structure, or simply an array, is a data structure consisting of a collection of elements, each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index tuple by a mathematical formula.",
          "icon": "assets/icons/dataStructure_algo/arrays.png"
        },
        {
          "sub_category_name":"Backtracking",
          "junior_level":[
            {
              "q":"What is Backtracking?",
              "a":"Backtracking is a systematic way of trying out different sequences of decisions until we find one that \"works.\" Backtracking does not generate all possible solutions first and checks later. It tries to generate a solution and as soon as even one constraint fails, the solution is rejected and the next solution is tried.\nBacktracking can be understood as as searching os a tree for a particular \"goal\" leaf node. Backtracking in that case is a depth-first search with any bounding function. All solution using backtracking is needed to satisfy a complex set of constraints."
            },
            {
              "q":"Why is this called Backtracking?",
              "a":"Using Backtracking you built a solution (that is a structure where every variable is assigned a value).\nIt is however possible that during construction, you realize that the solution is not successful (does not satisfy certain constraints), then you backtrack: you undo certain assignments of values to variables in order to reassign them.\nLike when looking for a book because at first you check drawers in the first room, but it's not found, so you backtrack out of the first room to check the drawers in the next room. It's also called Trial & Error."
            },
            {
              "q":"What is Exhaustive Search?",
              "a":"Exhaustive Search is an algorithmic technique in which first all possible solutions are generated first and then we select the most feasible solution by applying some rules. Since it follows the most naive approach, it is a.k.a Brute-Force Search. This approach is one of the most expensive algorithmic techniques, mainly in terms of time complexity. It is also, therefore, one of the most naive ones."
            },
            {
              "q":"What is the difference between Backtracking and Recursion?",
              "a":"Recursion describes the calling of the same function that you are in. The typical example of a recursive function is the factorial. You always need a condition that makes recursion stop (base case).\nBacktracking is when the algorithm makes an opportunistic decision*, which may come up to be wrong. If the decision was wrong then the backtracking algorithm restores the state before the decision. It builds candidates for the solution and abandons those which cannot fulfill the conditions. A typical example for a task to solve would be the Eight Queens Puzzle. Backtracking is also commonly used within Neuronal Networks. Many times backtracking is not implemented recursively. If backtracking uses recursion its called Recursive Backtracking\nP.S. * Opportunistic decision making refers to a process where a person or group assesses alternative actions made possible by the favorable convergence of immediate circumstances recognized without reference to any general plan."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Backtracking is a general algorithm for finding solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons a candidate as soon as it determines that the candidate cannot possibly be completed to a valid solution.",
          "icon": "assets/icons/dataStructure_algo/backtracking.png"
        },
        {
          "sub_category_name":"Big-O Notation",
          "junior_level":[
            {
              "q":"What is Big O notation?",
              "a":"Big-O notation (also called \"asymptotic growth\" notation) is a relative representation of the complexity of an algorithm. It shows how an algorithm scales based on input size. We use it to talk about how thing scale. Big O complexity can be visualized with this graph:"
            },
            {
              "q":"What does it mean if an operation is O(log n)?",
              "a":"O(log n) means for every element, you're doing something that only needs to look at log N of the elements. This is usually because you know something about the elements that let you make an efficient choice (for example to reduce a search space). The most common attributes of logarithmic running-time function are that:\nthe choice of the next element on which to perform some action is one of several possibilities, and\nonly one will need to be chosen\nor\nthe elements on which the action is performed are digits of n\nMost efficient sorts are an example of this, such as merge sort. ​It is O(log n) when we do divide and conquer type of algorithms e.g binary search. Another example is quick sort where each time we divide the array into two parts and each time it takes O(N) time to find a pivot element. Hence it N O(log N)\nPlotting log(n) on a plain piece of paper, will result in a graph where the rise of the curve decelerates as n increases:"
            },
            {
              "q":"What exactly would an O(n2) operation do?",
              "a":"O(n2) means for every element, you're doing something with every other element, such as comparing them. Bubble sort is an example of this."
            },
            {
              "q":"What is Worst Case?",
              "a":"Big-O is often used to make statements about functions that measure the worst case behavior of an algorithm. Worst case analysis gives the maximum number of basic operations that have to be performed during execution of the algorithm. It assumes that the input is in the worst possible state and maximum work has to be done to put things right."
            },
            {
              "q":"Why do we use Big O notation to compare algorithms?",
              "a":"The fact is it's difficult to determine the exact runtime of an algorithm. It depends on the speed of the computer processor. So instead of talking about the runtime directly, we use Big O Notation to talk about how quickly the runtime grows depending on input size.\nWith Big O Notation, we use the size of the input, which we call n. So we can say things like the runtime grows “on the order of the size of the input” (O(n)) or “on the order of the square of the size of the input” (O(n2)). Our algorithm may have steps that seem expensive when n is small but are eclipsed eventually by other steps as n gets larger. For Big O Notation analysis, we care more about the stuff that grows fastest as the input grows, because everything else is quickly eclipsed as n gets very large."
            },
            {
              "q":"Explain the difference between O(1) vs O(n) space complexities",
              "a":"Let's consider a traversal algorithm for traversing a list.\nO(1) denotes constant space use: the algorithm allocates the same number of pointers irrespective to the list size. That will happen if we move (reuse) our pointer along the list.\nIn contrast, O(n) denotes linear space use: the algorithm space use grows together with respect to the input size n. That will happen if let's say for some reason the algorithm needs to allocate 'N' pointers (or other variables) when traversing a list."
            },
            {
              "q":"Provide an example of O(1) algorithm",
              "a":"Say we have an array of n elements:\nint array[n];\nIf we wanted to access the first (or any) element of the array this would be O(1) since it doesn't matter how big the array is, it always takes the same constant time to get the first item:\nx = array[0];"
            },
            {
              "q":"What is complexity of this code snippet?",
              "a":"Let's say we wanted to find a number in the list:\nfor (int i = 0; i < n; i++){\n   if(array[i] == numToFind){ return i; }\n}\nWhat will be the time complexity (Big O) of that code snippet?This would be O(n) since at most we would have to look through the entire list to find our number. The Big-O is still O(n) even though we might find our number the first try and run through the loop once because Big-O describes the upper bound for an algorithm."
            },
            {
              "q":"What is complexity of push and pop for a Stack implemented using a LinkedList?",
              "a":"O(1). Note, you don't have to insert at the end of the list. If you insert at the front of a (singly-linked) list, they are both O(1).\nStack contains 1,2,3:\n[1]->[2]->[3]\nPush 5:\n[5]->[1]->[2]->[3]\nPop:\n[1]->[2]->[3] // returning 5"
            },
            {
              "q":"What is the big O notation of this function?",
              "a":"Consider:\nf(x) = log n + 3n\nWhat is the big O notation of this function?\nIt is simply O(n).\nWhen you have a composite of multiple parts in Big O notation which are added, you have to choose the biggest one. In this case it is O(3n), but there is no need to include constants inside parentheses, so we are left with O(n)."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity.",
          "icon": "assets/icons/dataStructure_algo/bigo.png"
        },
        {
          "sub_category_name":"Binary Tree",
          "junior_level":[
            {
              "q":"Define Binary Tree",
              "a":"A normal tree has no restrictions on the number of children each node can have. A binary tree is made of nodes, where each node contains a \"left\" pointer, a \"right\" pointer, and a data element.\nThere are three different types of binary trees:\nFull binary tree: Every node other than leaf nodes has 2 child nodes.\nComplete binary tree: All levels are filled except possibly the last one, and all nodes are filled in as far left as possible.\nPerfect binary tree: All nodes have two children and all leaves are at the same level."
            },
            {
              "q":"How is Binary Heap usually implemented?",
              "a":"A binary heaps are commonly implemented with an array. Any binary tree can be stored in an array, but because a binary heap is always a complete binary tree, it can be stored compactly. No space is required for pointers; instead, the parent and children of each node can be found by arithmetic on array indices:\nThe root element is 0\nLeft child : (2*i)+1\nRight child : (2*i)+2\nParent child : (i-1)/2"
            },
            {
              "q":"What is Binary Heap?",
              "a":"A Binary Heap is a Binary Tree with following properties:\nIt’s a complete tree (all levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.\nA Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.\n10 10\n/ \\ / \\\n20 100 15 30\n/ / \\ / \\\n30 40 50 100 40"
            },
            {
              "q":"What is Binary Search Tree?",
              "a":"Binary search tree is a data structure that quickly allows to maintain a sorted list of numbers.\nIt is called a binary tree because each tree node has maximum of two children.\nIt is called a search tree because it can be used to search for the presence of a number in O(log n) time.\nThe properties that separates a binary search tree from a regular binary tree are:\nAll nodes of left subtree are less than root node\nAll nodes of right subtree are more than root node\nBoth subtrees of each node are also BSTs i.e. they have the above two properties"
            },
            {
              "q":"How to implement a tree data-structure? Provide some code.",
              "a":"That is a basic (generic) tree structure that can be used for String or any other object:\nImplementation\npublic class Tree<T> {\n    private Node<T> root;\n\npublic Tree(T rootData) {\n root = new Node<T>();\n  root.data = rootData;\nroot.children = new ArrayList<Node<T>>();\n }\n\n\npublic static class Node<T> {\n private T data;\n   private Node<T> parent;\n   private List<Node<T>> children;\n  }}"
            },
            {
              "q":"Implement Pre-order traversal of Binary Tree using Recursion",
              "a":"For traversing a (non-empty) binary tree in pre-order fashion, we must do these three things for every node N starting from root node of the tree:\n(N) Process N itself.\n(L) Recursively traverse its left subtree. When this step is finished we are back at N again.\n(R) Recursively traverse its right subtree. When this step is finished we are back at N again."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child.",
          "icon": "assets/icons/dataStructure_algo/binary_tree.png"
        },
        {
          "sub_category_name":"Bit Manipulation",
          "junior_level":[
            {
              "q":"What is Bit?",
              "a":"A bit is a short for \"binary digit\". It is the smallest unit of measurement in computer data. It contains a single binary value of 0 or 1. A single bit can define a boolean value of True (1) or False (0), but in computer memory, bits are often grouped together in 8-bit clusters called bytes.\nSince a byte contains eight bits that each have two possible values, a single byte may have 28 or 256 different values."
            },
            {
              "q":"Name some bitwise operations you know",
              "a":"NOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa.\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\nAND|0 1 OR|0 1\n---+---- ---+----\n0|0 0 0|0 1\n1|0 1 1|1 1\nXOR|0 1 NOT|0 1\n---+---- ---+---\n0|0 1 |1 0\n1|1 0\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end.\nSigned Right Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right, preserving the sign (which is the first bit)\nZero Fill Right Shift ( >>> ): Shifts right by pushing zeros in from the left, filling in the left bits with 0s"
            },
            {
              "q":"Explain what is Bitwise operation?",
              "a":"Bitwise operators are used for manipulating a data at the bit level, also called as bit level programming. It is a fast and simple action, directly supported by the processor, and is used to manipulate values for comparisons and calculations.\nOn simple low-cost processors, typically, bitwise operations are substantially faster than division, several times faster than multiplication, and sometimes significantly faster than addition."
            },
            {
              "q":"What is a Byte?",
              "a":"A byte is made up of 8 bits and the highest value of a byte is 255, which would mean every bit is set. We will look at why a byte's maximum value is 255 in just a second.\nSo if all bits are set and the value = 255 my byte would look like this:\n1 Byte ( 8 bits )\nPlace Value 128 64 32 16 8 4 2 1\n1\n1\n1\n1\n1\n1\n1\n1\n=\n255\nLets take it right to left and add up all those values together 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255"
            },
            {
              "q":"What would the number 22 look like as a Byte?",
              "a":"A byte is made up of 8 bits and the highest value of a byte is 255, which would mean every bit is set.\nNow:\n1 Byte ( 8 bits )\nPlace Value 128 64 32 16 8 4 2 1\n0\n0\n0\n1\n0\n1\n1\n0\n=\n22\nLets take it right to left and add up all those values together:\n128 0 + 64 0 + 32 0 + 16 1 + 8 0 + 4 1 + 2 1 + 1 0 = 22"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization.",
          "icon": "assets/icons/dataStructure_algo/bitman.png"
        },
        {
          "sub_category_name":"Blockchain",
          "junior_level":[
            {
              "q":"What is blockchain?",
              "a":"Blockchain is a secure distributed ledger (data structure or database) that maintains a continuously growing list of ordered records, called “blocks”, that are linked using cryptography. Each block contains a cryptographic hash of the previous block, a timestamp, and transaction data.\nBy design, a blockchain is resistant to modification of the data. It is \"an open, distributed ledger that can record transactions between two parties efficiently and in a verifiable and permanent way\".\nOnce recorded, the data in any given block cannot be altered retroactively without alteration of all subsequent blocks, which requires consensus of the network majority."
            },
            {
              "q":"What is blockchain transaction?",
              "a":"Transactions are the things that give a blockchain purpose. They are the smallest building blocks of a blockchain system. Transactions generally consist of:\na recipient address,\na sender address,\nand a value.\nThis is not too different from a standard transaction that you would find on a credit card statement.\nA transaction changes the state of the agreed-correct blockchain. A blockchain is a shared, decentralized, distributed state machine. This means that all nodes (users of the blockchain system) independently hold their own copy of the blockchain, and the current known \"state\" is calculated by processing each transaction in order as it appears in the blockchain."
            },
            {
              "q":"What is proof-of-work?",
              "a":"A proof of work is a piece of data which is difficult (costly, time-consuming) to produce but easy for others to verify and which satisfies certain requirements. Producing a proof of work can be a random process with low probability so that a lot of trial and error is required on average before a valid proof of work is generated. Difficulty is a measure of how difficult it is to find a hash below a given target."
            },
            {
              "q":"Why does Blockchain need coins or tokens?",
              "a":"Tokens/Coins are used as a medium of exchange between the states. They are digital assets built in to perform a specific function within a blockchain.\nWhen someone does a transaction, there is a change of state, and coins are moved from one address to another address. Apart from that, transactions contain some additional data; this data can be mutated through the change of state. For this reason, blockchains need coins or tokens to incentivize the participants to join their networks."
            },
            {
              "q":"What is the blockchain data structure?",
              "a":"Basically the blockchain data structure is explained as a back-linked record of blocks of transactions, which is ordered. It can be saved as a file or in a plain database. Each block can be recognized by a hash, created utilizing the SHA256 cryptographic hash algorithm on the header of the block. Each block mentions a former block, also identified as the parent block, in the “previous block hash” field, in the block header."
            },
            {
              "q":"What is the purpose of a blockchain node?",
              "a":"A blockchain exists out of blocks of data. These blocks of data are stored on nodes (compare it to small servers). Nodes can be any kind of device (mostly computers, laptops or even bigger servers). Nodes form the infrastructure of a blockchain.\nAll nodes on a blockchain are connected to each other and they constantly exchange the latest blockchain data with each other so all nodes stay up to date. They store, spread and preserve the blockchain data, so theoretically a blockchain exists on nodes.\nA full node is basically a device (like a computer) that contains a full copy of the transaction history of the blockchain."
            },
            {
              "q":"What is the Genesis Block?",
              "a":"The first block in any blockchain is termed the genesis block. If you start at any block and follow the chain backwards chronologically, you will arrive at the genesis block. The genesis block is statically encoded within the client software, that it cannot be changed. Every node can identify the genesis block’s hash and structure, the fixed time of creation, and the single transactions within. Thus every node has a secure “root” from which is possible to build a trusted blockchain on."
            },
            {
              "q":"Explain the common structure of blockchains",
              "a":"Blockchains are composed of three core parts:\nBlock: A list of transactions recorded into a ledger over a given period. The size, period, and triggering event for blocks is different for every blockchain.\nChain: A hash that links one block to another, mathematically “chaining” them together.\nNetwork: The network is composed of “full nodes.” Think of them as the computer running an algorithm that is securing the network. Each node contains a complete record of all the transactions that were ever recorded in that blockchain."
            },
            {
              "q":"What is deterministic behavior?",
              "a":"If A + B = C, then no matter what the circumstances, A+B will always be equal to C. That is called deterministic behavior.\nHash functions are deterministic, meaning A’s hash will always be H(A)."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Blockchain.com is a cryptocurrency financial services company. The company began as the first Bitcoin blockchain explorer in 2011 and later created a cryptocurrency wallet that accounted for 28% of bitcoin transactions between 2012 and 2020.",
          "icon": "assets/icons/dataStructure_algo/blockchain.png"
        },
        {
          "sub_category_name":"Data Structures",
          "junior_level":[
            {
              "q":"Explain why Stack is a recursive data structure",
              "a":"A stack is a recursive data structure, so it's:\na stack is either empty or\nit consists of a top and the rest which is a stack by itself;"
            },
            {
              "q":"What is Stack?",
              "a":"A Stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. In the pushdown stacks only two operations are allowed: push the item into the stack, and pop the item out of the stack.\nThere are basically three operations that can be performed on stacks. They are:\ninserting an item into a stack (push).\ndeleting an item from the stack (pop).\ndisplaying the contents of the stack (peek or top).\nA stack is a limited access data structure - elements can be added and removed from the stack only at the top. push adds an item to the top of the stack, pop removes the item from the top. A helpful analogy is to think of a stack of books; you can remove only the top book, also you can add a new book on the top."
            },
            {
              "q":"What is Queue?",
              "a":"A queue is a container of objects (a linear collection) that are inserted and removed according to the first-in first-out (FIFO) principle. The process to add an element into queue is called Enqueue and the process of removal of an element from queue is called Dequeue."
            },
            {
              "q":"Name some characteristics of Array Data Structure",
              "a":"Arrays are:\nFinite (fixed-size) - An array is finite because it contains only limited number of elements.\nOrder -All the elements are stored one by one , in contiguous location of computer memory in a linear order and fashion\nHomogenous - All the elements of an array are of same data types only and hence it is termed as collection of homogenous"
            },
            {
              "q":"What is Linked List?",
              "a":"A linked list is a linear data structure where each element is a separate object. Each element (we will call it a node) of a list is comprising of two items - the data and a reference (pointer) to the next node. The last node has a reference to null. The entry point into a linked list is called the head of the list. It should be noted that head is not a separate node, but the reference to the first node. If the list is empty then the head is a null reference."
            },
            {
              "q":"What is Tree Data Structure?",
              "a":"Trees are well-known as a non-linear data structure. They don’t store data in a linear way. They organize data hierarchically.\nA tree is a collection of entities called nodes. Nodes are connected by edges. Each node contains a value or data or key, and it may or may not have a child node. The first node of the tree is called the root. Leaves are the last nodes on a tree. They are nodes without children."
            },
            {
              "q":"What is Priority Queue?",
              "a":"A priority queue is a data structure that stores priorities (comparable values) and perhaps associated information. A priority queue is different from a \"normal\" queue, because instead of being a \"first-in-first-out\" data structure, values come out in order by priority. Think of a priority queue as a kind of bag that holds priorities. You can put one in, and you can take out the current highest priority."
            },
            {
              "q":"What is Heap?",
              "a":"A Heap is a special Tree-based data structure which is an almost complete tree that satisfies the heap property:\nin a max heap, for any given node C, if P is a parent node of C, then the key (the value) of P is greater than or equal to the key of C.\nIn a min heap, the key of P is less than or equal to the key of C. The node at the \"top\" of the heap (with no parents) is called the root node.\nA common implementation of a heap is the binary heap, in which the tree is a binary tree."
            },
            {
              "q":"What is Hash Table?",
              "a":"A hash table (hash map) is a data structure that implements an associative array abstract data type, a structure that can map keys to values. Hash tables implement an associative array, which is indexed by arbitrary objects (keys). A hash table uses a hash function to compute an index, also called a hash value, into an array of buckets or slots, from which the desired value can be found."
            },
            {
              "q":"What is String in Data Structures?",
              "a":"A string is generally considered as a data type and is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding. String may also denote more general arrays or other sequence (or list) data types and structures."
            },
            {
              "q":"What is Binary Tree?",
              "a":"A normal tree has no restrictions on the number of children each node can have. A binary tree is made of nodes, where each node contains a \"left\" pointer, a \"right\" pointer, and a data element.\nThere are three different types of binary trees:\nFull binary tree: Every node other than leaf nodes has 2 child nodes.\nComplete binary tree: All levels are filled except possibly the last one, and all nodes are filled in as far left as possible.\nPerfect binary tree: All nodes have two children and all leaves are at the same level."
            },
            {
              "q":"What is a Graph?",
              "a":"A graph is a common data structure that consists of a finite set of nodes (or vertices) and a set of edges connecting them. A pair (x,y) is referred to as an edge, which communicates that the x vertex connects to the y vertex.\nGraphs are used to solve real-life problems that involve representation of the problem space as a network. Examples of networks include telephone networks, circuit networks, social networks (like LinkedIn, Facebook etc.)."
            },
            {
              "q":"What is Trie?",
              "a":"Trie (also called digital tree or prefix tree) is a tree-based data structure, which is used for efficient retrieval of a key in a large data-set of strings. Unlike a binary search tree, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated; i.e., the value of the key is distributed across the structure. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. Each complete English word has an arbitrary integer value associated with it (see image)."
            },
            {
              "q":"What is Complexity Analysis of Queue operations?",
              "a":"Queues offer random access to their contents by shifting the first element off the front of the queue. You have to do this repeatedly to access an arbitrary element somewhere in the queue. Therefore, access is O(n).\nSearching for a given value in the queue requires iterating until you find it. So search is O(n).\nInserting into a queue, by definition, can only happen at the back of the queue, similar to someone getting in line for a delicious Double-Double burger at In 'n Out. Assuming an efficient queue implementation, queue insertion is O(1).\nDeleting from a queue happens at the front of the queue. Assuming an efficient queue implementation, queue deletion is `O(1)."
            },
            {
              "q":"Name some disadvantages of Linked Lists?",
              "a":"Few disadvantages of linked lists are :\nThey use more memory than arrays because of the storage used by their pointers.\nDifficulties arise in linked lists when it comes to reverse traversing. For instance, singly linked lists are cumbersome to navigate backwards and while doubly linked lists are somewhat easier to read, memory is wasted in allocating space for a back-pointer.\nNodes in a linked list must be read in order from the beginning as linked lists are inherently sequential access.\nRandom access has linear time.\nNodes are stored incontiguously (no or poor cache locality), greatly increasing the time required to access individual elements within the list, especially with a CPU cache.\nIf the link to list's node is accidentally destroyed then the chances of data loss after the destruction point is huge. Data recovery is not possible.\nSearch is linear versus logarithmic for sorted arrays and binary search trees.\nDifferent amount of time is required to access each element.\nNot easy to sort the elements stored in the linear linked list."
            },
            {
              "q":"What are some types of Queue?",
              "a":"Queue can be classified into following types:\nSimple Queue - is a linear data structure in which removal of elements is done in the same order they were inserted i.e., the element will be removed first which is inserted first.\nCircular Queue - is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called Ring Buffer. Circular queue avoids the wastage of space in a regular queue implementation using arrays.\nPriority Queue - is a type of queue where each element has a priority value and the deletion of the elements is depended upon the priority value\nIn case of max-priority queue, the element will be deleted first which has the largest priority value\nIn case of min-priority queue the element will be deleted first which has the minimum priority value.\nDe-queue (Double ended queue) - allows insertion and deletion from both the ends i.e. elements can be added or removed from rear as well as front end.\nInput restricted deque - In input restricted double ended queue, the insertion operation is performed at only one end and deletion operation is performed at both the ends.\nOutput restricted deque - In output restricted double ended queue, the deletion operation is performed at only one end and insertion operation is performed at both the ends."
            },
            {
              "q":"Why and when should I use Stack or Queue data structures instead of Arrays/Lists?",
              "a":"Because they help manage your data in more a particular way than arrays and lists. It means that when you're debugging a problem, you won't have to wonder if someone randomly inserted an element into the middle of your list, messing up some invariants.\nArrays and lists are random access. They are very flexible and also easily corruptible. If you want to manage your data as FIFO or LIFO it's best to use those, already implemented, collections.\nMore practically you should:\nUse a queue when you want to get things out in the order that you put them in (FIFO)\nUse a stack when you want to get things out in the reverse order than you put them in (LIFO)\nUse a list when you want to get anything out, regardless of when you put them in (and when you don't want them to automatically be removed)."
            },
            {
              "q":"What are Dynamic Arrays?",
              "a":"A dynamic array is an array with a big improvement: automatic resizing.\nOne limitation of arrays is that they're fixed size, meaning you need to specify the number of elements your array will hold ahead of time. A dynamic array expands as you add more elements. So you don't need to determine the size ahead of time."
            },
            {
              "q":"What are some types of Linked List?",
              "a":"A singly linked list\nA doubly linked list is a list that has two references, one to the next node and another to previous node.\nA multiply linked list - each node contains two or more link fields, each field being used to connect the same set of data records in a different order of same set(e.g., by name, by department, by date of birth, etc.).\nA circular linked list - where last node of the list points back to the first node (or the head) of the list."
            },
            {
              "q":"What is the space complexity of a Hash Table?",
              "a":"The space complexity of a datastructure indicates how much space it occupies in relation to the amount of elements it holds. For example a space complexity of O(1) would mean that the datastructure alway consumes constant space no matter how many elements you put in there. O(n) would mean that the space consumption grows linearly with the amount of elements in it.\nA hashtable typically has a space complexity of O(n)."
            },
            {
              "q":"What is Binary Heap?",
              "a":"A Binary Heap is a Binary Tree with following properties:\nIt’s a complete tree (all levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.\nA Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.\n10 10\n/ \\ / \\\n20 100 15 30\n/ / \\ / \\\n30 40 50 100 40"
            },
            {
              "q":"What's the difference between the data structure Tree and Graph?",
              "a":"Graph:\nConsists of a set of vertices (or nodes) and a set of edges connecting some or all of them\nAny edge can connect any two vertices that aren't already connected by an identical edge (in the same direction, in the case of a directed graph)\nDoesn't have to be connected (the edges don't have to connect all vertices together): a single graph can consist of a few disconnected sets of vertices\nCould be directed or undirected (which would apply to all edges in the graph)\nTree:\nA type of graph (fit with in the category of Directed Acyclic Graphs (or a DAG))\nVertices are more commonly called \"nodes\"\nEdges are directed and represent an \"is child of\" (or \"is parent of\") relationship\nEach node (except the root node) has exactly one parent (and zero or more children)\nHas exactly one \"root\" node (if the tree has at least one node), which is a node without a parent\nHas to be connected\nIs acyclic, meaning it has no cycles: \"a cycle is a path AKA sequence of edges and vertices wherein a vertex is reachable from itself\"\nTrees aren't a recursive data structure"
            },
            {
              "q":"What is Binary Search Tree?",
              "a":"Binary search tree is a data structure that quickly allows to maintain a sorted list of numbers.\nIt is called a binary tree because each tree node has maximum of two children.\nIt is called a search tree because it can be used to search for the presence of a number in O(log n) time.\nThe properties that separates a binary search tree from a regular binary tree are:\nAll nodes of left subtree are less than root node\nAll nodes of right subtree are more than root node\nBoth subtrees of each node are also BSTs i.e. they have the above two properties"
            },
            {
              "q":"Under what circumstances are Linked Lists useful?",
              "a":"Linked lists are very useful when you need :\nto do a lot of insertions and removals, but not too much searching, on a list of arbitrary (unknown at compile-time) length.\nsplitting and joining (bidirectionally-linked) lists is very efficient.\nYou can also combine linked lists - e.g. tree structures can be implemented as \"vertical\" linked lists (parent/child relationships) connecting together horizontal linked lists (siblings).\nUsing an array based list for these purposes has severe limitations:\nAdding a new item means the array must be reallocated (or you must allocate more space than you need to allow for future growth and reduce the number of reallocations)\nRemoving items leaves wasted space or requires a reallocation\ninserting items anywhere except the end involves (possibly reallocating and) copying lots of the data up one position"
            },
            {
              "q":"What is the difference between Strings vs. Char arrays?",
              "a":"Char arrays:\nStatic-sized\nFast access\nFew built-in methods to manipulate strings\nA char array doesn’t define a data type\nStrings:\nSlower access\nDefine a data type\nDynamic allocation\nMore built-in functions to support string manipulations"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a data structure is a data organization, management, and storage format that is usually chosen for efficient access to data.",
          "icon": "assets/icons/dataStructure_algo/ds.png"
        },
        {
          "sub_category_name":"Divide & Conquer",
          "junior_level":[
            {
              "q":"What is the difference between Divide and Conquer and Dynamic Programming Algorithms?",
              "a":"Dynamic programming is an extension of Divide and Conquer paradigm.\nThey both work by recursively breaking down a problem into two or more sub-problems. The solutions to the sub-problems are then combined to give a solution to the original problem.\nIn Divide and conquer the sub-problems are independent of each other. Mergesort is a classic example of divide and conquer. The main difference between this example and the Fibonacci example is that in a mergesort, the division can (theoretically) be arbitrary, and no matter how you slice it up, you are still merging and sorting.\nIn dynamic programming the sub-problem are not independent. So to calculate new Fib number you have to know two previous values. For Merge sort you don't need to know the sorting order of previously sorted sub-array to sort another one.\nDynamic programming approach may be applied to the problem only if the problem has certain restrictions or prerequisites:\nOptimal substructure — optimal solution can be constructed from optimal solutions of its subproblems\nOverlapping sub-problems — problem can be broken down into subproblems which are reused several times or a recursive algorithm for the problem solves the same subproblem over and over rather than always generating new subproblems.\nDynamic programming approach extends divide and conquer approach with two techniques:\nmemoization (top-down cache filling)\ntabulation (bottom-up cache filling)"
            },
            {
              "q":"Compare Greedy vs Divide & Conquer vs Dynamic Programming Algorithms",
              "a":"Consider:\nGreedyDivide & ConquerDynamic Programming\nOptimises by making the best choice at the momentOptimises by breaking down a subproblem into simpler versions of itself and using multi-threading & recursion to solveSame as Divide and Conquer, but optimises by caching the answers to each subproblem as not to repeat the calculation twice.\nDoesn't always find the optimal solution, but is very fastAlways finds the optimal solution, but is slower than GreedyAlways finds the optimal solution, but could be pointless on small datasets.\nRequires almost no memoryRequires some memory to remember recursive callsRequires a lot of memory for memoisation / tabulation"
            },
            {
              "q":"How does Merge Sort work?",
              "a":"Merge sort is a divide-and-conquer, comparison-based sorting algorithm based on the idea of breaking down a list into several sub-lists until each sublist consists of a single element and merging those sublists in a manner that results into a sorted list. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. Can be used as external sorting (when the data to be sorted is too large to fit into memory).\nThere are two methods for implementing a Merge Sort algorithm:\nThe Top-Down (recursive) approach. Given an array of size N, the algorithm recursively breaks the array in half and then merges the results together.\nThe Bottom-Up (iterative) approach. Rather than breaking the overall array into distinct pieces, bottum-up mergesort loops over the array using intervals of varying sizes. Each interval is sorted and merged together; subsequent loops over the array have larger intervals, effectively merging our previously sorted (smaller) intervals together."
            },
            {
              "q":"Convert a Binary Tree to a Doubly Linked List",
              "a":"This can be achieved by traversing the tree in the in-order manner that is, left the child -> root ->right node.\nIn an in-order traversal, first the left sub-tree is traversed, then the root is visited, and finally the right sub-tree is traversed.\nOne simple way of solving this problem is to start with an empty doubly linked list. While doing the in-order traversal of the binary tree, keep inserting each element output into the doubly linked list. But, if we look at the question carefully, the interviewer wants us to convert the binary tree to a doubly linked list in-place i.e. we should not create new nodes for the doubly linked list.\nThis problem can be solved recursively using a divide and conquer approach. Below is the algorithm specified.\nStart with the root node and solve left and right sub-trees recursively\nAt each step, once left and right sub-trees have been processed:\nfuse output of left subtree with root to make the intermediate result\nfuse intermediate result (built in the previous step) with output from the right sub-tree to make the final result of the current recursive call"
            },
            {
              "q":"How does QuickSort work?",
              "a":"Quick Sort is a divide and conquer, comparison, in-place algorithm. Efficient implementations of Quicksort are not a stable sort. When implemented well, it can be about two or three times faster than its main competitors, merge sort and heapsort.\nQuicksort determines something called a pivot, which is a somewhat arbitrary element in the collection. Using the pivot point, quicksort partitions (or divides) the larger unsorted collection into two, smaller lists. It moves all the elements smaller than the pivot to the left (before) the pivot element, and moves all the elements larger than the pivot to the right (after) the pivot element. Even though the list isn’t completely sorted yet, we know that the items are in the correct order in relation to the pivot. This means that we never have to compare elements on the left side of the partition to elements on the right side of the partition. We already know they are in their correct spots in relation to the pivot. The sub-lists are then sorted recursively.\nIdeally, partitioning would use the median of the given values (in the array), but the median can only be found by scanning the whole array and this would slow the algorithm down. In that case the two partitions would be of equal size; In the simplest versions of quick sort an arbitrary element, typically the last (rightmost) element is used as an estimate (guess) of the median."
            },
            {
              "q":"What is Fibonacci Search technique?",
              "a":"Fibonacci search is a search algorithm based on divide and conquer principle that can find an element in the given sorted array with the help of Fibonacci series in O(log n) time complexity.\nCompared to binary search where the sorted array is divided into two equal-sized parts, one of which is examined further, Fibonacci search divides the array into two unequal parts that have sizes that are consecutive Fibonacci numbers.\nSome facts to note:\nFibonacci search has the advantage that one only needs addition and subtraction to calculate the indices of the accessed array elements, while classical binary search needs bit-shift, division or multiplication, operations that were less common at the time Fibonacci search was first published\nBinary search works by dividing the seek area in equal parts 1:1. Fibonacci search can divide it into parts approaching 1:1.618 while using the simpler operations.\nOn average, Fibonacci search requires 4% more comparisons than binary search\nFibonacci Search examines relatively closer elements in subsequent steps. So when input array is big that cannot fit in CPU cache or even in RAM, Fibonacci Search can be useful. Thus Fibonacci search may have the advantage over binary search in slightly reducing the average time needed to access a non-uniform access memory storage.\nLet the length of given array be length and the element to be searched be key.\nSteps of Fibonacci Search:\nFind the smallest Fibonacci number F(n) that F(n) - 1 >= length\nF(n) = F(n-1) + F(n-2) => F(n) - 1 = [ F(n-1) - 1 ] + (1) + [ F(n-2) - 1 ], where (1) here is for the middle item (the m in below figure).\n// |<--------- p: F(n) - 1 --------->|\n// |<--- q: F(n-1) - 1 --->| |<-- r: F(n-2) - 1 -->|\n// +----+---+--------------------+---+---+---+---+\n// | | k | | m | | k | |\n// +----+---+--------------------+---+---+---+---+\n// ^\nIf key < m, then search key in q = F(n-1) - 1:\n// |<--- p: F(n-1) - 1 --->|\n// |<----- q ----->| |<-- r -->|\n// +----+---+------+---+---------+\n// | | k | | m | |\n// +----+---+------+---+---------+\nfor that set p = F(n-1) - 1, q = F(n-2) - 1, r = F(n-3) - 1 and repeat the process. Here Fibonacci numbers go backward once. These indicate elimination of approximately one-third of the remaining array.\nIf key > m, then repeat then search key in r = F(n-2) - 1:\n// |<-- p: F(n-2) - 1 -->|\n// |<--- q --->| |<- r ->|\n// +---+---+---+\n// | | k | | m\n// +---+---+---+\n// ^\nFor that, set p = F(n-2) - 1, q = F(n-3) - 1, r = F(n-4) - 1 and repeat the process. Here Fibonacci numbers go backward twice, indicating elimination of approximately two-third of the remaining array."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, divide and conquer is an algorithm design paradigm. A divide-and-conquer algorithm recursively breaks down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly.",
          "icon": "assets/icons/dataStructure_algo/divide_conquer.png"
        },
        {
          "sub_category_name":"Dynamic Programming",
          "junior_level":[
            {
              "q":"What is Dynamic Programming?",
              "a":"Dynamic programming is all about ordering your computations in a way that avoids recalculating duplicate work. More specifically, Dynamic Programming is a technique used to avoid computing multiple times the same subproblem in a recursive algorithm. DP algorithms could be implemented with recursion, but they don't have to be.\nWith dynamic programming, you store your results in some sort of table generally. When you need the answer to a problem, you reference the table and see if you already know what it is. If not, you use the data in your table to give yourself a stepping stone towards the answer.\nThere are two approaches to apply Dynamic Programming:\nThe top-down or memoization. When the recursion does a lot of unecessary calculation, an easy way to solve this is to cache the results and to check before executing the call if the result is already in the cache.\nThe bottom-up or tabulation approach. A better way to do this is to get rid of the recursion all-together by evaluating the results in the right order and building the array as we iterate. The partial results are available when needed if the iteration is done in the right order.\nTOP of the tree\nfib(4)\nfib(3)...................... + fib(2)\nfib(2)......... + fib(1) fib(1)........... + fib(0)\nfib(1) + fib(0) fib(1) fib(1) fib(0)\nfib(1) fib(0)\nBOTTOM of the tree"
            },
            {
              "q":"How Dynamic Programming is different from Recursion and Memoization?",
              "a":"Memoization is when you store previous results of a function call (a real function always returns the same thing, given the same inputs). It doesn't make a difference for algorithmic complexity before the results are stored.\nRecursion is the method of a function calling itself, usually with a smaller dataset. Since most recursive functions can be converted to similar iterative functions, this doesn't make a difference for algorithmic complexity either.\nDynamic programming is the process of solving easier-to-solve sub-problems and building up the answer from that. Most DP algorithms will be in the running times between a Greedy algorithm (if one exists) and an exponential (enumerate all possibilities and find the best one) algorithm.\nDP algorithms could be implemented with recursion, but they don't have to be.\nDP algorithms can't be sped up by memoization, since each sub-problem is only ever solved (or the \"solve\" function called) once."
            },
            {
              "q":"What are some characteristics of Dynamic Programming?",
              "a":"The key idea of DP is to save answers of overlapping smaller sub-problems to avoid recomputation. For that:\nAn instance is solved using the solutions for smaller instances.\nThe solutions for a smaller instance might be needed multiple times, so store their results in a table.\nThus each smaller instance is solved only once.\nAdditional space is used to save time."
            },
            {
              "q":"What are pros and cons of Memoization or Top-Down approach?",
              "a":"Pros:\nMemoization is very easy to code (you can generally* write a \"memoizer\" annotation or wrapper function that automatically does it for you), and should be your first line of approach. It feels more natural. You can take a recursive function and memoize it by a mechanical process (first lookup answer in cache and return it if possible, otherwise compute it recursively and then before returning, you save the calculation in the cache for future use), whereas doing bottom up dynamic programming requires you to encode an order in which solutions are calculated.\nTop-down only solves sub-problems used by your solution whereas bottom-up might waste time on redundant sub-problems.\nCons:\nWith memoization, if the tree is very deep (e.g. fib(106)), you will run out of stack space, because each delayed computation must be put on the stack, and you will have 106 of them."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Dynamic programming is both a mathematical optimization method and a computer programming method. The method was developed by Richard Bellman in the 1950s and has found applications in numerous fields, from aerospace engineering to economics.",
          "icon": "assets/icons/dataStructure_algo/dynamic_programming.png"
        },
        {
          "sub_category_name":"Fibonacci Sequence",
          "junior_level":[
            {
              "q":"What is Fibonacci Sequence of numbers?",
              "a":"The Fibonacci Sequence is the series of numbers:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...\nFibonacci sequence characterized by the fact that every number after the first two is the sum of the two preceding ones:\nFibonacci(0) = 0, Fibonacci(1) = 1,Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2)\nFibonacci sequence, appears a lot in nature. Patterns such as spirals of shells, curve of waves, seed heads, pinecones, and branches of trees can all be described using this mathematical sequence. The fact that things as large as spirals of galaxies, and as small as DNA molecules follow the Golden Ratio rule suggests that Fibonacci sequence is one of the most fundamental characteristics of the Universe."
            },
            {
              "q":"What is Golden Ratio?",
              "a":"When we take any two successive (one after the other) Fibonacci Numbers, their ratio is very close to the Golden Ratio φ which is approximately 1.618034.... In fact, the bigger the pair of Fibonacci Numbers, the closer the approximation. Let us try a few:\n3/2 = 1.5\n5/3 = 1.666666666...\n...\n233/377 = 1.618055556...\nThis also works when we pick two random whole numbers to begin the sequence, such as 192 and 16 (we get the sequence 192, 16, 208, 224, 432, 656, 1088, 1744, 2832, 4576, 7408, 11984, 19392, 31376, ...):\n16/192 = 0.08333333...\n208/16 = 13\n...\n11984/7408 = 1.61771058...\n19392/11984 = 1.61815754..."
            },
            {
              "q":"Return the N-th value of the Fibonacci sequence Recursively",
              "a":"function fib(n) { if (n < 2){ return n } return fib(n - 1) + fib (n - 2)}"
            },
            {
              "q":"Return the N-th value of the Fibonacci sequence. Solve in O(n) time",
              "a":"function fib(n){\nlet arr = [0, 1]\nfor (let i = 2; i < n + 1; i++){\narr.push(arr[i - 2] + arr[i -1])\n}\nreturn arr[n]\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In mathematics, the Fibonacci numbers, commonly denoted Fₙ, form a sequence, the Fibonacci sequence, in which each number is the sum of the two preceding ones. The sequence commonly starts from 0 and 1, although some authors omit the initial terms and start the sequence from 1 and 1 or from 1 and 2.",
          "icon": "assets/icons/dataStructure_algo/fi_sequence.png"
        },
        {
          "sub_category_name":"Graph Theory",
          "junior_level":[
            {
              "q":"What is a Graph?",
              "a":"A graph is a common data structure that consists of a finite set of nodes (or vertices) and a set of edges connecting them. A pair (x,y) is referred to as an edge, which communicates that the x vertex connects to the y vertex.\nGraphs are used to solve real-life problems that involve representation of the problem space as a network. Examples of networks include telephone networks, circuit networks, social networks (like LinkedIn, Facebook etc.)."
            },
            {
              "q":"What's the difference between the data structure Tree and Graph?",
              "a":"Graph:\nConsists of a set of vertices (or nodes) and a set of edges connecting some or all of them\nAny edge can connect any two vertices that aren't already connected by an identical edge (in the same direction, in the case of a directed graph)\nDoesn't have to be connected (the edges don't have to connect all vertices together): a single graph can consist of a few disconnected sets of vertices\nCould be directed or undirected (which would apply to all edges in the graph)\nTree:\nA type of graph (fit with in the category of Directed Acyclic Graphs (or a DAG))\nVertices are more commonly called \"nodes\"\nEdges are directed and represent an \"is child of\" (or \"is parent of\") relationship\nEach node (except the root node) has exactly one parent (and zero or more children)\nHas exactly one \"root\" node (if the tree has at least one node), which is a node without a parent\nHas to be connected\nIs acyclic, meaning it has no cycles: \"a cycle is a path AKA sequence of edges and vertices wherein a vertex is reachable from itself\"\nTrees aren't a recursive data structure"
            },
            {
              "q":"List some ways of representing Graphs",
              "a":"Edge Lists. We have an array of two vertex numbers, or an array of objects containing the vertex numbers of the vertices that the edges are incident on (plus weight). Edge lists are simple, but if we want to find whether the graph contains a particular edge, we have to search through the edge list. If the edges appear in the edge list in no particular order, that's a linear search through E edges.\n[ [0,1], [0,6], [0,8], [1,4], [1,6], [1,9], [2,4], [2,6], [3,4], [3,5], [3,8], [4,5], [4,9], [7,8], [7,9] ]\nAdjacency Matrices. With an adjacency matrix, we can find out whether an edge is present in constant time, by just looking up the corresponding entry in the matrix - we can query whether edge (i, j) is in the graph by looking at graph[i][j] value. For a sparse graph, the adjacency matrix is mostly 0s, and we use lots of space to represent only a few edges. For an undirected graph, the adjacency matrix is symmetric.\n[ [0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0] ]\nAdjacency Lists. For each vertex i, store an array of the vertices adjacent to it (or array of tuples for weighted graph). To find out whether an edge (i,j) is present in the graph, we go to i's adjacency list in constant time and then look for j in i's adjacency list.\n[ [1, 6, 8], // 0 [0, 4, 6, 9], // 1 [4, 6], // 2 [4, 5, 8], [1, 2, 3, 5, 9], [3, 4], [0, 1, 2], [8, 9], [0, 3, 7], [1, 4, 7] ] // N"
            },
            {
              "q":"Explain the BSF (Breadth First Search) traversing method",
              "a":"Breadth First Search (BFS) is the traversing method used in graphs. It uses a queue for storing the visited vertices. In this method the emphasize is on the vertices of the graph, one vertex is selected at first then it is visited and marked. The vertices adjacent to the visited vertex are then visited and stored in the queue sequentially. A node is fully explored before visiting any other node in the graph, in other words, it traverses shallowest unexplored nodes first.\nThe BST algorithm works as follows:\nStart by putting any one of the graph's vertices at the back of a queue.\nTake the front item of the queue and add it to the visited list.\nCreate a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the back of the queue.\nKeep repeating steps 2 and 3 until the queue is empty.\nBST example step-by-step:\nWe have a graph whose vertices are A, B, C, D, E, F, G. Considering A as starting point. The steps involved in the process are:\nVertex A is expanded and stored in the queue.\nVertices B, D and G successors of A, are expanded and stored in the queue meanwhile Vertex A removed.\nNow B at the front end of the queue is removed along with storing its successor vertices E and F.\nVertex D is at the front end of the queue is removed, and its connected node F is already visited.\nVertex G is removed from the queue, and it has successor E which is already visited.\nNow E and F are removed from the queue, and its successor vertex C is traversed and stored in the queue.\nAt last C is also removed and the queue is empty which means we are done.\nThe generated Output is – A, B, D, G, E, F, C."
            },
            {
              "q":"Name some common types and categories of Graphs",
              "a":"In an undirected graph, nodes are connected by edges that are all bidirectional. For example if an edge connects node 1 and 2, we can traverse from node 1 to node 2, and from node 2 to 1.\nIn a directed graph, nodes are connected by directed edges – they only go in one direction. For example, if an edge connects node 1 and 2, but the arrow head points towards 2, we can only traverse from node 1 to node 2 – not in the opposite direction.\nA weight is a numerical value attached to each individual edge. If edges in our graph have weights then your graph is said to be a weighted graph\nif the edges do not have weights, the graph is said to be unweighted\nA cyclic graph is a directed graph which contains a path from at least one node back to itself. In simple terms cyclic graphs contain a cycle.\nAn acyclic graph is a directed graph which contains absolutely no cycle, that is no node can be traversed back to itself.\nDense graph is a graph in which the number of edges is close to the maximal (max) number of edges.\nSparse graph is a graph in which the number of edges is close to the minimal (min) number of edges. Sparse graph can be a disconnected graph.\nA graph is connected if any two vertices of the graph are connected by a path.\nA graph is disconnected if at least two vertices of the graph are not connected by a path.\nIn a multigraph, there can be more than one edge from vertex 1 to vertex 2.\nIn a simple graph there is at most one."
            },
            {
              "q":"What is difference between BFS and Dijkstra's algorithms when looking for shortest path?",
              "a":"Breadth-first search is just Dijkstra's algorithm with all edge weights equal to 1.\nBFS basically just expands the search by one “step” (link, edge, whatever you want to call it in your application) on every iteration, which happens to have the effect of finding the smallest number of steps it takes to get to any given node from your source (“root”)\nBreadth-first search can be viewed as a special-case of Dijkstra's algorithm on unweighted graphs, where the priority queue degenerates into a FIFO queue.\nOperations on a regular queue are O(1).\nBFS runs in O(E+V).\nDijkstra's algorithm is conceptually breadth-first search that respects edge costs.\nFor example, in routing the distances (or weights) could be assigned by speed, cost, preference, etc.\nDijkstra's uses a priority queue data structure to keep track of the frontier of unvisited nodes.\nOperations on a priority queue are O(log n).\nDijkstra's runs in O((V+E)*log(V))\nThe process for exploring the graph is structurally the same in both cases."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In mathematics, graph theory is the study of graphs, which are mathematical structures used to model pairwise relations between objects. A graph in this context is made up of vertices which are connected by edges.",
          "icon": "assets/icons/dataStructure_algo/graph.png"
        },
        {
          "sub_category_name":"Greedy Algorithms",
          "junior_level":[
            {
              "q":"What is a Greedy Algorithm?",
              "a":"We call algorithms greedy when they utilise the greedy property. The greedy property is:\nAt that exact moment in time, what is the optimal choice to make?\nGreedy algorithms are greedy. They do not look into the future to decide the global optimal solution. They are only concerned with the optimal solution locally. This means that the overall optimal solution may differ from the solution the greedy algorithm chooses.\nThey never look backwards at what they've done to see if they could optimise globally. This is the main difference between Greedy Algorithms and Dynamic Programming."
            },
            {
              "q":"What Are Greedy Algorithms Used For?",
              "a":"Greedy algorithms are quick. A lot faster than the two other alternatives (Divide & Conquer, and Dynamic Programming). They're used because they're fast. Sometimes, Greedy algorithms give the global optimal solution every time. Some of these algorithms are:\nDijkstra's Algorithm\nKruskal's algorithm\nPrim's algorithm\nHuffman trees\nThese algorithms are Greedy, and their Greedy solution gives the optimal solution."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "A greedy algorithm is any algorithm that follows the problem-solving heuristic of making the locally optimal choice at each stage.",
          "icon": "assets/icons/dataStructure_algo/greedy.png"
        },
        {
          "sub_category_name":"Hash Tables",
          "junior_level":[
            {
              "q":"What is Hash Table?",
              "a":"A hash table (hash map) is a data structure that implements an associative array abstract data type, a structure that can map keys to values. Hash tables implement an associative array, which is indexed by arbitrary objects (keys). A hash table uses a hash function to compute an index, also called a hash value, into an array of buckets or slots, from which the desired value can be found."
            },
            {
              "q":"What is the space complexity of a Hash Table?",
              "a":"The space complexity of a datastructure indicates how much space it occupies in relation to the amount of elements it holds. For example a space complexity of O(1) would mean that the datastructure alway consumes constant space no matter how many elements you put in there. O(n) would mean that the space consumption grows linearly with the amount of elements in it.\nA hashtable typically has a space complexity of O(n)."
            },
            {
              "q":"Explain what is Hash Value?",
              "a":"A Hash Value (also called as Hashes or Checksum) is a string value (of specific length), which is the result of calculation of a Hashing Algorithm. Hash Values have different uses:\nIndexing for Hash Tables\nDetermine the Integrity of any Data (which can be a file, folder, email, attachments, downloads etc)."
            },
            {
              "q":"Define what is a Hash Function?",
              "a":"A hash function is any function that can be used to map data of arbitrary size to fixed-size values. The values returned by a hash function are called hash values, hash codes, digests, or simply hashes. The values are used to index a fixed-size table called a hash table. Use of a hash function to index a hash table is called hashing or scatter storage addressing.\nMathematically speaking, a hash function is usually defined as a mapping from the universe of elements you want to store in the hash table to the range {0, 1, 2, .., numBuckets - 1}.\nSome properties of Hash Functions are:\nVery fast to compute (nearly constant)\nOne way; can not be reversed\nOutput does not reveal information on input\nHard to find collisions (different data with same hash)\nImplementation is based on parity-preserving bit operations (XOR and ADD), multiply, or divide."
            },
            {
              "q":"What is Hashing?",
              "a":"Hashing is the practice of using an algorithm (or hash function) to map data of any size to a fixed length. This is called a hash value (or sometimes hash code or hash sums or even a hash digest if you’re feeling fancy). In hashing, keys are converted into hash values or indexes by using hash functions. Hashing is a one-way function."
            },
            {
              "q":"What is the difference between Hashing and Hash Tables?",
              "a":"Hashing is simply the act of turning a data chunk of arbitrary length into a fixed-width value (hereinafter called a hash value) that can be used to represent that chunk in situations where dealing with the original data chunk would be inconvenient.\nA hash table is one of those situations; it simply stores references to such data chunks in a table indexed by each chunk's hash value. This way, instead of potentially comparing your desired key chunk against a huge number of chunks, you simply compute the hash value of the key chunk and do a much faster lookup with that hash value."
            },
            {
              "q":"Provide a simple example of Hash Function",
              "a":"A one-way function is not just a hash function - a function that loses information - but a function f for which, given an image y, it is difficult to find a pre-image x such that f(x)=y.\nA very simple example of a hash function that does not use any advanced math, is this simple parity function:\ndef hash(n: Nat)\nif n.even?\n0\nelse\n1\nend\nend\nAs you can see, it maps a large input space (the natural numbers) into a small output space (the set {0, 1}). And it is one-way: if I tell you that the result is 1, you can't tell me what the input was.\nThis is why they are called one-way: you can compute an image but you can't find a pre-image for a given image."
            },
            {
              "q":"Detect if a List is Cyclic using Hash Table",
              "a":"To detect if a list is cyclic, we can check whether a node had been visited before. A natural way is to use a hash table.\nAlgorithm\nWe go through each node one by one and record each node's reference (or memory address) in a hash table. If the current node is null, we have reached the end of the list and it must not be cyclic. If current node’s reference is in the hash table, then return true."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computing, a hash table, also known as hash map or dictionary, is a data structure that implements a set abstract data type, a structure that can map keys to values",
          "icon": "assets/icons/dataStructure_algo/hash.png"
        },
        {
          "sub_category_name":"Heaps and Maps",
          "junior_level":[
            {
              "q":"What is Priority Queue?",
              "a":"A priority queue is a data structure that stores priorities (comparable values) and perhaps associated information. A priority queue is different from a \"normal\" queue, because instead of being a \"first-in-first-out\" data structure, values come out in order by priority. Think of a priority queue as a kind of bag that holds priorities. You can put one in, and you can take out the current highest priority."
            },
            {
              "q":"What is Heap?",
              "a":"A Heap is a special Tree-based data structure which is an almost complete tree that satisfies the heap property:\nin a max heap, for any given node C, if P is a parent node of C, then the key (the value) of P is greater than or equal to the key of C.\nIn a min heap, the key of P is less than or equal to the key of C. The node at the \"top\" of the heap (with no parents) is called the root node.\nA common implementation of a heap is the binary heap, in which the tree is a binary tree."
            },
            {
              "q":"How is Binary Heap usually implemented?",
              "a":"A binary heaps are commonly implemented with an array. Any binary tree can be stored in an array, but because a binary heap is always a complete binary tree, it can be stored compactly. No space is required for pointers; instead, the parent and children of each node can be found by arithmetic on array indices:\nThe root element is 0\nLeft child : (2*i)+1\nRight child : (2*i)+2\nParent child : (i-1)/2"
            },
            {
              "q":"What is Binary Heap?",
              "a":"A Binary Heap is a Binary Tree with following properties:\nIt’s a complete tree (all levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.\nA Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.\n10 10\n/ \\ / \\\n20 100 15 30\n/ / \\ / \\\n30 40 50 100 40"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "So a heap map, also known as a heap, is a set of values stored in a specific order that allows efficient access or modification. Heap maps are usually represented in a tree structure and only two sorting directions the tree's values can be stored.",
          "icon": "assets/icons/dataStructure_algo/heap.png"
        },
        {
          "sub_category_name":"Linked Lists",
          "junior_level":[
            {
              "q":"Name some advantages of Linked List",
              "a":"Linked Lists are Dynamic Data Structure - it can grow and shrink at runtime by allocating and deallocating memory. So there is no need to give initial size of linked list.\nInsertion and Deletion are simple to implement - Unlike array here we don’t have to shift elements after insertion or deletion of an element. In linked list we just have to update the address present in next pointer of a node.\nEfficient Memory Allocation/No Memory Wastage - In case of array there is lot of memory wastage, like if we declare an array of size 10 and store only 6 elements in it then space of 4 elements are wasted. There is no such problem in linked list as memory is allocated only when required."
            },
            {
              "q":"Define Linked List",
              "a":"A linked list is a linear data structure where each element is a separate object. Each element (we will call it a node) of a list is comprising of two items - the data and a reference (pointer) to the next node. The last node has a reference to null. The entry point into a linked list is called the head of the list. It should be noted that head is not a separate node, but the reference to the first node. If the list is empty then the head is a null reference."
            },
            {
              "q":"Name some disadvantages of Linked Lists?",
              "a":"They use more memory than arrays because of the storage used by their pointers.\nDifficulties arise in linked lists when it comes to reverse traversing. For instance, singly linked lists are cumbersome to navigate backwards and while doubly linked lists are somewhat easier to read, memory is wasted in allocating space for a back-pointer.\nNodes in a linked list must be read in order from the beginning as linked lists are inherently sequential access.\nRandom access has linear time.\nNodes are stored incontiguously (no or poor cache locality), greatly increasing the time required to access individual elements within the list, especially with a CPU cache.\nIf the link to list's node is accidentally destroyed then the chances of data loss after the destruction point is huge. Data recovery is not possible.\nSearch is linear versus logarithmic for sorted arrays and binary search trees.\nDifferent amount of time is required to access each element.\nNot easy to sort the elements stored in the linear linked list."
            },
            {
              "q":"What is time complexity of Linked List operations?",
              "a":"A linked list can typically only be accessed via its head node. From there you can only traverse from node to node until you reach the node you seek. Thus access is O(n).\nSearching for a given value in a linked list similarly requires traversing all the elements until you find that value. Thus search is O(n).\nInserting into a linked list requires re-pointing the previous node (the node before the insertion point) to the inserted node, and pointing the newly-inserted node to the next node. Thus insertion is O(1).\nDeleting from a linked list requires re-pointing the previous node (the node before the deleted node) to the next node (the node after the deleted node). Thus deletion is O(1)."
            },
            {
              "q":"Under what circumstances are Linked Lists useful?",
              "a":"Adding a new item means the array must be reallocated (or you must allocate more space than you need to allow for future growth and reduce the number of reallocations)\nRemoving items leaves wasted space or requires a reallocation\ninserting items anywhere except the end involves (possibly reallocating and) copying lots of the data up one position"
            },
            {
              "q":"How to implement Linked List Using Stack?",
              "a":"To add an item at the head, simply push the item onto the stack.\nTo remove from the head, pop from the stack.\nTo insert into the middle somewhere, pop items from the \"list\" stack and push them onto the temporary stack until you get to your insertion point. Push the new item onto the \"list\" stack, then pop from the temporary stack and push back onto the \"list\" stack. Deletion of an arbitrary node is similar."
            },
            {
              "q":"Detect if a List is Cyclic using Hash Table",
              "a":"Time complexity : O(n) . We visit each of the n elements in the list at most once. Adding a node to the hash table costs only O(1) time.\nSpace complexity: O(n) . The space depends on the number of elements added to the hash table, which contains at most n elements."
            },
            {
              "q":"Convert a Singly Linked List to Circular Linked List",
              "a":"Create a copy of head pointer, let's say temp.\nUsing a loop, traverse linked list till tail node (last node) using temp pointer.\nNow set the next pointer of tail node to head node. temp\\->next = head"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence.",
          "icon": "assets/icons/dataStructure_algo/linklist.png"
        },
        {
          "sub_category_name":"Queues",
          "junior_level":[
            {
              "q":"List some Queue real-life applications",
              "a":"Queue, as the name suggests is used whenever we need to manage any group of objects in an order in which the first one coming in, also gets out first while the others wait for their turn, like in the following scenarios:\nServing requests on a single shared resource, like a printer, CPU task scheduling etc.\nIn real life scenario, Call Center phone systems uses Queues to hold people calling them in an order, until a service representative is free.\nHandling of interrupts in real-time systems. The interrupts are handled in the same order as they arrive i.e First come first served."
            },
            {
              "q":"What is Queue?",
              "a":"A queue is a container of objects (a linear collection) that are inserted and removed according to the first-in first-out (FIFO) principle. The process to add an element into queue is called Enqueue and the process of removal of an element from queue is called Dequeue."
            },
            {
              "q":"What is Complexity Analysis of Queue operations?",
              "a":"Queues offer random access to their contents by shifting the first element off the front of the queue. You have to do this repeatedly to access an arbitrary element somewhere in the queue. Therefore, access is O(n).\nSearching for a given value in the queue requires iterating until you find it. So search is O(n).\nInserting into a queue, by definition, can only happen at the back of the queue, similar to someone getting in line for a delicious Double-Double burger at In 'n Out. Assuming an efficient queue implementation, queue insertion is O(1).\nDeleting from a queue happens at the front of the queue. Assuming an efficient queue implementation, queue deletion is `O(1)."
            },
            {
              "q":"What are some types of Queue?",
              "a":"Queue can be classified into following types:\nSimple Queue - is a linear data structure in which removal of elements is done in the same order they were inserted i.e., the element will be removed first which is inserted first.\nCircular Queue - is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called Ring Buffer. Circular queue avoids the wastage of space in a regular queue implementation using arrays.\nPriority Queue - is a type of queue where each element has a priority value and the deletion of the elements is depended upon the priority value\nIn case of max-priority queue, the element will be deleted first which has the largest priority value\nIn case of min-priority queue the element will be deleted first which has the minimum priority value.\nDe-queue (Double ended queue) - allows insertion and deletion from both the ends i.e. elements can be added or removed from rear as well as front end.\nInput restricted deque - In input restricted double ended queue, the insertion operation is performed at only one end and deletion operation is performed at both the ends.\nOutput restricted deque - In output restricted double ended queue, the deletion operation is performed at only one end and insertion operation is performed at both the ends."
            },
            {
              "q":"Why and when should I use Stack or Queue data structures instead of Arrays/Lists?",
              "a":"Because they help manage your data in more a particular way than arrays and lists. It means that when you're debugging a problem, you won't have to wonder if someone randomly inserted an element into the middle of your list, messing up some invariants.\nArrays and lists are random access. They are very flexible and also easily corruptible. If you want to manage your data as FIFO or LIFO it's best to use those, already implemented, collections.\nMore practically you should:\nUse a queue when you want to get things out in the order that you put them in (FIFO)\nUse a stack when you want to get things out in the reverse order than you put them in (LIFO)\nUse a list when you want to get anything out, regardless of when you put them in (and when you don't want them to automatically be removed)."
            },
            {
              "q":"Implement a Queue using two Stacks",
              "a":"Problem\nSuppose we have two stacks and no other temporary variable. Is to possible to \"construct\" a queue data structure using only the two stacks?\nKeep two stacks, let's call them inbox and outbox.\nEnqueue:\nPush the new element onto inbox\nDequeue:\nIf outbox is empty, refill it by popping each element from inbox and pushing it onto outbox\nPop and return the top element from outbox\nComplexity Analysis\nTime:\nConstant\nO(1)\nDbl. Logarithmic\nO(log log n)\nLogarithmic\nO(log n)\nSquare Root\nO(√n)\nLinear\nO(n)\nLinearithmic\nO(n log n)\nQuadratic\nO(n2)\nExponential\nO(2n)\nFactorial\nO(n!)\nSpace:\nConstant\nO(1)\nDbl. Logarithmic\nO(log log n)\nLogarithmic\nO(log n)\nSquare Root\nO(√n)\nLinear\nO(n)\nLinearithmic\nO(n log n)\nQuadratic\nO(n2)\nExponential\nO(2n)\nFactorial\nO(n!)\nTime: O(1)\nSpace: O(1)\nIn the worst case scenario when outbox stack is empty, the algorithm pops n elements from inbox stack and pushes n elements to outbox, where n is the queue size. This gives 2*n operations, which is O(n). But when outbox stack is not empty the algorithm has O(1) time complexity that gives amortised O(1).\nImplementation\nC# CS\nJavaScript JS\nJava Java\nPython PY\npublic class Queue<T> where T : class\n{\nprivate Stack<T> input = new Stack<T>();\nprivate Stack<T> output = new Stack<T>();\npublic void Enqueue(T t)\n{\ninput.Push(t);\n}\npublic T Dequeue()\n{\nif (output.Count == 0)\n{\nwhile (input.Count != 0)\n{\noutput.Push(input.Pop());\n}\n}\nreturn output.Pop();\n}\n}"
            },
            {
              "q":"Implement Stack using Two Queues (with efficient push)",
              "a":"Problem\nGiven two queues with their standard operations (enqueue, dequeue, isempty, size), implement a stack with its standard operations (pop, push, isempty, size). The stack should be efficient when pushing an item.\nGiven we have queue1 and queue2:\npush - O(1):\nenqueue in queue1\npop - O(n):\nwhile size of queue1 is bigger than 1, pipe (dequeue + enqueue) dequeued items from queue1 into queue2\ndequeue and return the last item of queue1, then switch the names of queue1 and queue2\nComplexity Analysis\nTime:\nConstant\nO(1)\nDbl. Logarithmic\nO(log log n)\nLogarithmic\nO(log n)\nSquare Root\nO(√n)\nLinear\nO(n)\nLinearithmic\nO(n log n)\nQuadratic\nO(n2)\nExponential\nO(2n)\nFactorial\nO(n!)\nSpace:\nConstant\nO(1)\nDbl. Logarithmic\nO(log log n)\nLogarithmic\nO(log n)\nSquare Root\nO(√n)\nLinear\nO(n)\nLinearithmic\nO(n log n)\nQuadratic\nO(n2)\nExponential\nO(2n)\nFactorial\nO(n!)\nTime: O(1)\nSpace: O(1)\nIf queue is implemented as linked list the enqueue operation has O(1) time complexity.\nImplementation\nJava Java\npublic Stack<E> {\nprivate Queue<E> q1 = new Queue<E>();\nprivate Queue<E> q2 = new Queue<E>();\npublic void push(E x) {\nq1.enqueue(x);\n}\npublic E pop() {\nwhile (q1.size() > 1) {\nq2.enqueue(q1.dequeue());\n}\nE pop = q1.dequeue();\nQueue<E> temp = q1;\nq1 = q2;\nq2 = temp;\nreturn pop;\n}\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence.",
          "icon": "assets/icons/dataStructure_algo/queue.png"
        },
        {
          "sub_category_name":"Recursion",
          "junior_level":[
            {
              "q":"How Dynamic Programming is different from Recursion and Memoization?",
              "a":"Memoization is when you store previous results of a function call (a real function always returns the same thing, given the same inputs). It doesn't make a difference for algorithmic complexity before the results are stored.\nRecursion is the method of a function calling itself, usually with a smaller dataset. Since most recursive functions can be converted to similar iterative functions, this doesn't make a difference for algorithmic complexity either.\nDynamic programming is the process of solving easier-to-solve sub-problems and building up the answer from that. Most DP algorithms will be in the running times between a Greedy algorithm (if one exists) and an exponential (enumerate all possibilities and find the best one) algorithm.\nDP algorithms could be implemented with recursion, but they don't have to be.\nDP algorithms can't be sped up by memoization, since each sub-problem is only ever solved (or the \"solve\" function called) once."
            },
            {
              "q":"What is a good example of Recursion (other than generating a Fibonacci sequence)?",
              "a":"There are some:\nThe binary tree search\nCheck for a palyndrome\nFinding factorial\nTraversing the folder hierarchy of a directory tree as part of a file system\nTowers of Hanoi\nMerge sort\nCatalan numbers"
            },
            {
              "q":"What is the difference between Backtracking and Recursion?",
              "a":"Recursion describes the calling of the same function that you are in. The typical example of a recursive function is the factorial. You always need a condition that makes recursion stop (base case).\nBacktracking is when the algorithm makes an opportunistic decision*, which may come up to be wrong. If the decision was wrong then the backtracking algorithm restores the state before the decision. It builds candidates for the solution and abandons those which cannot fulfill the conditions. A typical example for a task to solve would be the Eight Queens Puzzle. Backtracking is also commonly used within Neuronal Networks. Many times backtracking is not implemented recursively. If backtracking uses recursion its called Recursive Backtracking\nP.S. * Opportunistic decision making refers to a process where a person or group assesses alternative actions made possible by the favorable convergence of immediate circumstances recognized without reference to any general plan."
            },
            {
              "q":"Explain what is DFS (Depth First Search) algorithm for a Graph and how does it work?",
              "a":"Depth First Traversal or Depth First Search is a edge based recursive algorithm for traversing (visiting) all the vertices of a graph or tree data structure using a stack. The purpose of the algorithm is to mark each vertex as visited while avoiding cycles. DFS traverse/visit each vertex exactly once and each edge is inspected exactly twice. DFS is a genuinely recursive algorithm that uses stack for backtracking purposes, not for storing the vertex discovery \"front\" (as is the case in BFS).\nThe DFS algorithm works as follows:\nStart by putting any one of the graph's vertices on top of a stack.\nTake the top item of the stack and add it to the visited list.\nCreate a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the top of the stack.\nKeep repeating steps 2 and 3 until the stack is empty.\nDFS example step-by-step:\nConsidering A as the starting vertex which is explored and stored in the stack.\nB successor vertex of A is stored in the stack.\nVertex B have two successors E and F, among them alphabetically E is explored first and stored in the stack.\nThe successor of vertex E, i.e., G is stored in the stack.\nVertex G have two connected vertices, and both are already visited, so G is popped out from the stack.\nSimilarly, E s also removed.\nNow, vertex B is at the top of the stack, its another node(vertex) F is explored and stored in the stack.\nVertex F has two successor C and D, between them C is traversed first and stored in the stack.\nVertex C only have one predecessor which is already visited, so it is removed from the stack.\nNow vertex D connected to F is visited and stored in the stack.\nAs vertex D doesn’t have any unvisited nodes, therefore D is removed.\nSimilarly, F, B and A are also popped.\nThe generated output is – A, B, E, G, F, C, D."
            },
            {
              "q":"Is it always possible to write a non-recursive form for every Recursive function?",
              "a":"When you use a function recursively, the compiler takes care of stack management for you, which is what makes recursion possible. Anything you can do recursively, you can do by managing a stack yourself (for indirect recursion, you just have to make sure your different functions share that stack).\nA simple formal proof is to show that both µ recursion (general recursive function) and a non-recursive calculus such as GOTO are both Turing complete. Since all Turing complete calculi are strictly equivalent in their expressive power, all recursive functions can be implemented by the non-recursive Turing-complete calculus."
            },
            {
              "q":"Can you convert this Recursion function into a loop?",
              "a":"Any recursive function can be made to iterate (into a loop) but you need to use a stack yourself to keep the state.\nA(x) {\ntemp = 0;\nfor i in 0..x {\ntemp = temp + something(i);\n}\nreturn temp;\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code.",
          "icon": "assets/icons/dataStructure_algo/recursion.png"
        },
        {
          "sub_category_name":"Searching",
          "junior_level":[
            {
              "q":"Explain what is Linear (Sequential) Search and when may we use one?",
              "a":"Linear (sequential) search goes through all possible elements in some array and compare each one with the desired element. It may take up to O(n) operations, where N is the size of an array and is widely considered to be horribly slow. In linear search when you perform one operation you reduce the size of the problem by one (when you do one operation in binary search you reduce the size of the problem by half). Despite it, it can still be used when:\nYou need to perform this search only once,\nYou are forbidden to rearrange the elements and you do not have any extra memory,\nThe array is tiny, such as ten elements or less, or the performance is not an issue at all,\nEven though in theory other search algorithms may be faster than linear search (for instance binary search), in practice even on medium-sized arrays (around 100 items or less) it might be infeasible to use anything else. On larger arrays, it only makes sense to use other, faster search methods if the data is large enough, because the initial time to prepare (sort) the data is comparable to many linear searches,\nWhen the list items are arranged in order of decreasing probability, and these probabilities are geometrically distributed, the cost of linear search is only O(1)\nYou have no idea what you are searching.\nWhen you ask MySQL something like SELECT x FROM y WHERE z = t, and z is a column without an index, linear search is performed with all the consequences of it. This is why adding an index to searchable columns is important."
            },
            {
              "q":"What is Binary Search",
              "a":"When the list is sorted we can use the binary search (also known as half-interval search, logarithmic search, or binary chop) technique to find items on the list. Here's a step-by-step description of using binary search:\nLet min = 1 and max = n.\nGuess the average of max and min rounded down so that it is an integer.\nIf you guessed the number, stop. You found it!\nIf the guess was too low, set min to be one larger than the guess.\nIf the guess was too high, set max to be one smaller than the guess.\nGo back to step two.\nIn this example we looking for array item with value 4:\nWhen you do one operation in binary search we reduce the size of the problem by half (look at the picture below how do we reduce the size of the problem area) hence the complexity of binary search is O(log n). The binary search algorithm can be written either recursively or iteratively."
            },
            {
              "q":"What is an example of Interpolation Search being slower than Binary Search?",
              "a":"If we assume uniform distribution of the values so we'll use simple linear interpolation. So if the values are:\n1,2,3,4,5,6,7,8,9,10000000\nAnd we search for number 9, searching using linear interpolation will go through all (excluding the first and last) the indices before finding the correct one. In such cases interpolation search will be O(n)."
            },
            {
              "q":"Explain some Linear Search optimization techniques",
              "a":"If the elements you would be searching in a list are NOT uniformly distributed, then you could do certain optimizations that can help you improve the efficiency of your search algorithms. For such improvements to be effective, you do need to know the characteristics of the data being searched, the frequency and also the fact that the underlying collection needs to be modifiable.\nMost used pattern: If the likelihood of the current element being searched again is high, then move if from it's current location (say position i) to the front of the collection (say position 0). This does require moving elements from A[0, i-1] to A[1, i] to accommodate the new element at A[0].\nThe disadvantage of the above pattern is that it requires a lot of movement. One quick strategy is to move an element up on success by simply swapping the target element from position x with the first element at position 0. This eventually results in a similar pattern as the frequently searched elements bubble up to the top of the list.\nOn the other end of the spectrum, if an element is unlikely to be search again, then moving it to the end on find improves the chances of the other elements being searched."
            },
            {
              "q":"Recursive and Iterative Binary Search: Which one is more efficient and why?",
              "a":"With regard to time complexity, recursive and iterative methods both will give you O(log n) time complexity, with regard to input size, provided you implement correct binary search logic.\nFocusing on space complexity:\nThe iterative approach is more efficient since we are allocating a constant amount O(1) of space for the function call and constant space for variable allocations.\nThere have been concerns around the recursive version regarding the function stack it is going to use. However, once you see it carefully, the recursive version is a tail recursion. Most of the modern compiler converts the tail recursion into iterative program. Thus, there won't be any issue regarding the usage of the function stack.\nP.S. A tail recursion is also a kind of recursion but it will make the return value of the recursion call as the last statement of the method. This will make the calculation occurs before the recursion call and hence there is no need to keep the stack to store the intermediate value when it moves to the next recursive call."
            },
            {
              "q":"What is Interpolation Search",
              "a":"Interpolation Search is an algorithm similar to Binary Search for searching for a given target value in a sorted array. It is an improvement over Binary Search for instances, where the values in a sorted array are uniformly distributed.\nThe binary search always chooses the middle of the remaining search space. On a contrast Interpolation search, at each search step, calculates (using interpolation formula) where in the remaining search space the target might be present, based on the low and high values of the search space and the value of the target. For example, if the value of the key is closer to the last element, interpolation search is likely to start search toward the end side. The value actually found at this estimated position is then compared to the target value. If it is not equal, then depending on the comparison, the remaining search space is reduced to the part before or after the estimated position.\nThe idea of the interpolation formula or partitioning logic is to return higher value of pos when element to be searched is closer to arr[hi]. And smaller value when closer to arr[low].\narr[] ==> Array where elements need to be searched\nx ==> Element to be searched\nlow ==> Starting index in arr[]\nhi ==> Ending index in arr[]\npos = low + [ (x-arr[low])*(hi-low) / (arr[hi]-arr[Low]) ]"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a search algorithm is an algorithm designed to solve a search problem. Search algorithms work to retrieve information stored within particular data structure, or calculated in the search space of a problem domain, with either discrete or continuous values.",
          "icon": "assets/icons/dataStructure_algo/searching.png"
        },
        {
          "sub_category_name":"Sorting",
          "junior_level":[
            {
              "q":"Why Sorting algorithms are important?",
              "a":"Efficient sorting is important for optimizing the efficiency of other algorithms (such as search and merge algorithms) that require input data to be in sorted lists. Sorting is also often useful for canonicalizing data and for producing human-readable output. Sorting have direct applications in database algorithms, divide and conquer methods, data structure algorithms, and many more."
            },
            {
              "q":"What is meant by to \"Sort in Place\"?",
              "a":"The idea of an in-place algorithm isn't unique to sorting, but sorting is probably the most important case, or at least the most well-known. The idea is about space efficiency - using the minimum amount of RAM, hard disk or other storage that you can get away with.\nThe idea is to produce an output in the same memory space that contains the input by successively transforming that data until the output is produced. This avoids the need to use twice the storage - one area for the input and an equal-sized area for the output.\nQuicksort is one example of In-Place Sorting."
            },
            {
              "q":"Classify Sorting Algorithms",
              "a":"Sorting algorithms can be categorised based on the following parameters:\nBased on Number of Swaps or Inversion. This is the number of times the algorithm swaps elements to sort the input. Selection Sort requires the minimum number of swaps.\nBased on Number of Comparisons. This is the number of times the algorithm compares elements to sort the input. Using Big-O notation, the sorting algorithm examples listed above require at least O(n log n) comparisons in the best case and O(n2) comparisons in the worst case for most of the outputs.\nBased on Recursion or Non-Recursion. Some sorting algorithms, such as Quick Sort, use recursive techniques to sort the input. Other sorting algorithms, such as Selection Sort or Insertion Sort, use non-recursive techniques. Finally, some sorting algorithm, such as Merge Sort, make use of both recursive as well as non-recursive techniques to sort the input.\nBased on Stability. Sorting algorithms are said to be stable if the algorithm maintains the relative order of elements with equal keys. In other words, two equivalent elements remain in the same order in the sorted output as they were in the input.\nInsertion sort, Merge Sort, and Bubble Sort are stable\nHeap Sort and Quick Sort are not stable\nBased on Extra Space Requirement. Sorting algorithms are said to be in place if they require a constant O(1) extra space for sorting.\nInsertion sort and Quick-sort are in place sort as we move the elements about the pivot and do not actually use a separate array which is NOT the case in merge sort where the size of the input must be allocated beforehand to store the output during the sort.\nMerge Sort is an example of out place sort as it require extra memory space for it’s operations."
            },
            {
              "q":"What are advantages and disadvantages of Bubble Sort?",
              "a":"Advantages:\nSimple to understand\nAbility to detect that the list is sorted efficiently is built into the algorithm. When the list is already sorted (best-case), the complexity of bubble sort is only O(n).\nDisadvantages:\nIt is very slow and runs in O(n2) time in worst as well as average case. Because of that Bubble sort does not deal well with a large set of data. For example Bubble sort is three times slower than Quicksort even for n = 100"
            },
            {
              "q":"Explain what is ideal Sorting algorithm?",
              "a":"The Ideal Sorting Algorithm would have the following properties:\nStable: Equal keys aren’t reordered.\nOperates in place: requiring O(1) extra space.\nWorst-case O(n log n) key comparisons.\nWorst-case O(n) swaps.\nAdaptive: Speeds up to O(n) when data is nearly sorted or when there are few unique keys.\nThere is no algorithm that has all of these properties, and so the choice of sorting algorithm depends on the application."
            },
            {
              "q":"Explain how Bubble Sort works",
              "a":"Bubble Sort is based on the idea of repeatedly comparing pairs of adjacent elements and then swapping their positions if they are in the wrong order. Bubble sort is a stable, in-place sort algorithm.\nHow it works:\nIn an unsorted array of n elements, start with the first two elements and sort them in ascending order. (Compare the element to check which one is greater).\nCompare the second and third element to check which one is greater, and sort them in ascending order.\nCompare the third and fourth element to check which one is greater, and sort them in ascending order.\n...\nRepeat steps 1–n until no more swaps are required.\nVisualisation:"
            },
            {
              "q":"Explain how Insertion Sort works",
              "a":"Insertion Sort is an in-place, stable, comparison-based sorting algorithm. The idea is to maintain a sub-list which is always sorted. An element which is to be 'insert'ed in this sorted sub-list, has to find its appropriate place and then it has to be inserted there. Hence the name, insertion sort.\nSteps on how it works:\nIf it is the first element, it is already sorted.\nPick the next element.\nCompare with all the elements in sorted sub-list.\nShift all the the elements in sorted sub-list that is greater than the value to be sorted.\nInsert the value.\nRepeat until list is sorted.\nVisualisation:"
            },
            {
              "q":"How would you optimise Bubble Sort?",
              "a":"In Bubble sort, you know that after k passes, the largest k elements are sorted at the k last entries of the array, so the conventional Bubble sort uses:\npublic static void bubblesort(int[] a) {\nfor (int i = 1; i < a.length; i++) {\nboolean is_sorted = true;\nfor (int j = 0; j < a.length - i; j++) { // skip the already sorted largest elements, compare to a.length - 1\nif (a[j] > a[j+1]) {\nint temp = a[j];\na[j] = a[j+1];\na[j+1] = temp;\nis_sorted = false;\n}\n}\nif(is_sorted) return;\n}\n}\nNow, that would still do a lot of unnecessary iterations when the array has a long sorted tail of largest elements. If you remember where you made your last swap, you know that after that index, there are the largest elements in order, so:\npublic static void bubblesort(int[] a) {\nint lastSwap = a.length - 1;\nfor (int i = 1; i< a.length; i++) {\nboolean is_sorted = true;\nint currentSwap = -1;\nfor (int j = 0; j < lastSwap; j++) { // compare to a.length - i\nif (a[j] > a[j+1]) {\nint temp = a[j];\na[j] = a[j+1];\na[j+1] = temp;\nis_sorted = false;\ncurrentSwap = j;\n}\n}\nif (is_sorted) return;\nlastSwap = currentSwap;\n}\n}\nThis allows to skip over many elements, resulting in about a worst case 50% improvement in comparison count (though no improvement in swap counts), and adds very little complexity."
            },
            {
              "q":"Insert an item in a sorted Linked List maintaining order",
              "a":"The add() method below walks down the list until it finds the appropriate position. Then, it splices in the new node and updates the start, prev, and curr pointers where applicable.\nNote that the reverse operation, namely removing elements, doesn't need to change, because you are simply throwing things away which would not change any order in the list."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a sorting algorithm is an algorithm that puts elements of a list into an order. The most frequently used orders are numerical order and lexicographical order, and either ascending or descending",
          "icon": "assets/icons/dataStructure_algo/sorting.png"
        },
        {
          "sub_category_name":"Stacks",
          "junior_level":[
            {
              "q":"Explain why Stack is a recursive data structure",
              "a":"A stack is a recursive data structure, so it's:\na stack is either empty or\nit consists of a top and the rest which is a stack by itself;"
            },
            {
              "q":"What is Stack?",
              "a":"A Stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. In the pushdown stacks only two operations are allowed: push the item into the stack, and pop the item out of the stack.\nThere are basically three operations that can be performed on stacks. They are:\ninserting an item into a stack (push).\ndeleting an item from the stack (pop).\ndisplaying the contents of the stack (peek or top).\nA stack is a limited access data structure - elements can be added and removed from the stack only at the top. push adds an item to the top of the stack, pop removes the item from the top. A helpful analogy is to think of a stack of books; you can remove only the top book, also you can add a new book on the top."
            },
            {
              "q":"Why and when should I use Stack or Queue data structures instead of Arrays/Lists?",
              "a":"Because they help manage your data in more a particular way than arrays and lists. It means that when you're debugging a problem, you won't have to wonder if someone randomly inserted an element into the middle of your list, messing up some invariants.\nArrays and lists are random access. They are very flexible and also easily corruptible. If you want to manage your data as FIFO or LIFO it's best to use those, already implemented, collections.\nMore practically you should:\nUse a queue when you want to get things out in the order that you put them in (FIFO)\nUse a stack when you want to get things out in the reverse order than you put them in (LIFO)\nUse a list when you want to get anything out, regardless of when you put them in (and when you don't want them to automatically be removed)."
            },
            {
              "q":"Why Are Stacks Useful?",
              "a":"They’re very useful because they afford you constant time O(1) operations when inserting or removing from the front of a data structure. One common use of a stack is in compilers, where a stack can be used to make sure that the brackets and parentheses in a code file are all balanced, i.e., have an opening and closing counterpart. Stacks are also very useful in evaluating mathematical expressions."
            },
            {
              "q":"How to implement Linked List Using Stack?",
              "a":"You can simulate a linked list by using two stacks. One stack is the \"list,\" and the other is used for temporary storage.\nTo add an item at the head, simply push the item onto the stack.\nTo remove from the head, pop from the stack.\nTo insert into the middle somewhere, pop items from the \"list\" stack and push them onto the temporary stack until you get to your insertion point. Push the new item onto the \"list\" stack, then pop from the temporary stack and push back onto the \"list\" stack. Deletion of an arbitrary node is similar.\nThis isn't terribly efficient, by the way, but it would in fact work."
            },
            {
              "q":"Implement a Queue using two Stacks",
              "a":"public class Queue<T> where T : class\n{\nprivate Stack<T> input = new Stack<T>();\nprivate Stack<T> output = new Stack<T>();\npublic void Enqueue(T t)\n{\ninput.Push(t);\n}\npublic T Dequeue()\n{\nif (output.Count == 0)\n{\nwhile (input.Count != 0)\n{\noutput.Push(input.Pop());\n}\n}\nreturn output.Pop();\n}\n}"
            },
            {
              "q":"Implement Stack using Two Queues (with efficient push)",
              "a":"public Stack<E> {\nprivate Queue<E> q1 = new Queue<E>();\nprivate Queue<E> q2 = new Queue<E>();\npublic void push(E x) {\nq1.enqueue(x);\n}\npublic E pop() {\nwhile (q1.size() > 1) {\nq2.enqueue(q1.dequeue());\n}\nE pop = q1.dequeue();\nQueue<E> temp = q1;\nq1 = q2;\nq2 = temp;\nreturn pop;\n}\n}"
            },
            {
              "q":"What is complexity of push and pop for a Stack implemented using a LinkedList?",
              "a":"O(1). Note, you don't have to insert at the end of the list. If you insert at the front of a (singly-linked) list, they are both O(1).\nStack contains 1,2,3:\n[1]->[2]->[3]\nPush 5:\n[5]->[1]->[2]->[3]\nPop:\n[1]->[2]->[3] // returning 5"
            },
            {
              "q":"Design a Stack that supports retrieving the min element in O(1)",
              "a":"class MinStack {\nprivate class Node {\nint val;\nint min;\nNode next;\nprivate Node(int val, int min) {\nthis(val, min, null);\n}\nprivate Node(int val, int min, Node next) {\nthis.val = val;\nthis.min = min;\nthis.next = next;\n}\n}\nprivate Node head;\npublic void push(int x) {\nif(head == null)\nhead = new Node(x, x);\nelse\nhead = new Node(x, Math.min(x, head.min), head);\n}\npublic void pop() {\nhead = head.next;\n}\npublic int top() {\nreturn head.val;\n}\npublic int getMin() {\nreturn head.min;\n}\n}"
            },
            {
              "q":"Reverse a String using Stack",
              "a":"public static String reverse(String str) {\nchar[] charArr = str.toCharArray();\nint size = charArr.length;\nStack stack = new Stack(size);\nint i;\nfor (i = 0; i < size; ++i) {\nstack.push(charArr[i]);\n}\nfor (i = 0; i < size; ++i) {\ncharArr[i] = stack.pop();\n}\nreturn String.valueOf(charArr);\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a stack is an abstract data type that serves as a collection of elements, with two main principal operations: Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed.",
          "icon": "assets/icons/dataStructure_algo/stack.png"
        },
        {
          "sub_category_name":"Strings",
          "junior_level":[
            {
              "q":"What is String in Data Structures?",
              "a":"A string is generally considered as a data type and is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding. String may also denote more general arrays or other sequence (or list) data types and structures."
            },
            {
              "q":"What is the difference between Strings vs. Char arrays?",
              "a":"Char arrays:\nStatic-sized\nFast access\nFew built-in methods to manipulate strings\nA char array doesn’t define a data type\nStrings:\nSlower access\nDefine a data type\nDynamic allocation\nMore built-in functions to support string manipulations"
            },
            {
              "q":"What is a null-terminated String?",
              "a":"A \"string\" is really just an array of chars; a null-terminated string is one where a null character '\\0' marks the end of the string (not necessarily the end of the array). All strings in code (delimited by double quotes \"\") are automatically null-terminated by the compiler.\nSo for example, \"hi\" is the same as {'h', 'i', '\\0'}.\nNull-terminated strings are often a drain on performance, for the obvious reason that the time taken to discover the length depends on the length. The usual solution is to do both - keep the length and maintain the null terminator. It's not much extra work and means that you are always ready to pass the string to any function."
            },
            {
              "q":"What is strings mutability and immutability?",
              "a":"Strings can either be mutable or immutable.\nWhen a string is immutable it means that it's fixed allocated. So your string it's unique and can't be modified. If you change it, a copy of that string is created and the original string is deallocated instead.\nWhen a string is mutable it means that it's dynamically allocated, so your string can be modified."
            },
            {
              "q":"Reverse a String using Stack",
              "a":"public static String reverse(String str) {\nchar[] charArr = str.toCharArray();\nint size = charArr.length;\nStack stack = new Stack(size);\nint i;\nfor (i = 0; i < size; ++i) {\nstack.push(charArr[i]);\n}\nfor (i = 0; i < size; ++i) {\ncharArr[i] = stack.pop();\n}\nreturn String.valueOf(charArr);\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Most programming languages have a data type called a string, which is used for data values that are made up of ordered sequences of characters, such as \"hello world\". A string can contain any sequence of characters, visible or invisible, and characters may be repeated.",
          "icon": "assets/icons/dataStructure_algo/string.png"
        },
        {
          "sub_category_name":"Trees",
          "junior_level":[
            {
              "q":"Define Tree Data Structure",
              "a":"Trees are well-known as a non-linear data structure. They don’t store data in a linear way. They organize data hierarchically.\nA tree is a collection of entities called nodes. Nodes are connected by edges. Each node contains a value or data or key, and it may or may not have a child node. The first node of the tree is called the root. Leaves are the last nodes on a tree. They are nodes without children."
            },
            {
              "q":"Define Binary Tree",
              "a":"A normal tree has no restrictions on the number of children each node can have. A binary tree is made of nodes, where each node contains a \"left\" pointer, a \"right\" pointer, and a data element.\nThere are three different types of binary trees:\nFull binary tree: Every node other than leaf nodes has 2 child nodes.\nComplete binary tree: All levels are filled except possibly the last one, and all nodes are filled in as far left as possible.\nPerfect binary tree: All nodes have two children and all leaves are at the same level."
            },
            {
              "q":"What is Height and Depth of a Tree and its Nodes?",
              "a":"The depth of a node is the length of the path to its root\nThe height of a node is the number of edges on the longest path from the node to a leaf\nThe height of a tree is the length of the longest path to a leaf"
            },
            {
              "q":"What's the difference between the data structure Tree and Graph?",
              "a":"Graph:\nConsists of a set of vertices (or nodes) and a set of edges connecting some or all of them\nAny edge can connect any two vertices that aren't already connected by an identical edge (in the same direction, in the case of a directed graph)\nDoesn't have to be connected (the edges don't have to connect all vertices together): a single graph can consist of a few disconnected sets of vertices\nCould be directed or undirected (which would apply to all edges in the graph)\nTree:\nA type of graph (fit with in the category of Directed Acyclic Graphs (or a DAG))\nVertices are more commonly called \"nodes\"\nEdges are directed and represent an \"is child of\" (or \"is parent of\") relationship\nEach node (except the root node) has exactly one parent (and zero or more children)\nHas exactly one \"root\" node (if the tree has at least one node), which is a node without a parent\nHas to be connected\nIs acyclic, meaning it has no cycles: \"a cycle is a path AKA sequence of edges and vertices wherein a vertex is reachable from itself\"\nTrees aren't a recursive data structure"
            },
            {
              "q":"What is Binary Search Tree?",
              "a":"Binary search tree is a data structure that quickly allows to maintain a sorted list of numbers.\nIt is called a binary tree because each tree node has maximum of two children.\nIt is called a search tree because it can be used to search for the presence of a number in O(log n) time.\nThe properties that separates a binary search tree from a regular binary tree are:\nAll nodes of left subtree are less than root node\nAll nodes of right subtree are more than root node\nBoth subtrees of each node are also BSTs i.e. they have the above two properties"
            },
            {
              "q":"How to implement a tree data-structure? Provide some code.",
              "a":"public class Tree<T> {\nprivate Node<T> root;\npublic Tree(T rootData) {\nroot = new Node<T>();\nroot.data = rootData;\nroot.children = new ArrayList<Node<T>>();\n}\npublic static class Node<T> {\nprivate T data;\nprivate Node<T> parent;\nprivate List<Node<T>> children;\n}\n}"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "A tree is a collection of entities called nodes . Nodes are connected by edges . Each node contains a value or data , and it may or may not have a child node .",
          "icon": "assets/icons/dataStructure_algo/tree.png"
        },
        {
          "sub_category_name":"Trie",
          "junior_level":[
            {
              "q":"What is Trie?",
              "a":"Trie (also called digital tree or prefix tree) is a tree-based data structure, which is used for efficient retrieval of a key in a large data-set of strings. Unlike a binary search tree, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated; i.e., the value of the key is distributed across the structure. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. Each complete English word has an arbitrary integer value associated with it (see image)."
            },
            {
              "q":"Name some application of Trie data structure",
              "a":"Some applications of trie data structure include:\ndictionary lookup\nprefix searches\nauto complete feature in text editors\ncommand completion in IDE etc\nphone number/contacts searching\nIP lookups\nmapping URLs to operations on a web server\nmatching sentences (if a trie based on a sequence of words, like Gmail autocompletion)\nindex a complete text (as the Ukkonen suffix tree algorithm alternative)"
            },
            {
              "q":"What are some Trie implementation strategies?",
              "a":"Another alternative in order to avoid the use of an array of 256 pointers (ASCII), is to store the alphabet array as a bitmap of 256 bits representing the ASCII alphabet, reducing dramatically the size of the nodes."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, a trie, also called digital tree or prefix tree, is a type of k-ary search tree, a tree data structure used for locating specific keys from within a set. These keys are most often strings, with links between nodes defined not by the entire key, but by individual characters.",
          "icon": "assets/icons/dataStructure_algo/trie.png"
        }
      ]
    },
    {
      "category_name": "Software Architecture",
      "sub_category": [
        {
          "sub_category_name": "API Design",
          "junior_level": [
            {
              "q": "What REST stands for?",
              "a": "REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol for data communication. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in 2000.\nIn REST architecture, a REST Server simply provides access to resources and REST client accesses and presents the resources. Here each resource is identified by URIs/ global IDs. REST uses various representations to represent a resource like text, JSON and XML. Now a days JSON is the most popular format being used in web services."
            },
            {
              "q": "What are the core components of a HTTP Request?",
              "a": "A HTTP Request has five major parts −\nVerb − Indicate HTTP methods such as GET, POST, DELETE, PUT etc.\nURI − Uniform Resource Identifier (URI) to identify the resource on server.\nHTTP Version − Indicate HTTP version, for example HTTP v1.1 .\nRequest Header − Contains metadata for the HTTP Request message as key-value pairs. For example, client ( or browser) type, format supported by client, format of message body, cache settings etc.\nRequest Body − Message content or Resource representation."
            },
            {
              "q": "Define what is SOA",
              "a": "A Service Oriented Architecture (SOA) is basically defined as an architectural pattern consisting of services. Here application components provide services to the other components using communication protocol over the network. This communication involves data exchanging or some coordination activity between services.\nSome of the key principles on which SOA is based are mentioned below\nThe service contract should be standardized containing all the description of the services.\nThere is loose coupling defining the less dependency between the web services and the client.\nIt should follow Service Abstraction rule, which says the service should not expose the way functionality has been executed to the client application.\nServices should be reusable in order to work with various application types.\nServices should be stateless having the feature of discoverability.\nServices break big problems into little problems and allow diverse subscribers to use the services."
            },
            {
              "q": "What are advantages of REST web services?",
              "a": "Some of the advantages of REST web services are:\nLearning curve is easy since it works on HTTP protocol\nSupports multiple technologies for data transfer such as text, xml, json, image etc.\nNo contract defined between server and client, so loosely coupled implementation.\nREST is a lightweight protocol\nREST methods can be tested easily over browser."
            },
            {
              "q": "Mention some key characteristics of REST?",
              "a": "Some key characteristics of REST includes\nREST is stateless, therefore the SERVER has no state (or session data)\nWith a well-applied REST API, the server could be restarted between two calls as every data is passed to the server\nWeb service mostly uses POST method to make operations, whereas REST uses GET to access resources"
            },
            {
              "q": "Mention whether you can use GET request instead of PUT to create a resource?",
              "a": "No, you are not supposed to use POST or GET. GET operations should only have view rights"
            },
            {
              "q": "What is cached response?",
              "a": "Caching refers to storing server response in client itself so that a client needs not to make server request for same resource again and again. A server response should have information about how a caching is to be done so that a client caches response for a period of time or never caches the server response."
            },
            {
              "q": "What are different types of Web Services?",
              "a": "There are two types of web services:\nSOAP Web Services: Runs on SOAP protocol and uses XML technology for sending data.\nRestful Web Services: It’s an architectural style and runs on HTTP/HTTPS protocol almost all the time. REST is a stateless client-server architecture where web services are resources and can be identified by their URIs. Client applications can use HTTP GET/POST methods to invoke Restful web services."
            },
            {
              "q": "Mention what are resources in a REST architecture?",
              "a": "Resources are identified by logical URLs; it is the key element of a RESTful design. Unlike, SOAP web services in REST, you view the product data as a resource and this resource should contain all the required information."
            },
            {
              "q": "Explain the architectural style for creating web API?",
              "a": "The architectural style for creating web api are\nHTTP for client server communication\nXML/JSON as formatting language\nSimple URI as the address for the services\nStateless communication"
            },
            {
              "q": "What are the advantages of Web Services?",
              "a": "Some of the advantages of web services are:\nInteroperability: Web services are accessible over network and runs on HTTP/SOAP protocol and uses XML/JSON to transport data, hence it can be developed in any programming language. Web service can be written in java programming and client can be PHP and vice versa.\nReusability: One web service can be used by many client applications at the same time.\nLoose Coupling: Web services client code is totally independent with server code, so we have achieved loose coupling in our application.\nEasy to deploy and integrate, just like web applications.\nMultiple service versions can be running at same time."
            },
            {
              "q": "What is SOAP?",
              "a": "SOAP stands for Simple Object Access Protocol. SOAP is an XML based industry standard protocol for designing and developing web services. Since it’s XML based, it’s platform and language independent. So our server can be based on JAVA and client can be on .NET, PHP etc. and vice versa."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "API design refers to the process of developing application programming interfaces (APIs) that expose data and application functionality for use by developers and users. APIs are important to modern organizations, adding new capabilities to everything from their operations and products to their partnership strategies.",
          "icon": "assets/icons/software_architecture/api_design.png"
        },
        {
          "sub_category_name": "Availability & Reliability",
          "junior_level": [
            {
              "q": "What is Availability?",
              "a": "Availability refers to the probability that a system performs correctly at a specific time instance (not duration). Interruptions may occur before or after the time instance for which the system’s availability is calculated. The service must be operational and adequately satisfy the defined specifications at the time of its usage.\nAvailability is often quantified by uptime (or downtime) as a percentage of time the service is available. Availability is generally measured in number of 9s--a service with 99.99% availability is described as having four 9s."
            },
            {
              "q": "What is Reliability?",
              "a": "Reliability is the probability that a system performs correctly during a specific time duration. During this correct operation, no repair is required or performed, and the system adequately follows the defined performance specifications.\nReliability follows an exponential failure law, which means that it reduces as the time duration considered for reliability calculations elapses. In other words, reliability of a system will be high at its initial state of operation and gradually reduce to its lowest magnitude over time."
            },
            {
              "q": "What is Back-Pressure?",
              "a": "When one component is struggling to keep-up, the system as a whole needs to respond in a sensible way. It is unacceptable for the component under stress to fail catastrophically or to drop messages in an uncontrolled fashion. Since it can’t cope and it can’t fail it should communicate the fact that it is under stress to upstream components and so get them to reduce the load.\nThis back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load, and will provide information that may allow the system itself to apply other resources to help distribute the load."
            },
            {
              "q": "How Do You Update A Live Heavy Traffic Site With Minimum Or Zero Down Time?",
              "a": "Deploying a newer version of a live website can be a challenging task specially when a website has high traffic. Any downtime is going to affect the users. There are a few best practices that we can follow:\nBefore deploying on Production:\nThoroughly test the new changes and ensure it working in a test environment which is almost identical to production system.\nIf possible do automation of test cases as much as possible.\nCreate a automated sanity testing script (also called as smoke test) that can be run on production (without affecting real data). These are typically readonly type of test cases. However depending on your application needs you can add more cases to this. Make sure it can be run quickly by keeping it short.\nCreate scripts for all manual tasks(if possible), avoiding any hand typing mistakes during day of deployment.\nTest the script to make sure they work on a non-production environment.\nKeep the build artifacts ready. e.g application deployment files, database scripts, config files etc.\nCreate a checklist of things to do on day of deployment.\nRehearse. Deploy in a non-prod environment is almost identical to production. Try this with production data volumes(if possible). Make a note of time required for your tasks so you can plan accordingly.\nWhen doing deploying on a production environment:\nUse Green-Blue deployment technique to reduce down-time risk\nKeep backup of current site/data to be able to rollback\nUse sanity test cases before doing a lot of in depth testing"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Reliability, availability and serviceability, also known as reliability, availability, and maintainability, is a computer hardware engineering term involving reliability engineering, high availability, and serviceability design.",
          "icon": "assets/icons/software_architecture/availablity.png"
        },
        {
          "sub_category_name": "Caching",
          "junior_level": [
            {
              "q": "What is Caching?",
              "a": "In computing, a cache is a high-speed data storage layer which stores a subset of data, typically transient in nature, so that future requests for that data are served up faster than is possible by accessing the data’s primary storage location. Caching allows you to efficiently reuse previously retrieved or computed data."
            },
            {
              "q": "Is Redis just a cache?",
              "a": "Like a cache Redis offers:\nin memory key-value storage\nBut unlike a cash Redis:\nSupports multiple datatypes (strings, hashes, lists, sets, sorted sets, bitmaps, and hyperloglogs)\nIt provides an ability to store cache data into physical storage (if needed).\nSupports pub-sub model\nRedis cache provides replication for high availability (master/slave)\nSupports ultra-fast lua-scripts. Its execution time equals to C commands execution.\nCan be shared across multiple instances of the application (instead of in-memory cache for each app instance)"
            },
            {
              "q": "What is Resultset Caching?",
              "a": "Resultset caching is storing the results of a database query along with the query in the application. Every time a web page generates a query, the applications checks whether the results are already cached, and if they are, pulls them from an in-memory data set instead. The application still has to render the page."
            },
            {
              "q": "What is Cache Invalidation?",
              "a": "There are only two hard things in Computer Science: cache invalidation and naming things.\n– Phil Karlton\nHTTP caching is a solution for improving the performance of your web application. For lower load on the application and fastest response time, you want to cache content for a long period (TTL). But at the same time, you want your clients to see fresh (validate the freshness) content as soon as there is an update.\nCache invalidation gives you the best of both worlds: you can have very long TTLs, so when content changes little, it can be served from the cache because no requests to your application are required. At the same time, when data does change, that change is reflected without delay in the web representations."
            },
            {
              "q": "What usually should be cached?",
              "a": "The results for the following processes are good candidates for caching:\nLong-running queries on databases,\nhigh-latency network requests (for external APIs),\ncomputation-intensive processing"
            },
            {
              "q": "Name some Cache Writing Strategies",
              "a": "There are two common strategies to write data in a cache:\nPre-caching data, for small pieces of data, usually during the application initialization, before any request.\nOn-demand, checking first if the requested data is in the cache (if the data is found, it is called a cache hit), using it, improving the performance of the application. Whenever the requested data has not been written to the cache (cache miss), the application will need to retrieve it from the slower source, then writing the results in the cache, thus saving time on subsequent requests for the same data."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computing, a cache is a hardware or software component that stores data so that future requests for that data can be served faster; the data stored in a cache might be the result of an earlier computation or a copy of data stored elsewhere.",
          "icon": "assets/icons/software_architecture/caching.png"
        },
        {
          "sub_category_name": "CAP Theorem",
          "junior_level": [
            {
              "q": "What Is CAP Theorem?",
              "a": "The CAP Theorem for distributed computing was published by Eric Brewer. This states that it is not possible for a distributed computer system to simultaneously provide all three of the following guarantees:\nConsistency (all nodes see the same data even at the same time with concurrent updates )\nAvailability (a guarantee that every request receives a response about whether it was successful or failed)\nPartition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)\nThe CAP acronym corresponds to these three guarantees. This theorem has created the base for modern distributed computing approaches. Worlds most high volume traffic companies (e.g. Amazon, Google, Facebook) use this as basis for deciding their application architecture. It's important to understand that only two of these three conditions can be guaranteed to be met by a system."
            },
            {
              "q": "Why is CAP Theorem true?",
              "a": "It's proofed by construction. Basically we demonstrate a single situation where a system cannot be consistent and available in the same time:\nIf a client writes to one side of a partition, any reads that go to the other side of that partition can't possibly know about the most recent write. Now you're faced with a choice: do you respond to the reads with potentially stale information, or do you wait (potentially forever) to hear from the other side of the partition and compromise availability?"
            },
            {
              "q": "What does the CAP Theorem actually say?",
              "a": "The CAP Theorem says that it is impossible to build an implementation of read-write storage/system in an asynchronous network that satisfies all of the following three properties:\nAvailability - will a request made to the data store always eventually complete?\nConsistency - will all executions of reads and writes seen by all nodes be atomic or linearizably consistent?\nPartition tolerance - the network is allowed to drop any messages.\nMore informally, the CAP theorem tells us that we can't build a database/system that both responds to every request and returns the results that you would expect every time."
            },
            {
              "q": "Can you 'got around' or 'beat' the CAP Theorem?",
              "a": "No. You might have designed a system that is not heavily affected by it. That's good."
            },
            {
              "q": "What is a Partition in CAP Theorem?",
              "a": "One such fallacy of distributed computing is that networks are reliable. They aren't. Networks and parts of networks go down frequently and unexpectedly.\nA partition is when the network fails to deliver some messages to one or more nodes by losing them (not by delaying them - eventual delivery is not a partition).\nThe basic idea of CAP proof is that if a client writes to one side of a partition (namely, network fails), any reads that go to the other side of that partition can't possibly know about the most recent write. The proof of CAP relied on a total partition. In practice, these are arguably the most likely since all messages may flow through one component; if that fails then message loss is usually total between two nodes."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In theoretical computer science, the CAP theorem, also named Brewer's theorem after computer scientist Eric Brewer, states that any distributed data store can only provide two of the following three guarantees: Consistency Every read receives the most recent write or an error.",
          "icon": "assets/icons/software_architecture/cap.png"
        },
        {
          "sub_category_name": "Concurrency",
          "junior_level": [
            {
              "q": "What is a Deadlock?",
              "a": "A lock occurs when multiple processes try to access the same resource at the same time. One process loses out and must wait for the other to finish.\nA deadlock occurs when the waiting process is still holding on to another resource that the first needs before it can finish.\nSo, an example:\nResource A and resource B are used by process X and process Y\nX starts to use A.\nX and Y try to start using B\nY 'wins' and gets B first\nnow Y needs to use A\nA is locked by X, which is waiting for Y\nThread 1 Thread 2\nLock1->Lock(); Lock2->Lock();\nWaitForLock2(); WaitForLock1(); <-- Oops!\nThe best way to avoid deadlocks is to avoid having processes cross over in this way. Reduce the need to lock anything as much as you can. In databases avoid making lots of changes to different tables in a single transaction, avoid triggers and switch to optimistic/dirty/nolock reads as much as possible."
            },
            {
              "q": "Explain the difference between Asynchronous and Parallel programming?",
              "a": "When you run something asynchronously it means it is non-blocking, you execute it without waiting for it to complete and carry on with other things. Parallelism means to run multiple things at the same time, in parallel. Parallelism works well when you can separate tasks into independent pieces of work. Async and Callbacks are generally a way (tool or mechanism) to express concurrency i.e. a set of entities possibly talking to each other and sharing resources.\nTake for example rendering frames of a 3D animation. To render the animation takes a long time so if you were to launch that render from within your animation editing software you would make sure it was running asynchronously so it didn't lock up your UI and you could continue doing other things. Now, each frame of that animation can also be considered as an individual task. If we have multiple CPUs/Cores or multiple machines available, we can render multiple frames in parallel to speed up the overall workload."
            },
            {
              "q": "What is a Mutex?",
              "a": "A Mutex is a mutually exclusive object. It acts as a gate keeper to synchronise two threads. When you have two threads attempting to access a single resource, the general pattern is to have the first block of code attempting access, to set the mutex before entering the code. When the second code block attempts access, it sees that the mutex is set and waits until the first block of code is complete (and un-sets the mutex), then continues.\nSpecific details of how this is accomplished obviously varies greatly by programming language."
            },
            {
              "q": "Is there any difference between a Binary Semaphore and Mutex?",
              "a": "A mutex (or Mutual Exclusion Semaphores) is a locking mechanism used to synchronize access to a resource. Only one task (can be a thread or process based on OS abstraction) can acquire the mutex. It means there will be ownership associated with mutex, and only the owner can release the lock (mutex).\nSemaphore (or Binary Semaphore) is signaling mechanism (“I am done, you can carry on” kind of signal). For example, if you are listening songs (assume it as one task) on your mobile and at the same time your friend called you, an interrupt will be triggered upon which an interrupt service routine (ISR) will signal the call processing task to wakeup. A binary semaphore is NOT protecting a resource from access. Semaphores are more suitable for some synchronization problems like producer-consumer.\nShort version:\nA mutex can be released only by the thread that had acquired it.\nA binary semaphore can be signaled by any thread (or process)."
            },
            {
              "q": "What is a Race Condition?",
              "a": "A race condition is a situation on concurrent programming where two concurrent threads or processes compete for a resource and the resulting final state depends on who gets the resource first.\nBecause the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are \"racing\" to access/change the data.\nProblems often occur when one thread does a \"check-then-act\" (e.g. \"check\" if the value is X, then \"act\" to do something that depends on the value being X) and another thread does something to the value in between the \"check\" and the \"act\". E.g:\nif (x == 5) // The \"Check\"\n{\ny = x * 2; // The \"Act\"\n// If another thread changed x in between \"if (x == 5)\" and \"y = x * 2\" above,\n// y will not be equal to 10.\n}\nThe point being, y could be 10, or it could be anything, depending on whether another thread changed x in between the check and act. You have no real way of knowing.\nIn order to prevent race conditions from occurring, you would typically put a lock (Mutex or Semaphores) around the shared data to ensure only one thread can access the data at a time. This would mean something like this:\n// Obtain lock for x\nif (x == 5)\n{\ny = x * 2; // Now, nothing can change x until the lock is released.\n// Therefore y = 10\n}\n// release lock for x"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computer science, concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome.",
          "icon": "assets/icons/software_architecture/concurrency.png"
        },
        {
          "sub_category_name": "Cryptography",
          "junior_level": [
            {
              "q": "What is a key?",
              "a": "In cryptography a key is a piece of information used in combination with an algorithm (a cipher) to transform plaintext into ciphertext (encryption) and vice versa (decryption).\nA cipher can be reciprocal if it is used for both encryption and decryption, or non-reciprocal if a transformation to the key is required when using it in reverse."
            },
            {
              "q": "Explain what is Data Encryption?",
              "a": "Data encryption translates data into another form, or code, so that only people with access to a secret key (formally called a decryption key) or password can read it. Encrypted data is commonly referred to as ciphertext, while unencrypted data is called plaintext."
            },
            {
              "q": "Why is the Root Certificate important?",
              "a": "A Root SSL certificate is a certificate issued by a trusted certificate authority (CA).\nIn the SSL ecosystem, anyone can generate a signing key and sign a new certificate with that signature. However, that certificate is not considered valid unless it has been directly or indirectly signed by a trusted CA.\nA trusted certificate authority is an entity that has been entitled to verify that someone is effectively who it declares to be. In order for this model to work, all the participants on the game must agree on a set of CA which they trust. All operating systems and most of web browsers ship with a set of trusted CAs."
            },
            {
              "q": "What is Symmetric Encryption?",
              "a": "Symmetric Encryption is the simplest kind of encryption that involves only one secret key to cipher and decipher information. Symmetric encryption is an old and best-known technique. It uses a secret key that can either be a number, a word or a string of random letters. It is a blended with the plain text of a message to change the content in a particular way. The sender and the recipient should know the secret key that is used to encrypt and decrypt all the messages. Blowfish, AES, RC4, DES, RC5, and RC6 are examples of symmetric encryption. The most widely used symmetric algorithm is AES-128, AES-192, and AES-256.\nThe main disadvantage of the symmetric key encryption is that all parties involved have to exchange the key used to encrypt the data before they can decrypt it."
            },
            {
              "q": "What are Confusion and Diffusion in Cryptography?",
              "a": "Confusion means that each binary digit (bit) of the ciphertext should depend on several parts of the key, obscuring the connections between the two. The property of confusion hides the relationship between the ciphertext and the key. This property makes it difficult to find the key from the ciphertext and if a single bit in a key is changed, the calculation of the values of most or all of the bits in the ciphertext will be affected. Confusion increases the ambiguity of ciphertext and it is used by both block and stream ciphers.\nDiffusion means that if we change a single bit of the plaintext, then (statistically) half of the bits in the ciphertext should change, and similarly, if we change one bit of the ciphertext, then approximately one half of the plaintext bits should change.2 Since a bit can have only two states, when they are all re-evaluated and changed from one seemingly random position to another, half of the bits will have changed state. The idea of diffusion is to hide the relationship between the ciphertext and the plain text. This will make it hard for an attacker who tries to find out the plain text and it increases the redundancy of plain text by spreading it across the rows and columns; it is achieved through transposition of algorithm and it is used by block ciphers only.\nThese two properties help to ensure that extracting the key from plaintext-ciphertext pairs is difficult or infeasible."
            },
            {
              "q": "Explain difference between Hashing and Encryption algorithms",
              "a": "Hash Functions provide a mapping between an arbitrary length input, and a (usually) fixed length (or smaller length) output. A hash function could be considered the same as baking a loaf of bread. You start out with inputs (flour, water, yeast, etc...) and after applying the hash function (mixing + baking), you end up with an output: a loaf of bread.\nGoing the other way is extraordinarily difficult - you can't really separate the bread back into flour, water, yeast - some of that was lost during the baking process, and you can never tell exactly how much water or flour or yeast was used for a particular loaf, because that information was destroyed by the hashing function (aka the oven).\nMany different variants of inputs will theoretically produce identical loaves (e.g. 2 cups of water and 1 tsbp of yeast produce exactly the same loaf as 2.1 cups of water and 0.9tsbp of yeast), but given one of those loaves, you can't tell exactly what combo of inputs produced it.\nEncryption Functions provide a 1:1 mapping between an arbitrary length input and output. And they are always reversible. The important thing to note is that it's reversible using some method. And it's always 1:1 for a given key. Encryption could be viewed as a safe deposit box. Whatever you put in there comes back out, as long as you possess the key with which it was locked up in the first place. It's a symmetric operation. Given a key and some input, you get a certain output. Given that output, and the same key, you'll get back the original input. It's a 1:1 mapping."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Cryptography, or cryptology, is the practice and study of techniques for secure communication in the presence of adversarial behavior.",
          "icon": "assets/icons/software_architecture/crypto.png"
        },
        {
          "sub_category_name": "Databases",
          "junior_level": [
            {
              "q": "What is Normalization?",
              "a": "It is the process of eliminating redundant data and maintaining data dependencies."
            },
            {
              "q": "What are the advantages of NoSQL over traditional RDBMS?",
              "a": "NoSQL is better than RDBMS because of the following reasons/properities of NoSQL:\nIt supports semi-structured data and volatile data\nIt does not have schema\nRead/Write throughput is very high\nHorizontal scalability can be achieved easily\nWill support Bigdata in volumes of Terra Bytes & Peta Bytes\nProvides good support for Analytic tools on top of Bigdata\nCan be hosted in cheaper hardware machines\nIn-memory caching option is available to increase the performance of queries\nFaster development life cycles for developers\nStill, RDBMS is better than NoSQL for the following reasons/properties of RDBMS:\nTransactions with ACID properties - Atomicity, Consistency, Isolation & Durability\nAdherence to Strong Schema of data being written/read\nReal time query management ( in case of data size < 10 Tera bytes )\nExecution of complex queries involving join & group by clauses"
            },
            {
              "q": "Define ACID Properties",
              "a": "Atomicity: It ensures all-or-none rule for database modifications.\nConsistency: Data values are consistent across the database.\nIsolation: Two transactions are said to be independent of one another.\nDurability: Data is not lost even at the time of server failure."
            },
            {
              "q": "What is Denormalization?",
              "a": "It is the process of improving the performance of the database by adding redundant data."
            },
            {
              "q": "What are the difference between clustered and a non-clustered index?",
              "a": "A clustered index is a special type of index that reorders the way records in the table are physically stored. Therefore table can have only one clustered index. The leaf nodes of a clustered index contain the data pages.\nA non clustered index is a special type of index in which the logical order of the index does not match the physical stored order of the rows on disk. The leaf node of a non clustered index does not consist of the data pages. Instead, the leaf nodes contain index rows."
            },
            {
              "q": "How a database index can help performance?",
              "a": "The whole point of having an index is to speed up search queries by essentially cutting down the number of records/rows in a table that need to be examined. An index is a data structure (most commonly a B- tree) that stores the values for a specific column in a table."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computing, a database is an organized collection of data stored and accessed electronically. Small databases can be stored on a file system, while large databases are hosted on computer clusters or cloud storage.",
          "icon": "assets/icons/software_architecture/db.png"
        },
        {
          "sub_category_name": "Docker",
          "junior_level": [
            {
              "q": "What is Docker?",
              "a": "Docker is a containerization platform which packages your application and all its dependencies together in the form of containers so as to ensure that your application works seamlessly in any environment be it development or test or production.\nDocker containers, wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries etc. anything that can be installed on a server.\nThis guarantees that the software will always run the same, regardless of its environment."
            },
            {
              "q": "What is the difference between a Docker image and a container?",
              "a": "An instance of an image is called a container. You have an image, which is a set of layers. If you start this image, you have a running container of this image. You can have many running containers of the same image.\nYou can see all your images with docker images whereas you can see your running containers with docker ps (and you can see all containers with docker ps -a).\nSo a running instance of an image is a container."
            },
            {
              "q": "What is the difference between the COPY and ADD commands in a Dockerfile?",
              "a": "Although ADD and COPY are functionally similar, generally speaking, COPY is preferred.\nThat’s because it’s more transparent than ADD. COPY only supports the basic copying of local files into the container, while ADD has some features (like local-only tar extraction and remote URL support) that are not immediately obvious. Consequently, the best use for ADD is local tar file auto-extraction into the image, as in ADD rootfs.tar.xz /."
            },
            {
              "q": "What is Docker hub?",
              "a": "Docker hub is a cloud-based registry service which allows you to link to code repositories, build your images and test them, stores manually pushed images, and links to Docker cloud so you can deploy images to your hosts. It provides a centralized resource for container image discovery, distribution and change management, user and team collaboration, and workflow automation throughout the development pipeline."
            },
            {
              "q": "What are the various states that a Docker container can be in at any given point in time?",
              "a": "There are four states that a Docker container can be in, at any given point in time. Those states are as given as follows:\nRunning\nPaused\nRestarting\nExited"
            },
            {
              "q": "When would you use ‘docker kill’ or ‘docker rm -f’?",
              "a": "If you must stop the container really quickly… (someone pushed something to production on Friday evening?… ;) )"
            },
            {
              "q": "Is there a way to identify the status of a Docker container?",
              "a": "We can identify the status of a Docker container by running the command\ndocker ps –a\nwhich will in turn list down all the available docker containers with its corresponding statuses on the host. From there we can easily identify the container of interest to check its status correspondingly."
            },
            {
              "q": "What is the difference between ‘docker run’ and ‘docker create’?",
              "a": "The primary difference is that using ‘docker create’ creates a container in a stopped state.\nBonus point: You can use ‘docker create’ and store an outputed container ID for later use. The best way to do it is to use ‘docker run’ with --cidfile FILE_NAME as running it again won’t allow to overwrite the file. A good practice is to keep well ogranised directory structure: /containers/web/server1/ws.cid containers/web/server3/ws.cid"
            },
            {
              "q": "What is the difference between CMD and ENTRYPOINT in a Dockerfile?",
              "a": "Both CMD and ENTRYPOINT instructions define what command gets executed when running a container. There are few rules that describe their co-operation.\nDockerfile should specify at least one of CMD or ENTRYPOINT commands.\nENTRYPOINT should be defined when using the container as an executable.\nCMD should be used as a way of defining default arguments for an ENTRYPOINT command or for executing an ad-hoc command in a container.\nCMD will be overridden when running the container with alternative argumen"
            },
            {
              "q": "What’s the difference between a repository and a registry?",
              "a": "Docker registry is a service for hosting and distributing images (the default one is the Docker Hub).\nDocker repository is a collection of related Docker images (the same name but with different tags)."
            },
            {
              "q": "Do I lose my data when the Docker container exits?",
              "a": "There is no loss of data when any of your Docker containers exits as any of the data that your application writes to the disk in order to preserve it. This will be done until the container is explicitly deleted. The file system for the Docker container persists even after the Docker container is halted."
            },
            {
              "q": "Can you remove (‘docker rm’) a container that is paused?",
              "a": "No, to remove a container it must be stopped first."
            },
            {
              "q": "What is Build Cache in Docker?",
              "a": "When we build an Image, Docker will process each line in Dockerfile. It will execute the commands on each line in the order that is mentioned in the file. But at each line, before running any command, Docker will check if there is already an existing image in its cache that can be reused rather than creating a new image."
            },
            {
              "q": "How to build envrionment-agnostic systems with Docker?",
              "a": "There are three main features helping to achieve that:\nVolumes\nEnvironment variable injection\nRead-only file systems"
            },
            {
              "q": "How to link containers?",
              "a": "The simplest way is to use network port mapping. There’s also the - -link flag which is deprecated."
            },
            {
              "q": "What type of applications - Stateless or Stateful are more suitable for Docker Container?",
              "a": "It is preferable to create Stateless application for Docker Container. We can create a container out of our application and take out the configurable state parameters from application. Now we can run same container in Production as well as QA environments with different parameters. This helps in reusing the same Image in different scenarios. Also a stateless application is much easier to scale with Docker Containers than a stateful application."
            },
            {
              "q": "What is Docker image?",
              "a": "Docker image is the source of Docker container. In other words, Docker images are used to create containers. Images are created with the build command, and they’ll produce a container when started with run. Images are stored in a Docker registry such as registry.hub.docker.com because they can become quite large, images are designed to be composed of layers of other images, allowing a minimal amount of data to be sent when transferring images over the network."
            },
            {
              "q": "What is Docker container?",
              "a": "Docker containers include the application and all of its dependencies, but share the kernel with other containers, running as isolated processes in user space on the host operating system. Docker containers are not tied to any specific infrastructure: they run on any computer, on any infrastructure, and in any cloud."
            },
            {
              "q": "What are the most common instructions in Dockerfile?",
              "a": "Some of the common instructions in Dockerfile are as follows:\nFROM: We use FROM to set the base image for subsequent instructions. In every valid Dockerfile, FROM is the first instruction.\nLABEL: We use LABEL to organize our images as per project, module, licensing etc. We can also use LABEL to help in automation.\nIn LABEL we specify a key value pair that can be later used for programmatically handling the Dockerfile.\nRUN: We use RUN command to execute any instructions in a new layer on top of the current image. With each RUN command we add something on top of the image and use it in subsequent steps in Dockerfile.\nCMD: We use CMD command to provide default values of an executing container. In a Dockerfile, if we include multiple CMD commands, then only the last instruction is used."
            },
            {
              "q": "How do I transfer a Docker image from one machine to another one without using a repository, no matter private or public?",
              "a": "You will need to save the Docker image as a tar file:\ndocker save - o <path for generated tar file> <image name>\nThen copy your image to a new system with regular file transfer tools such as cp or scp. After that you will have to load the image into Docker:\ndocker load -i <path to image tar file>"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers. The service has both free and premium tiers. The software that hosts the containers is called Docker Engine. It was first started in 2013 and is developed by Docker, Inc",
          "icon": "assets/icons/software_architecture/docker.png"
        },
        {
          "sub_category_name": "Layering & Middleware",
          "junior_level": [
            {
              "q": "Why is it a good idea for “lower” application layers not to be aware of “higher” ones?",
              "a": "The fundamental motivation is this:\nYou want to be able to rip an entire layer out and substitute a completely different (rewritten) one, and NOBODY SHOULD (BE ABLE TO) NOTICE THE DIFFERENCE.\nThe most obvious example is ripping the bottom layer out and substituting a different one. This is what you do when you develop the upper layer(s) against a simulation of the hardware, and then substitute in the real hardware.\nAlso layers, modules, indeed architecture itself, are means of making computer programs easier to understand by humans."
            },
            {
              "q": "What Is Middle Tier Clustering?",
              "a": "Middle tier clustering is just a cluster that is used for service the middle tier in a application. This is popular since many clients may be using middle tier and a lot of heavy load may also be served by middle tier that requires it be to highly available.\nFailure of middle tier can cause multiple clients and systems to fail, therefore its one of the approaches to do clustering at the middle tier of a application. In general any application that has a business logic that can be shared across multiple client can use a middle tier cluster for high availability."
            },
            {
              "q": "Why layering your application is important? Provide some bad layering example.",
              "a": "Each component should contain 'layers' - a dedicated object for the web, logic and data access code. This not only draws a clean separation of concerns but also significantly eases mocking and testing the system.\nThough this is a very common pattern, API developers tend to mix layers by passing the web layer objects (for example Express req, res) to business logic and data layers - this makes your application dependant on and accessible by Express only. App that mixes web objects with other layers can not be accessed by testing code, CRON jobs and other non-Express callers"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Simply put, middleware is an abstraction layer that acts as an intermediary. Middleware manages interactions between application software and the underlying system software layers, such as the operating system and device driver layers.",
          "icon": "assets/icons/software_architecture/layering.png"
        },
        {
          "sub_category_name": "Load Balancing",
          "junior_level": [
            {
              "q": "What Is Load Balancing?",
              "a": "Load balancing is simple technique for distributing workloads across multiple machines or clusters. The most common and simple load balancing algorithm is Round Robin. In this type of load balancing the request is divided in circular order ensuring all machines get equal number of requests and no single machine is overloaded or underloaded.\nThe Purpose of load balancing is to\nOptimize resource usage (avoid overload and under-load of any machines)\nAchieve Maximum Throughput\nMinimize response time\nMost common load balancing techniques in web based applications are\nRound robin\nSession affinity or sticky session\nIP Address affinity"
            },
            {
              "q": "What Is Round-Robin Load Balancing?",
              "a": "Round‑robin load balancing is one of the simplest methods for distributing client requests across a group of servers. Going down the list of servers in the group, the round‑robin load balancer forwards a client request to each server in turn. When it reaches the end of the list, the load balancer loops back and goes down the list again (sends the next request to the first listed server, the one after that to the second server, and so on)."
            },
            {
              "q": "Name some advantages of Round-Robin Load Balancing",
              "a": "The main benefit of round‑robin load balancing is that it is extremely simple to implement. However, it does not always result in the most accurate or efficient distribution of traffic, because many round‑robin load balancers assume that all servers are the same: currently up, currently handling the same load, and with the same storage and computing capacity."
            },
            {
              "q": "What Is Sticky Session Load Balancing? What Do You Mean By \"Session Affinity\"?",
              "a": "Sticky session or a session affinity technique is another popular load balancing technique that requires a user session to be always served by an allocated machine.\nIn a load balanced server application where user information is stored in session it will be required to keep the session data available to all machines. This can be avoided by always serving a particular user session request from one machine. The machine is associated with a session as soon as the session is created. All the requests in a particular session are always redirected to the associated machine. This ensures the user data is only at one machine and load is also shared.\nThis is typically done by using SessionId cookie. The cookie is sent to the client for the first request and every subsequent request by client must be containing that same cookie to identify the session.\nWhat Are The Issues With Sticky Session?\nThere are few issues that you may face with this approach\nThe client browser may not support cookies, and your load balancer will not be able to identify if a request belongs to a session. This may cause strange behavior for the users who use no cookie based browsers.\nIn case one of the machine fails or goes down, the user information (served by that machine) will be lost and there will be no way to recover user session."
            },
            {
              "q": "What Is Load Balancing Fail Over?",
              "a": "Fail over means switching to another machine when one of the machine fails. Fail over is a important technique in achieving high availability. Typically a load balancer is configured to fail over to another machine when the main machine fails.\nTo achieve least down time, most load balancer support a feature of heart beat check. This ensures that target machine is responding. As soon as a hear beat signal fails, load balancer stops sending request to that machine and redirects to other machines or cluster."
            },
            {
              "q": "Why should we use Load Balancer (except preventing overloading)?",
              "a": "Load balancers distribute incoming client requests to computing resources such as application servers and databases. In each case, the load balancer returns the response from the computing resource to the appropriate client. Load balancers are effective at:\nPreventing requests from going to unhealthy servers\nPreventing overloading resources\nHelping eliminate single points of failure\nAdditional benefits include:\nSSL termination - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations\nRemoves the need to install X.509 certificates on each server\nSession persistence - Issue cookies and route a specific client's requests to same instance if the web apps do not keep track of sessions"
            },
            {
              "q": "What is the difference between Session Affinity and Sticky Session?",
              "a": "Sticky session means that when a request comes into a site from a client all further requests go to the same server initial client request accessed. I believe that session affinity is a synonym for sticky session, but there are different ways of implementing it:\nSend a cookie on the first response and then look for it on subsequent ones. The cookie says which real server to send to. Bad if you have to support cookie-less browsers\nPartition based on the requester's IP address. Bad if it isn't static or if many come in through the same proxy.\nIf you authenticate users, partition based on user name (it has to be an HTTP supported authentication mode to do this).\nDon't require state. Let clients hit any server (send state to the client and have them send it back) This is not a sticky session, it's a way to avoid having to do it.\nI would suspect that sticky might refer to the cookie way, and that affinity might refer to #2 and #3 in some contexts, but that's not how I have seen it used (or use it myself)."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In computing, load balancing refers to the process of distributing a set of tasks over a set of resources, with the aim of making their overall processing more efficient. Load balancing can optimize the response time and avoid unevenly overloading some compute nodes while other compute nodes are left idle.",
          "icon": "assets/icons/software_architecture/load_balancing.png"
        },
        {
          "sub_category_name": "Microservices",
          "junior_level": [
            {
              "q": "Define Microservice Architecture",
              "a": "Microservices, aka Microservice Architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain."
            },
            {
              "q": "List down the advantages of Microservices Architecture",
              "a": "Independent Development. All microservices can be easily developed based on their individual functionality\nIndependent Deployment. Based on their services, they can be individually deployed in any application\nFault Isolation. Even if one service of the application does not work, the system still continues to function\nMixed Technology Stack. Different languages and technologies can be used to build different services of the same application\nGranular Scaling. Individual components can scale as per need, there is no need to scale all components together"
            },
            {
              "q": "Why Would You Opt For Microservices Architecture?",
              "a": "There are plenty of pros that are offered by Microservices architecture. Here are a few of them:\nMicroservices can adapt easily to other frameworks or technologies.\nFailure of a single process does not affect the entire system.\nProvides support to big enterprises as well as small teams.\nCan be deployed independently and in relatively less time."
            },
            {
              "q": "What are main differences between Microservices and Monolithic Architecture?",
              "a": "Microservices\nService Startup is fast\nMicroservices are loosely coupled architecture.\nChanges done in a single data model does not affect other Microservices.\nMicroservices focuses on products, not projects\nMonolithic Architecture\nService startup takes time\nMonolithic architecture is mostly tightly coupled.\nAny changes in the data model affect the entire database\nMonolithic put emphasize over the whole project"
            },
            {
              "q": "What are the standard patterns of orchestrating microservices?",
              "a": "As we start to model more and more complex logic, we have to deal with the problem of managing business processes that stretch across the boundary of individual services.\nWith orchestration, we rely on a central brain to guide and drive the process, much like the conductor in an orchestra. The orchestration style corresponds more to the SOA idea of orchestration/task services. For example we could wrap the business flow in its own service. Where the proxy orchestrates the interaction between the microservices like shown in the below picture.\nWith choreography, we inform each part of the system of its job, and let it work out the details, like dancers all find‐ ing their way and reacting to others around them in a ballet. The choreography style corresponds to the dumb pipes and smart endpoints mentioned by Martin Fowler's. That approach is also called the domain approach and is using domain events, where each service publish events regarding what have happened and other services can subscribe to those events."
            },
            {
              "q": "Whether do you find GraphQL the right fit for designing microservice architecture?",
              "a": "GraphQL and microservices are a perfect fit, because GraphQL hides the fact that you have a microservice architecture from the clients. From a backend perspective, you want to split everything into microservices, but from a frontend perspective, you would like all your data to come from a single API. Using GraphQL is the best way I know of that lets you do both. It lets you split up your backend into microservices, while still providing a single API to all your application, and allowing joins across data from different services."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "A microservice architecture – a variant of the service-oriented architecture structural style – arranges an application as a collection of loosely-coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight.",
          "icon": "assets/icons/software_architecture/microservices.png"
        },
        {
          "sub_category_name": "NoSQL",
          "junior_level": [
            {
              "q": "What are NoSQL databases? What are the different types of NoSQL databases?",
              "a": "A NoSQL database provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases (like SQL, Oracle, etc.).\nTypes of NoSQL databases:\nDocument Oriented\nKey Value\nGraph\nColumn Oriented"
            },
            {
              "q": "What do you understand by NoSQL databases? Explain.",
              "a": "At the present time, the internet is loaded with big data, big users, big complexity etc. and also becoming more complex day by day. NoSQL is answer of all these problems; It is not a traditional database management system, not even a relational database management system (RDBMS). NoSQL stands for “Not Only SQL”. NoSQL is a type of database that can handle and sort all type of unstructured, messy and complicated data. It is just a new way to think about the database."
            },
            {
              "q": "What are the advantages of NoSQL over traditional RDBMS?",
              "a": "NoSQL is better than RDBMS because of the following reasons/properities of NoSQL:\nIt supports semi-structured data and volatile data\nIt does not have schema\nRead/Write throughput is very high\nHorizontal scalability can be achieved easily\nWill support Bigdata in volumes of Terra Bytes & Peta Bytes\nProvides good support for Analytic tools on top of Bigdata\nCan be hosted in cheaper hardware machines\nIn-memory caching option is available to increase the performance of queries\nFaster development life cycles for developers\nStill, RDBMS is better than NoSQL for the following reasons/properties of RDBMS:\nTransactions with ACID properties - Atomicity, Consistency, Isolation & Durability\nAdherence to Strong Schema of data being written/read\nReal time query management ( in case of data size < 10 Tera bytes )\nExecution of complex queries involving join & group by clauses"
            },
            {
              "q": "Explain difference between scaling horizontally and vertically for databases",
              "a": "Horizontal scaling means that you scale by adding more machines into your pool of resources whereas\nVertical scaling means that you scale by adding more power (CPU, RAM) to an existing machine.\nIn a database world horizontal-scaling is often based on the partitioning of the data i.e. each node contains only part of the data, in vertical-scaling the data resides on a single node and scaling is done through multi-core i.e. spreading the load between the CPU and RAM resources of that machine.\nGood examples of horizontal scaling are Cassandra, MongoDB, Google Cloud Spanner. and a good example of vertical scaling is MySQL - Amazon RDS (The cloud version of MySQL)."
            },
            {
              "q": "When would you use NoSQL?",
              "a": "It depends from some general points:\nNoSQL is typically good for unstructured/\"schemaless\" data - usually, you don't need to explicitly define your schema up front and can just include new fields without any ceremony\nNoSQL typically favours a denormalised schema due to no support for JOINs per the RDBMS world. So you would usually have a flattened, denormalized representation of your data.\nUsing NoSQL doesn't mean you could lose data. Different DBs have different strategies. e.g. MongoDB - you can essentially choose what level to trade off performance vs potential for data loss - best performance = greater scope for data loss.\nIt's often very easy to scale out NoSQL solutions. Adding more nodes to replicate data to is one way to a) offer more scalability and b) offer more protection against data loss if one node goes down. But again, depends on the NoSQL DB/configuration. NoSQL does not necessarily mean \"data loss\" like you infer.\nIMHO, complex/dynamic queries/reporting are best served from an RDBMS. Often the query functionality for a NoSQL DB is limited.\nIt doesn't have to be a 1 or the other choice. My experience has been using RDBMS in conjunction with NoSQL for certain use cases.\nNoSQL DBs often lack the ability to perform atomic operations across multiple \"tables\"."
            },
            {
              "q": "When should I use a NoSQL database instead of a relational database?",
              "a": "Relational databases enforces ACID. So, you will have schema based transaction oriented data stores. It's proven and suitable for 99% of the real world applications. You can practically do anything with relational databases.\nBut, there are limitations on speed and scaling when it comes to massive high availability data stores. For example, Google and Amazon have terabytes of data stored in big data centers. Querying and inserting is not performant in these scenarios because of the blocking/schema/transaction nature of the RDBMs. That's the reason they have implemented their own databases (actually, key-value stores) for massive performance gain and scalability.\nIf you need a NoSQL db you usually know about it, possible reasons are:\nclient wants 99.999% availability on a high traffic site.\nyour data makes no sense in SQL, you find yourself doing multiple JOIN queries for accessing some piece of information.\nyou are breaking the relational model, you have CLOBs that store denormalized data and you generate external indexes to search that data."
            },
            {
              "q": "What does Document-oriented vs. Key-Value mean in context of NoSQL?",
              "a": "A key-value store provides the simplest possible data model and is exactly what the name suggests: it's a storage system that stores values indexed by a key. You're limited to query by key and the values are opaque, the store doesn't know anything about them. This allows very fast read and write operations (a simple disk access) and I see this model as a kind of non volatile cache (i.e. well suited if you need fast accesses by key to long-lived data).\nA document-oriented database extends the previous model and values are stored in a structured format (a document, hence the name) that the database can understand. For example, a document could be a blog post and the comments and the tags stored in a denormalized way. Since the data are transparent, the store can do more work (like indexing fields of the document) and you're not limited to query by key. As I hinted, such databases allows to fetch an entire page's data with a single query and are well suited for content oriented applications (which is why big sites like Facebook or Amazon like them).\nOther kinds of NoSQL databases include column-oriented stores, graph databases and even object databases."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "A NoSQL database provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases. Such databases have existed since the late 1960s, but the name \"NoSQL\" was only coined in the early 21st century, triggered by the needs of Web 2.0 companies.",
          "icon": "assets/icons/software_architecture/nosql.png"
        },
        {
          "sub_category_name": "Reactive Systems",
          "junior_level": [
            {
              "q": "What is Scalability of the Reactive System?",
              "a": "Scalability is the ability of a system to make use of more computing resources in order to increase its performance is measured by the ratio of throughput gain to resource increase. A perfectly scalable system is characterized by both numbers being proportional: a twofold allocation of resources will double the throughput. Scalability is typically limited by the introduction of bottlenecks or synchronization points within the system, leading to constrained scalability, see Amdahl’s Law and Gunther’s Universal Scalability Model."
            },
            {
              "q": "What Does Asynchrony Mean in the Context of Reactive Systems?",
              "a": "The Oxford Dictionary defines asynchronous as “not existing or occurring at the same time”. In the context of Reactive Sysytems, it means that the processing of a request occurs at an arbitrary point in time, sometime after it has been transmitted from client to service. The client cannot directly observe, or synchronize with, the execution that occurs within the service. This is the antonym of synchronous processing which implies that the client only resumes its own execution once the service has processed the request."
            },
            {
              "q": "What is Actor Model?",
              "a": "All Actor model says that your concurrency primitives are actors, which can:\nreceive a message and decide what to do next depending on the content of the message, including:\nsend messages to any actors they know about\ncreate new actors\nand provides certain guarantees, e.g.:\nany actor will only handle a single message at a time\nmessages sent by actor X to actor Y will arrive in the order thay were sent"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Reactive systems are an architectural style that allows multiple individual applications to blend into one unit, reacting to their environment, while staying aware of each other.",
          "icon": "assets/icons/software_architecture/reactive_system.png"
        },
        {
          "sub_category_name": "SOA",
          "junior_level": [
            {
              "q": "Define what is SOA",
              "a": "A Service Oriented Architecture (SOA) is basically defined as an architectural pattern consisting of services. Here application components provide services to the other components using communication protocol over the network. This communication involves data exchanging or some coordination activity between services.\nSome of the key principles on which SOA is based are mentioned below\nThe service contract should be standardized containing all the description of the services.\nThere is loose coupling defining the less dependency between the web services and the client.\nIt should follow Service Abstraction rule, which says the service should not expose the way functionality has been executed to the client application.\nServices should be reusable in order to work with various application types.\nServices should be stateless having the feature of discoverability.\nServices break big problems into little problems and allow diverse subscribers to use the services."
            },
            {
              "q": "What is WSDL?",
              "a": "WSDL stands for Web Service Description Language. WSDL is an XML based document that provides technical details about the web service. Some of the useful information in WSDL document are:\nmethod name,\nport types,\nservice end point,\nbinding,\nmethod parameters etc."
            },
            {
              "q": "What is SOAP?",
              "a": "SOAP stands for Simple Object Access Protocol. SOAP is an XML based industry standard protocol for designing and developing web services. Since it’s XML based, it’s platform and language independent. So our server can be based on JAVA and client can be on .NET, PHP etc. and vice versa."
            },
            {
              "q": "What is the difference between Monolithic, SOA and Microservices Architecture?",
              "a": "Monolithic Architecture is similar to a big container wherein all the software components of an application are assembled together and tightly packaged.\nA Service-Oriented Architecture is a collection of services which communicate with each other. The communication can involve either simple data passing or it could involve two or more services coordinating some activity.\nMicroservice Architecture is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain."
            },
            {
              "q": "Explain WSDL?",
              "a": "WSDL stands for Web service Description Language. It is a simple XML document which comes under the Service Description layer of Web Service Protocol Stock and describes the technical details or locates the user interface to web service. Few of the important information present in WSDL document are\nMethod name\nPort types\nService end point\nMethod parameters\nHeader information\nOrigin, etc"
            },
            {
              "q": "What are advantages of SOAP Web Services?",
              "a": "SOAP web services have all the advantages that web services has, some of the additional advantages are:\nWSDL document provides contract and technical details of the web services for client applications without exposing the underlying implementation technologies.\nSOAP uses XML data for payload as well as contract, so it can be easily read by any technology.\nSOAP protocol is universally accepted, so it's an industry standard approach with many easily available open source implementations."
            },
            {
              "q": "What are disadvantages of SOAP Web Services?",
              "a": "Some of the disadvantages of SOAP protocol are:\nOnly XML can be used, JSON and other lightweight formats are not supported.\nSOAP is based on the contract, so there is a tight coupling between client and server applications.\nSOAP is slow because payload is large for a simple string message, since it uses XML format.\nAnytime there is change in the server side contract, client stub classes need to be generated again. Can’t be tested easily in browser"
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "In software engineering, service-oriented architecture is an architectural style that supports service orientation. By consequence, it is as well applied in the field of software design where services are provided to the other components by application components, through a communication protocol over a network.",
          "icon": "assets/icons/software_architecture/soa.png"
        },
        {
          "sub_category_name": "Software Architecture",
          "junior_level": [
            {
              "q": "What Is Load Balancing?",
              "a": "Load balancing is simple technique for distributing workloads across multiple machines or clusters. The most common and simple load balancing algorithm is Round Robin. In this type of load balancing the request is divided in circular order ensuring all machines get equal number of requests and no single machine is overloaded or underloaded.\nThe Purpose of load balancing is to\nOptimize resource usage (avoid overload and under-load of any machines)\nAchieve Maximum Throughput\nMinimize response time\nMost common load balancing techniques in web based applications are\nRound robin\nSession affinity or sticky session\nIP Address affinity"
            },
            {
              "q": "What Is CAP Theorem?",
              "a": "The CAP Theorem for distributed computing was published by Eric Brewer. This states that it is not possible for a distributed computer system to simultaneously provide all three of the following guarantees:\nConsistency (all nodes see the same data even at the same time with concurrent updates )\nAvailability (a guarantee that every request receives a response about whether it was successful or failed)\nPartition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)\nThe CAP acronym corresponds to these three guarantees. This theorem has created the base for modern distributed computing approaches. Worlds most high volume traffic companies (e.g. Amazon, Google, Facebook) use this as basis for deciding their application architecture. It's important to understand that only two of these three conditions can be guaranteed to be met by a system."
            },
            {
              "q": "Define Microservice Architecture",
              "a": "Microservices, aka Microservice Architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain."
            },
            {
              "q": "Why use WebSocket over Http?",
              "a": "A WebSocket is a continuous connection between client and server. That continuous connection allows the following:\nData can be sent from server to client at any time, without the client even requesting it. This is often called server-push and is very valuable for applications where the client needs to know fairly quickly when something happens on the server (like a new chat messages has been received or a new price has been udpated). A client cannot be pushed data over http. The client would have to regularly poll by making an http request every few seconds in order to get timely new data. Client polling is not efficient.\nData can be sent either way very efficiently. Because the connection is already established and a webSocket data frame is very efficiently organized, one can send data a lot more efficiently that via an HTTP request that necessarily contains headers, cookies, etc..."
            },
            {
              "q": "What do you mean by lower latency interaction?",
              "a": "Low latency means that there is very little delay between the time you request something and the time you get a response. As it applies to webSockets, it just means that data can be sent quicker (particularly over slow links) because the connection has already been established so no extra packet roundtrips are required to establish the TCP connection."
            },
            {
              "q": "What Is Scalability?",
              "a": "Scalability is the ability of a system, network, or process to handle a growing amount of load by adding more resources. The adding of resource can be done in two ways\nScaling Up\nThis involves adding more resources to the existing nodes. For example, adding more RAM, Storage or processing power.\nScaling Out\nThis involves adding more nodes to support more users.\nAny of the approaches can be used for scaling up/out a application, however the cost of adding resources (per user) may change as the volume increases. If we add resources to the system It should increase the ability of application to take more load in a proportional manner of added resources.\nAn ideal application should be able to serve high level of load in less resources. However, in practical, linearly scalable system may be the best option achievable. Poorly designed applications may have really high cost on scaling up/out since it will require more resources/user as the load increases."
            },
            {
              "q": "Why Do You Need Clustering?",
              "a": "Clustering is needed for achieving high availability for a server software. The main purpose of clustering is to achieve 100% availability or a zero down time in service. A typical server software can be running on one computer machine and it can serve as long as there is no hardware failure or some other failure. By creating a cluster of more than one machine, we can reduce the chances of our service going un-available in case one of the machine fails.\nDoing clustering does not always guarantee that service will be 100% available since there can still be a chance that all the machine in a cluster fail at the same time. However it in not very likely in case you have many machines and they are located at different location or supported by their own resources."
            },
            {
              "q": "What Is A Cluster?",
              "a": "A cluster is group of computer machines that can individually run a software. Clusters are typically utilized to achieve high availability for a server software. Clustering is used in many types of servers for high availability.\nApp Server Cluster\nAn app server cluster is group of machines that can run a application server that can be reliably utilized with a minimum of down-time.\nDatabase Server Cluster\nAn database server cluster is group of machines that can run a database server that can be reliably utilized with a minimum of down-time."
            },
            {
              "q": "What is Domain Driven Design?",
              "a": "Domain Driven Design is a methodology and process prescription for the development of complex systems whose focus is mapping activities, tasks, events, and data within a problem domain into the technology artifacts of a solution domain.\nIt is all about trying to make your software a model of a real-world system or process."
            },
            {
              "q": "What defines a software architect?",
              "a": "An architect is the captain of the ship, making the decisions that cross multiple areas of concern (navigation, engineering, and so on), taking final responsibility for the overall health of the ship and its crew (project and its members), able to step into any station to perform those duties as the need arises (write code for any part of the project should they lose a member). He has to be familiar with the problem domain, the technology involved, and keep an eye out on new technologies that might make the project easier or answer new customers' feature requests."
            },
            {
              "q": "What is meant by the KISS principle?",
              "a": "KISS, a backronym for \"keep it simple, stupid\", is a design principle noted by the U.S. Navy in 1960. The KISS principle states that most systems work best if they are kept simple rather than made complicated; therefore simplicity should be a key goal in design, and that unnecessary complexity should be avoided."
            },
            {
              "q": "Why is it a good idea for “lower” application layers not to be aware of “higher” ones?",
              "a": "The fundamental motivation is this:\nYou want to be able to rip an entire layer out and substitute a completely different (rewritten) one, and NOBODY SHOULD (BE ABLE TO) NOTICE THE DIFFERENCE.\nThe most obvious example is ripping the bottom layer out and substituting a different one. This is what you do when you develop the upper layer(s) against a simulation of the hardware, and then substitute in the real hardware.\nAlso layers, modules, indeed architecture itself, are means of making computer programs easier to understand by humans."
            },
            {
              "q": "What does the expression “Fail Early” mean, and when would you want to do so?",
              "a": "Essentially, fail fast (a.k.a. fail early) is to code your software such that, when there is a problem, the software fails as soon as and as visibly as possible, rather than trying to proceed in a possibly unstable state.\nFail Fast approach won’t reduce the overall number of bugs, at least not at first, but it’ll make most defects much easier to find."
            }
          ],
          "middle_level": [],
          "senior_level": [],
          "introduction": "Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations.",
          "icon": "assets/icons/software_architecture/software_archi.png"
        }
      ]
    }
  ]
}